package DasmPackage.Analizador;
import java_cup.runtime.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DasmPackage.DasmAST.*;
import Abstraccion.*;
import Estructuras.GestorFunciones;
import Estructuras.FuncionDasm;
parser code
{:
    public static String ArchivoOrigen;
    public static String PathProyecto;
    public static ArrayList<TError> errores;
    public static ArrayList<String> expected;
    public static GestorFunciones gestor;
    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }
:}

action code
{:
    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }
:}
// CODIGO DE DECLARACIONES
// ---------------> PALABRAS RESERVADAS
terminal String add, diff, mult, div, mod, lt, gt, lte, gte, eqz, and, or, not, br, brIf, prChar, prInt, prFloat;
terminal String glocal, slocal, gglobal, sglobal, tlocal, tglobal, function, end, calc,ret, point, print;
terminal String quadrate, oval, str, line, llama;
terminal String entero, decimal, identificador;
////////////////////////////////////////////////
non terminal Object SENTENCIAS, INICIO, FUNCION, SET_LOCAL, GET_LOCAL, SET_GLOBAL, GET_GLOBAL, LLAMADO;
////////////////////////////////////////////////
start with INICIO;
////////////////////////////////////////////////
INICIO ::= {:parser.errores = new ArrayList<>(); this.ArchivoOrigen = parser.ArchivoOrigen; parser.expected = new ArrayList<>();
             parser.gestor = new GestorFunciones();
            :}
           SENTENCIAS:lista
           {:
             ArrayList<SentenciaDasm> sentencias = (ArrayList<SentenciaDasm>)lista;
             if(sentencias == null) {sentencias = new ArrayList<>();}
             FuncionDasm f = new FuncionDasm(listaright, listaleft, ArchivoOrigen, "$r_global", sentencias);
             parser.gestor.addFuncion("$r_global", f);
            :}
           ;// EN ESTA PARTE DEBERIA DE METER LA "FUNCION GLOBAL DONDE INICIARA LA EJECUCION"

////////////////////////////////////////////////
SENTENCIAS ::= SENTENCIAS:lista FUNCION
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             RESULT = inst;
           :}
           | SENTENCIAS GET_GLOBAL
           | SENTENCIAS:lista GET_LOCAL:ins
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS SET_GLOBAL
           | SENTENCIAS:lista SET_LOCAL:ins
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista LLAMADO:ins
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista entero:val
           {:
              ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
              if(inst==null){inst = new ArrayList<>();}
              Entero i = new Entero(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              inst.add(i);
              RESULT = inst;
           :}
           | SENTENCIAS:lista decimal:val
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Decimal i = new Decimal(valright, valleft, ArchivoOrigen, Double.parseDouble(val));
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista add:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Add i = new Add(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista diff:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Diff i = new Diff(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista mod:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Mod i = new Mod(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista div:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Div i = new Div(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista mult:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Mult i = new Mult(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista lt:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Lt i = new Lt(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista gt:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Gt i = new Gt(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista lte:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Lte i = new Lte(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista gte:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Gte i = new Gte(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista eqz:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Eqz i = new Eqz(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista prChar:val
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
            Entero i = new Entero(valright, valleft, ArchivoOrigen, 10);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista prInt:val
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Entero i = new Entero(valright, valleft, ArchivoOrigen,20);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista prFloat:val
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Entero i = new Entero(valright, valleft, ArchivoOrigen,30);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS:lista print:aux
           {:
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             // AQUI VA LA INSTRUCCION
             Print i = new Print(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           :}
           | SENTENCIAS and
           {:
              System.out.println("AND");
           :}
           | SENTENCIAS or
           {:
              System.out.println("OR");
           :}
           | SENTENCIAS not
           {:
              System.out.println("NOT");
           :}
           | SENTENCIAS:lista br:aux identificador:id
           {:
              Br i = new Br(auxright, auxleft, ArchivoOrigen, id);
              ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
              if(inst==null){inst = new ArrayList<>();}
              inst.add(i);
              RESULT = inst;
           :}
           | SENTENCIAS:lista brIf:aux identificador:id
           {:
              BrIf i = new BrIf(auxright, auxleft, ArchivoOrigen, id);
              ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
              if(inst==null){inst = new ArrayList<>();}
              inst.add(i);
              RESULT = inst;
           :}
           | SENTENCIAS:lista identificador:aux
           {:
              Etiqueta i = new Etiqueta(auxright, auxleft, ArchivoOrigen, aux);
              ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
              if(inst==null){inst = new ArrayList<>();}
              inst.add(i);
              RESULT = inst;
           :}
           | entero:val
           {:
              Entero i = new Entero(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | decimal:val
           {:
              Decimal i = new Decimal(valright, valleft, ArchivoOrigen, Double.parseDouble(val));
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | add:aux
           {:
              Add i = new Add(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | diff:aux
           {:
              Diff i = new Diff(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | mod:aux
           {:
              Mod i = new Mod(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | div:aux
           {:
              Div i = new Div(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | mult:aux
           {:
              Mult i = new Mult(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | lt:aux
           {:
              Lt i = new Lt(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | gt:aux
           {:
              Gt i = new Gt(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | lte:aux
           {:
              Lte i = new Lte(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | gte:aux
           {:
              Gte i = new Gte(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | eqz:aux
           {:
              Eqz i = new Eqz(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | prChar:val
           {:
             Entero i = new Entero(valright, valleft, ArchivoOrigen, 10);
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           :}
           | prInt:val
           {:
             Entero i = new Entero(valright, valleft, ArchivoOrigen, 20);
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           :}
           | prFloat:val
           {:
             Entero i = new Entero(valright, valleft, ArchivoOrigen, 30);
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           :}
           | print:aux
           {:
             // AQUI VA LA INSTRUCCION
             Print i = new Print(auxright, auxleft, ArchivoOrigen);
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           :}
           | and
           {:
              System.out.println("AND");
           :}
           | or
           {:
              System.out.println("OR");
           :}
           | not
           {:
              System.out.println("NOT");
           :}
           | br identificador:id
           {:
              Br i = new Br(idright, idleft, ArchivoOrigen, id);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | brIf:aux identificador:id
           {:
              BrIf i = new BrIf(auxright, auxleft, ArchivoOrigen, id);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | identificador:aux
           {:
              Etiqueta i = new Etiqueta(auxright, auxleft, ArchivoOrigen, aux);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | FUNCION
           | GET_GLOBAL
           | GET_LOCAL:ins
           {:
              SentenciaDasm i = (SentenciaDasm)ins;
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           | SET_LOCAL:ins
           {:
             SentenciaDasm i = (SentenciaDasm)ins;
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           :}
           | SET_GLOBAL
           | LLAMADO:ins
           {:
              SentenciaDasm i = (SentenciaDasm)ins;
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           :}
           ;
////////////////////////////////////////////////
FUNCION ::= function identificador:id end
        {:
            ArrayList<SentenciaDasm> sentencias = new ArrayList<>();
            FuncionDasm f = new FuncionDasm(idright, idleft, ArchivoOrigen, id, sentencias);
            parser.gestor.addFuncion(id, f);
        :}
        | function identificador:id SENTENCIAS:lista end
        {:
            ArrayList<SentenciaDasm> sentencias = (ArrayList<SentenciaDasm>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            FuncionDasm f = new FuncionDasm(idright, idleft, ArchivoOrigen, id, sentencias);
            parser.gestor.addFuncion(id, f);
        :}
        | function error end
        ;
/////////////////////////////////////////////////
SET_LOCAL ::= slocal entero:val
          {:
              SetLocal i = new SetLocal(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              RESULT = i;
          :}
          | slocal calc:aux
          {:
              SetLocalCalc i = new SetLocalCalc(auxright, auxleft, ArchivoOrigen);
              RESULT = i;
          :}
          | slocal ret:aux
          {:
              SetLocalRet i = new SetLocalRet(auxright, auxleft, ArchivoOrigen);
              RESULT = i;
          :}
          ;
/////////////////////////////////////////////////
GET_GLOBAL ::= gglobal entero
          {:
              System.out.println("get_global entero");
          :}
          | gglobal calc
          {:
            System.out.println("get_global $calc");
          :}
          | gglobal ret
          ;
/////////////////////////////////////////////////
GET_LOCAL ::= glocal entero:val
          {:
             GetLocal i = new GetLocal(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
             RESULT = i;
          :}
          | glocal calc:aux
          {:
            GetLocalCalc i = new GetLocalCalc(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
          :}
          | glocal ret:aux
          {:
            GetLocalRet i = new GetLocalRet(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
          :}
          ;
/////////////////////////////////////////////////
SET_GLOBAL ::= sglobal entero
          {:
            System.out.println("set_global entero");
          :}
          | sglobal calc
          {:
            System.out.println("set_global $calc");
          :}
          | sglobal ret
          ;
//////////////////////////////////////////////////
LLAMADO ::= llama identificador:id
        {:
           Call i = new Call(idright, idleft, ArchivoOrigen, id);
           RESULT = i;
        :}
        ;
