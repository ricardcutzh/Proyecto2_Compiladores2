
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 17 21:37:45 CST 2018
//----------------------------------------------------

package DasmPackage.Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DasmPackage.DasmAST.*;
import Abstraccion.*;
import Estructuras.GestorFunciones;
import Estructuras.FuncionDasm;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 17 21:37:45 CST 2018
  */
public class DasmParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DasmParser() {super();}

  /** Constructor which sets the default scanner. */
  public DasmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DasmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\012\002\000\002\003" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\060\004\000\005\000\006\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\021\000\022\000\023\000\024\000\025" +
    "\000\026\000\031\000\042\000\043\000\044\000\001\002" +
    "\000\060\004\031\005\027\006\015\007\030\010\042\011" +
    "\020\012\032\013\007\014\022\015\033\016\043\017\024" +
    "\020\012\021\041\022\023\023\016\024\036\025\010\026" +
    "\040\031\017\042\025\043\037\044\011\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\064\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\031\uffde\032\uffde\042\uffde\043\uffde\044\uffde\001\002\000" +
    "\010\033\115\034\116\043\114\001\002\000\064\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\031" +
    "\uffe6\032\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000\064" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\031\uffd9\032\uffd9\042\uffd9\043\uffd9\044\uffd9\001\002" +
    "\000\064\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\031\uffd2\032\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\001\002\000\064\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\032\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\001\002\000\064\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\001\002\000\010\033\112\034\113\043" +
    "\111\001\002\000\006\003\103\045\104\001\002\000\064" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\031\uffe0\032\uffe0\042\uffe0\043\uffe0\044\uffe0\001\002" +
    "\000\062\002\uffff\004\071\005\067\006\061\007\070\010" +
    "\100\011\062\012\072\013\054\014\063\015\073\016\101" +
    "\017\065\020\056\021\077\022\064\023\016\024\036\025" +
    "\010\026\040\031\017\042\025\043\076\044\055\001\002" +
    "\000\064\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\031\uffdd\032\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\064\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\031\uffd7\032\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\001\002\000\064\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\042\uffda" +
    "\043\uffda\044\uffda\001\002\000\004\045\053\001\002\000" +
    "\064\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\031\uffd4\032\uffd4\042\uffd4\043\uffd4\044\uffd4\001" +
    "\002\000\064\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\031\uffe4\032\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\001\002\000\064\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\031\uffe2\032\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\001\002\000\064\002\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\031\uffe5\032\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\001\002\000\064\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\032" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\001\002\000\064\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\031" +
    "\uffdc\032\uffdc\042\uffdc\043\uffdc\044\uffdc\001\002\000\064" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\031\uffd1\032\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002" +
    "\000\064\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\031\uffd5\032\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\001\002\000\010\033\051\034\052\043\050\001\002\000" +
    "\064\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\031\uffe7\032\uffe7\042\uffe7\043\uffe7\044\uffe7\001" +
    "\002\000\010\033\047\034\046\043\045\001\002\000\064" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\031\uffd8\032\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002" +
    "\000\064\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\031\uffe3\032\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\001\002\000\064\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\001\002\000\064\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\032\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\001\002\000\064\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\031\uffc4\032\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\001\002\000\064\002\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\031\uffc2" +
    "\032\uffc2\042\uffc2\043\uffc2\044\uffc2\001\002\000\064\002" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\032\uffc3\042\uffc3\043\uffc3\044\uffc3\001\002\000" +
    "\064\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\031\uffcd\032\uffcd\042\uffcd\043\uffcd\044\uffcd\001" +
    "\002\000\064\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\031\uffcc\032\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\001\002\000\064\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\031\uffcb\032\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\001\002\000\064\002\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\031\uffc1\032\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\001\002\000\064\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\031\uffef\032" +
    "\uffef\042\uffef\043\uffef\044\uffef\001\002\000\064\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\031" +
    "\ufff7\032\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\064" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\031\uffea\032\uffea\042\uffea\043\uffea\044\uffea\001\002" +
    "\000\064\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\031\ufffb\032\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\001\002\000\064\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\001\002\000\064\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2\032\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\001\002\000\064\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1\032\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\001\002\000\064\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\031\uffee" +
    "\032\uffee\042\uffee\043\uffee\044\uffee\001\002\000\064\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\031\uffe8\032\uffe8\042\uffe8\043\uffe8\044\uffe8\001\002\000" +
    "\064\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\031\uffeb\032\uffeb\042\uffeb\043\uffeb\044\uffeb\001" +
    "\002\000\064\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\031\ufffc\032\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\001\002\000\064\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\031\ufff5\032\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\001\002\000\064\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\031\ufff3\032\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\001\002\000\064\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\031\ufff6\032" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000\064\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\031" +
    "\ufff0\032\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002\000\064" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\031\uffed\032\uffed\042\uffed\043\uffed\044\uffed\001\002" +
    "\000\064\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\031\ufff9\032\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\001\002\000\064\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\031\ufffd\032\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\001\002\000\064\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\031\ufff8\032\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\001\002\000\064\002\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\001\002\000\064\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\031\ufff4" +
    "\032\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002\000\064\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\031\uffec\032\uffec\042\uffec\043\uffec\044\uffec\001\002\000" +
    "\064\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\031\ufffe\032\ufffe\042\ufffe\043\ufffe\044\ufffe\001" +
    "\002\000\004\032\110\001\002\000\062\004\031\005\027" +
    "\006\015\007\030\010\042\011\020\012\032\013\007\014" +
    "\022\015\033\016\043\017\024\020\012\021\041\022\023" +
    "\023\016\024\036\025\010\026\040\031\017\032\105\042" +
    "\025\043\037\044\011\001\002\000\064\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\062\004\071" +
    "\005\067\006\061\007\070\010\100\011\062\012\072\013" +
    "\054\014\063\015\073\016\101\017\065\020\056\021\077" +
    "\022\064\023\016\024\036\025\010\026\040\031\017\032" +
    "\107\042\025\043\076\044\055\001\002\000\064\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031" +
    "\uffcf\032\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000\064" +
    "\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\031\uffce\032\uffce\042\uffce\043\uffce\044\uffce\001\002" +
    "\000\064\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\031\uffc7\032\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\001\002\000\064\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\001\002\000\064\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\001\002\000\064\002\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\031\uffca\032\uffca" +
    "\042\uffca\043\uffca\044\uffca\001\002\000\064\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\031\uffc9" +
    "\032\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\064\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\031\uffc8\032\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\003\004\012\003\001\001\000\020\002" +
    "\020\004\043\005\013\006\025\007\012\010\034\011\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\101\005\057\006\065\007\056\010\074\011\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\105\004\043\005" +
    "\013\006\025\007\012\010\034\011\033\001\001\000\002" +
    "\001\001\000\016\004\101\005\057\006\065\007\056\010" +
    "\074\011\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DasmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DasmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DasmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static String PathProyecto;
    public static ArrayList<TError> errores;
    public static ArrayList<String> expected;
    public static GestorFunciones gestor;
    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DasmParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DasmParser parser;

  /** Constructor */
  CUP$DasmParser$actions(DasmParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DasmParser$do_action(
    int                        CUP$DasmParser$act_num,
    java_cup.runtime.lr_parser CUP$DasmParser$parser,
    java.util.Stack            CUP$DasmParser$stack,
    int                        CUP$DasmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DasmParser$result;

      /* select the action based on the action number */
      switch (CUP$DasmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADO ::= llama identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
           Call i = new Call(idright, idleft, ArchivoOrigen, id);
           RESULT = i;
        
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("LLAMADO",7, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SET_GLOBAL ::= sglobal ret 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_GLOBAL",5, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SET_GLOBAL ::= sglobal calc 
            {
              Object RESULT =null;
		
            System.out.println("set_global $calc");
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_GLOBAL",5, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SET_GLOBAL ::= sglobal entero 
            {
              Object RESULT =null;
		
            System.out.println("set_global entero");
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_GLOBAL",5, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GET_LOCAL ::= glocal ret 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
            GetLocalRet i = new GetLocalRet(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_LOCAL",4, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GET_LOCAL ::= glocal calc 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
            GetLocalCalc i = new GetLocalCalc(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_LOCAL",4, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // GET_LOCAL ::= glocal entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             GetLocal i = new GetLocal(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
             RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_LOCAL",4, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // GET_GLOBAL ::= gglobal ret 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_GLOBAL",6, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GET_GLOBAL ::= gglobal calc 
            {
              Object RESULT =null;
		
            System.out.println("get_global $calc");
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_GLOBAL",6, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GET_GLOBAL ::= gglobal entero 
            {
              Object RESULT =null;
		
              System.out.println("get_global entero");
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("GET_GLOBAL",6, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SET_LOCAL ::= slocal ret 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              SetLocalRet i = new SetLocalRet(auxright, auxleft, ArchivoOrigen);
              RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_LOCAL",3, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SET_LOCAL ::= slocal calc 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              SetLocalCalc i = new SetLocalCalc(auxright, auxleft, ArchivoOrigen);
              RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_LOCAL",3, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SET_LOCAL ::= slocal entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              SetLocal i = new SetLocal(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              RESULT = i;
          
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SET_LOCAL",3, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= function error end 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= function identificador SENTENCIAS end 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		
            ArrayList<SentenciaDasm> sentencias = (ArrayList<SentenciaDasm>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            FuncionDasm f = new FuncionDasm(idright, idleft, ArchivoOrigen, id, sentencias);
            parser.gestor.addFuncion(id, f);
        
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-3)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= function identificador end 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		
            ArrayList<SentenciaDasm> sentencias = new ArrayList<>();
            FuncionDasm f = new FuncionDasm(idright, idleft, ArchivoOrigen, id, sentencias);
            parser.gestor.addFuncion(id, f);
        
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-2)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= LLAMADO 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              SentenciaDasm i = (SentenciaDasm)ins;
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= SET_GLOBAL 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= SET_LOCAL 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             SentenciaDasm i = (SentenciaDasm)ins;
             ArrayList<SentenciaDasm> inst = new ArrayList<>();
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= GET_LOCAL 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              SentenciaDasm i = (SentenciaDasm)ins;
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= GET_GLOBAL 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= brIf 
            {
              Object RESULT =null;
		
              System.out.println("BR_IF");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= br 
            {
              Object RESULT =null;
		
              System.out.println("BR");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= not 
            {
              Object RESULT =null;
		
              System.out.println("NOT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS ::= or 
            {
              Object RESULT =null;
		
              System.out.println("OR");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS ::= and 
            {
              Object RESULT =null;
		
              System.out.println("AND");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= eqz 
            {
              Object RESULT =null;
		
              System.out.println("EQZ");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= gte 
            {
              Object RESULT =null;
		
              System.out.println("GTE");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= lte 
            {
              Object RESULT =null;
		
              System.out.println("LTE");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= gt 
            {
              Object RESULT =null;
		
              System.out.println("GT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= lt 
            {
              Object RESULT =null;
		
              System.out.println("LT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= mult 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Mult i = new Mult(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= div 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Div i = new Div(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= mod 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Mod i = new Mod(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= diff 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Diff i = new Diff(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= add 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Add i = new Add(auxright, auxleft, ArchivoOrigen);
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Decimal i = new Decimal(valright, valleft, ArchivoOrigen, Double.parseDouble(val));
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              Entero i = new Entero(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              ArrayList<SentenciaDasm> inst = new ArrayList<>();
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS brIf 
            {
              Object RESULT =null;
		
              System.out.println("BR_IF");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS br 
            {
              Object RESULT =null;
		
              System.out.println("BR");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS not 
            {
              Object RESULT =null;
		
              System.out.println("NOT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS or 
            {
              Object RESULT =null;
		
              System.out.println("OR");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS and 
            {
              Object RESULT =null;
		
              System.out.println("AND");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS eqz 
            {
              Object RESULT =null;
		
              System.out.println("EQZ");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS gte 
            {
              Object RESULT =null;
		
              System.out.println("GTE");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS lte 
            {
              Object RESULT =null;
		
              System.out.println("LTE");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS gt 
            {
              Object RESULT =null;
		
              System.out.println("GT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS lt 
            {
              Object RESULT =null;
		
              System.out.println("LT");
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= SENTENCIAS mult 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Mult i = new Mult(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS div 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Div i = new Div(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIAS mod 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Mod i = new Mod(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= SENTENCIAS diff 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Diff i = new Diff(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIAS add 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Add i = new Add(auxright, auxleft, ArchivoOrigen);
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIAS decimal 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             Decimal i = new Decimal(valright, valleft, ArchivoOrigen, Double.parseDouble(val));
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= SENTENCIAS entero 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
              ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
              if(inst==null){inst = new ArrayList<>();}
              Entero i = new Entero(valright, valleft, ArchivoOrigen, Integer.parseInt(val));
              inst.add(i);
              RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= SENTENCIAS LLAMADO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= SENTENCIAS SET_LOCAL 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENTENCIAS SET_GLOBAL 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIAS GET_LOCAL 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             SentenciaDasm i = (SentenciaDasm)ins;
             inst.add(i);
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= SENTENCIAS GET_GLOBAL 
            {
              Object RESULT =null;

              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIAS FUNCION 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		
             ArrayList<SentenciaDasm> inst = (ArrayList<SentenciaDasm>)lista;
             if(inst==null){inst = new ArrayList<>();}
             RESULT = inst;
           
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.peek()).value;
		
             ArrayList<SentenciaDasm> sentencias = (ArrayList<SentenciaDasm>)lista;
             if(sentencias == null) {sentencias = new ArrayList<>();}
             FuncionDasm f = new FuncionDasm(listaright, listaleft, ArchivoOrigen, "$r_global", sentencias);
             parser.gestor.addFuncion("$r_global", f);
            
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.errores = new ArrayList<>(); this.ArchivoOrigen = parser.ArchivoOrigen; parser.expected = new ArrayList<>();
             parser.gestor = new GestorFunciones();
            
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          return CUP$DasmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)).value;
		RESULT = start_val;
              CUP$DasmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DasmParser$stack.elementAt(CUP$DasmParser$top-1)), ((java_cup.runtime.Symbol)CUP$DasmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DasmParser$parser.done_parsing();
          return CUP$DasmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

