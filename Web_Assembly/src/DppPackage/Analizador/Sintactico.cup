// --------------------------------> CODIGO DE USUARIO
package DppPackage.Analizador;
import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;
import DppPackage.DppAST.Sentencias.IF.*;
import DppPackage.DppAST.Sentencias.While.*;
import DppPackage.DppAST.Sentencias.For.*;
// --------------------------------> CODIGO DEL PARSER
parser code
{:
    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }
:}

action code
{:
    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }
:}
// -----------------------------------------------> CODIGO DE DECLARACIONES
// ------> PUNTUACION
terminal String ptComa, asigna, oParent, cParent, coma, oKey, cKey;
// ------> OPERADORES
terminal String mas, menos, mult, div, pot, inc, dec, igual, diff, menor, mayor, menorigual, mayorigual, and, or, not;
// ------> PALABRAS RESERVADAS
terminal entero, decimal, cadena, caracter, booleano, verdadero, falso, importar, para;
terminal String principal, vacio, retornar, si, sino, mientras, detener, continuar, imprimir;
// ------> VALORES
terminal String numEntero, numDecimal, dataChar, identificador, dataString;
// ------> NO TERMINALES
non terminal Object EXP, E, TIPO, L_DECLARACION, L_IMPORTAR;
non terminal Object INICIO, DECLARACIONES, DECLARACION_VAR, LLAMADA, L_EXPRE, RETORNA;
non terminal Object MAIN, METODOS, FUNCIONES, PARAMETROS, SENTENCIAS, ASIGNACION_VAR, FOR_INIT, FOR_ACTUALIZACION;
non terminal Object SENT_SI, SINO, SINO_SI, SENT_MIENTRAS, SENT_AUM_DEC, SENT_FOR, CONTINUE, BREAK, F_IMPRIMIR;
// ------> PRECEDENCE
precedence left or;
precedence left and;
precedence left igual, diff;
precedence left menor, mayor, menorigual, mayorigual;
precedence left mas, menos;
precedence left mult, div;
precedence left pot;
precedence right inc, dec, not;
precedence left cParent;
precedence left sino;
start with INICIO;
/*                         REGLAS SEMANTICAS                               */
/////////////////////////////////////////////////////////////////////////////
INICIO ::= {: this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);:} L_IMPORTAR DECLARACIONES
           | {: this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);:} DECLARACIONES
           ;
/////////////////////////////////////////////////////////////////////////////
L_IMPORTAR::= L_IMPORTAR importar:aux oParent dataString:ruta cParent ptComa
           {:
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           :}
           | importar:aux oParent dataString:ruta cParent ptComa
           {:
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           :}
           ;
/////////////////////////////////////////////////////////////////////////////
DECLARACIONES::= DECLARACIONES DECLARACION_VAR:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES MAIN:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES METODOS:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES FUNCIONES:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACION_VAR:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | MAIN:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | METODOS:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | FUNCIONES:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
SENTENCIAS::= SENTENCIAS:lista DECLARACION_VAR:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista ASIGNACION_VAR:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista LLAMADA:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista RETORNA:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista SENT_SI:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista SENT_MIENTRAS:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista SENT_AUM_DEC:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista SENT_FOR:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista BREAK:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista CONTINUE:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENTENCIAS:lista F_IMPRIMIR:nodo
          {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | DECLARACION_VAR:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | ASIGNACION_VAR:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | LLAMADA:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | RETORNA:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENT_SI:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENT_MIENTRAS:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENT_AUM_DEC:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | SENT_FOR:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | BREAK:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | CONTINUE:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          | F_IMPRIMIR:nodo
          {:
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          :}
          ;
/////////////////////////////////////////////////////////////////////////////
PARAMETROS ::= PARAMETROS:lista coma TIPO:tipo identificador:id
            {:
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            :}
            | TIPO:tipo identificador:id
            {:
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
MAIN ::= vacio principal:aux oParent cParent oKey cKey
      {:
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      :}
      | vacio principal:aux oParent cParent oKey SENTENCIAS:lista cKey
      {:
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      :}
      | vacio principal error cKey
      {:
            parser.expected.add("'('");
      :}
      ;
/////////////////////////////////////////////////////////////////////////////
METODOS ::= vacio identificador:id oParent cParent oKey cKey
        {:
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador:id oParent PARAMETROS:lista cParent oKey cKey
        {:
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador:id oParent cParent oKey SENTENCIAS:lista cKey
        {:
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador:id oParent PARAMETROS:lista2 cParent oKey SENTENCIAS:lista cKey
        {:
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador error cKey
        {:
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
FUNCIONES ::= TIPO:tipo identificador:id oParent cParent oKey cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO:tipo identificador:id oParent PARAMETROS:lista cParent oKey cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO:tipo identificador:id oParent cParent oKey SENTENCIAS:lista cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO:tipo identificador:id oParent PARAMETROS:lista2 cParent oKey SENTENCIAS:lista cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO identificador error cKey
        {:
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
RETORNA ::= retornar ptComa:aux
        {:
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, null);
            RESULT = r;
        :}
        | retornar:aux EXP:nodo ptComa
        {:
            Expresion exp = (Expresion)nodo;
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = r;
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
SENT_SI ::= si:aux oParent EXP:nodo cParent oKey cKey
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        :}
        |   si:aux oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        :}

        |   si:aux oParent EXP:nodo cParent oKey cKey SINO_SI:lista1 SINO:nodoSino
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        :}
        |   si:aux oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey SINO_SI:lista1 SINO:nodoSino
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        :}

        | si:aux oParent EXP:nodo cParent oKey cKey SINO_SI:lista1
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        :}
        | si:aux oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey SINO_SI:lista1
        {:
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        :}

        |   si:aux oParent EXP:nodo cParent oKey cKey SINO:nodoSino
        {:
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        :}
        |   si:aux oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey SINO:nodoSino
        {:
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        :}
        ;
//---------------------------------------------------------------------------
SINO_SI ::= SINO_SI:lista1 sino:aux si oParent EXP:nodo cParent oKey cKey
        {:
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        :}
        |   SINO_SI:lista1 sino:aux si oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey
        {:
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        :}
        |   sino:aux si oParent EXP:nodo cParent oKey cKey
        {:
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        :}
        |   sino:aux si oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey
        {:
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        :}
        ;
//---------------------------------------------------------------------------
SINO ::=  sino:aux oKey cKey
       {:
            ArrayList<Object> sentencias = new ArrayList<>();
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       :}
       |  sino:aux oKey SENTENCIAS:lista cKey
       {:
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       :}
       ;
/////////////////////////////////////////////////////////////////////////////
SENT_MIENTRAS::= mientras:aux oParent EXP:nodo cParent oKey cKey
              {:
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = new ArrayList<>();
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              :}
              |  mientras:aux oParent EXP:nodo cParent oKey SENTENCIAS:lista cKey
              {:
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                    if(sentencias == null){sentencias = new ArrayList<>();}
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              :}
              ;
/////////////////////////////////////////////////////////////////////////////
SENT_AUM_DEC ::= identificador:id inc ptComa
            {:
                SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            :}
            | identificador:id dec ptComa
            {:
                SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
SENT_FOR ::= para:aux FOR_INIT:nodo1 ptComa EXP:nodo2 ptComa FOR_ACTUALIZACION:nodo3 oKey SENTENCIAS:lista cKey
            {:
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                if(sentencias==null){sentencias = new ArrayList<>();}
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            :}
            | para:aux FOR_INIT:nodo1 ptComa EXP:nodo2 ptComa FOR_ACTUALIZACION:nodo3 oKey  cKey
            {:
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = new ArrayList<>();
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            :}
            ;
//---------------------------------------------------------------------------
FOR_INIT ::= oParent TIPO:t identificador:id asigna EXP:nodo
           {:
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                String tipo = (String)t;
                DeclaracionVar d = new DeclaracionVar(idright, idleft, ArchivoOrigen, nodos,tipo);
                RESULT = d;
           :}
           | oParent identificador:id asigna EXP:nodo
           {:
                Expresion e = (Expresion)nodo;
                AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                RESULT = a;
           :}
           ;
//---------------------------------------------------------------------------
FOR_ACTUALIZACION ::= identificador:id asigna EXP:nodo cParent
                {:
                    Expresion e = (Expresion)nodo;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                :}
                | identificador:id inc cParent
                {:
                   SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                   RESULT = i;
                :}
                | identificador:id dec cParent
                {:
                    SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                    RESULT = i;
                :}
                ;
/////////////////////////////////////////////////////////////////////////////
LLAMADA ::= identificador:id oParent cParent ptComa
        {:
            ArrayList<Expresion> exp = new ArrayList<>();
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        :}
        | identificador:id oParent L_EXPRE:lista cParent ptComa 
        {:
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null) { exp = new ArrayList<>();}
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        :}
        ;
//---------------------------------------------------------------------------
L_EXPRE ::= L_EXPRE:lista coma EXP:nodo
        {:
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null){exp = new ArrayList<>();}
            exp.add(e);
            RESULT = exp;
        :}
        | EXP:nodo
        {:
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = new ArrayList<>();
            exp.add(e);
            RESULT = exp;
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
DECLARACION_VAR::= TIPO:aux L_DECLARACION:lista ptComa
                 {:
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 :}
                 | TIPO error ptComa
                 {:
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 :}
                 ;
//---------------------------------------------------------------------------
TIPO ::= entero
       {:
            RESULT = "ENTERO";
       :}
       | decimal
       {:
            RESULT = "DECIMAL";
       :}
       | cadena
       {:
            RESULT = "CADENA";
       :}
       | caracter
       {:
            RESULT = "CARACTER";
       :}
       | booleano
       {:
            RESULT = "BOOLEAN";
       :}
       | identificador:id
       {:
            RESULT = id.toUpperCase();
       :}
       ;
//---------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////
CONTINUE ::= continuar:aux ptComa
        {:
            Continuar i = new Continuar(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        :}
        ;
BREAK ::= detener:aux ptComa
        {:
            Detener i = new Detener(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
F_IMPRIMIR ::= imprimir:aux oParent EXP:nodo cParent ptComa
            {:
                Expresion exp = (Expresion)nodo;
                Imprimir i = new Imprimir(auxright, auxleft, ArchivoOrigen, exp);
                RESULT = i;
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
L_DECLARACION ::= L_DECLARACION:lista coma identificador:id
             {:
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             :}
             | L_DECLARACION:lista coma identificador:id asigna EXP:nodo
             {:
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador:id
             {:
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador:id asigna EXP:nodo
             {:
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador error ptComa
             {:
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             :}
             ;
//////////////////////////////////////////////////////////////////////////////
ASIGNACION_VAR ::= identificador:id asigna EXP:exp ptComa
                {:
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                :}
                | identificador asigna error ptComa
                {:
                    parser.expected.add("'= Expresion'");
                :}
                ;
//////////////////////////////////////////////////////////////////////////////
EXP ::= E:e
      {:
        RESULT = e;
      :}
      ;
//----------------------------------------------------------------------------
E ::= E:val1 mas:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    :}
    | E:val1 menos:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :}
    | E:val1 mult:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    :}
    | E:val1 div:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    :}
    | E:val1 pot:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    :}
    | E:val1 igual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    :}
    | E:val1 diff:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    :}
    | E:val1 menor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    :}
    | E:val1 mayor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    :}
    | E:val1 mayorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    :}
    | E:val1 menorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    :}
    | E:val1 and:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    :}
    | E:val1 or:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    :}
    | not:aux E:val
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | menos:aux E:val 
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :} %prec menos
    | E:val inc:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    :}
    | E:val dec:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | oParent E:e cParent
    {:
        //
        RESULT = e;
    :}
    | numEntero:val
    {:
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | numDecimal:val
    {:
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | dataChar:val
    {:
        //

        Character real = val.charAt(1);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | dataString:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | verdadero:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    :}
    | falso:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    :}
    | identificador:id
    {:
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    :}
    | identificador:id oParent L_EXPRE:lista cParent
    {:
        ArrayList<Expresion> parametros = (ArrayList<Expresion>)lista;
        if(parametros == null) {parametros = new ArrayList<>();}
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    :}
    | identificador:id oParent cParent
    {:
        ArrayList<Expresion> parametros = new ArrayList<>();
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    :}
    ;