// --------------------------------> CODIGO DE USUARIO
package DppPackage.Analizador;
import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;

// --------------------------------> CODIGO DEL PARSER
parser code
{:
    public static String ArchivoOrigen;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }
:}

action code
{:
    String ArchivoOrigen;


    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }
:}
// -----------------------------------------------> CODIGO DE DECLARACIONES
// ------> PUNTUACION
terminal String ptComa, asigna, oParent, cParent, coma, oKey, cKey;
// ------> OPERADORES
terminal String mas, menos, mult, div, pot, inc, dec, igual, diff, menor, mayor, menorigual, mayorigual, and, or, not;
// ------> PALABRAS RESERVADAS
terminal entero, decimal, cadena, caracter, booleano, verdadero, falso;
// ------> VALORES
terminal numEntero, numDecimal, dataChar, identificador, dataString;
// ------> NO TERMINALES
non terminal Object EXP, E, TIPO, L_DECLARACION;
non terminal Object INICIO, DECLARACIONES, DECLARACION_VAR;
// ------> PRECEDENCE
precedence left or;
precedence left and;
precedence left igual, diff;
precedence left menor, mayor, menorigual, mayorigual;
precedence left mas, menos;
precedence left mult, div;
precedence left pot;
precedence right inc, dec, not;
precedence left cParent;

start with INICIO;
/*                         REGLAS SEMANTICAS                               */
/////////////////////////////////////////////////////////////////////////////
INICIO ::= {: this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>();:} DECLARACIONES
           {:
           :}
           ;
/////////////////////////////////////////////////////////////////////////////
DECLARACIONES::= DECLARACIONES DECLARACION_VAR
            | DECLARACION_VAR
            ;
/////////////////////////////////////////////////////////////////////////////
DECLARACION_VAR::= TIPO L_DECLARACION ptComa
                 | TIPO error ptComa
                 {:
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 :}
                 ;
//---------------------------------------------------------------------------
TIPO ::= entero
       | decimal
       | cadena
       | caracter
       | booleano
       ;
//---------------------------------------------------------------------------
L_DECLARACION ::= L_DECLARACION coma identificador
             | L_DECLARACION coma identificador asigna EXP
             | identificador
             | identificador asigna EXP
             | identificador error ptComa
             {:
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             :}
             ;
//////////////////////////////////////////////////////////////////////////////
EXP ::= E:e
      {:
        RESULT = e;
      :}
      ;
//----------------------------------------------------------------------------
E ::= E:val1 mas:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    :}
    | E:val1 menos:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :}
    | E:val1 mult:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    :}
    | E:val1 div:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    :}
    | E:val1 pot:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    :}
    | E:val1 igual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    :}
    | E:val1 diff:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    :}
    | E:val1 menor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    :}
    | E:val1 mayor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    :}
    | E:val1 mayorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    :}
    | E:val1 menorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    :}
    | E:val1 and:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    :}
    | E:val1 or:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    :}
    | not:aux E:val
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | menos:aux E:val 
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :} %prec menos
    | E:val inc:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    :}
    | E:val dec:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | oParent E:e cParent
    {:
        //
        RESULT = e;
    :}
    | numEntero:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | decimal:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | numDecimal:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | dataChar:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | dataString:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | verdadero:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    :}
    | falso:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    :}
    ;