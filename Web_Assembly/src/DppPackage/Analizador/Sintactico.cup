// --------------------------------> CODIGO DE USUARIO
package DppPackage.Analizador;
import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
// --------------------------------> CODIGO DEL PARSER
parser code
{:
    public static String ArchivoOrigen;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }
:}

action code
{:
    String ArchivoOrigen;


    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }
:}
// -----------------------------------------------> CODIGO DE DECLARACIONES
// ------> PUNTUACION
terminal String ptComa, asigna, oParent, cParent, coma, oKey, cKey;
// ------> OPERADORES
terminal String mas, menos, mult, div, pot, inc, dec, igual, diff, menor, mayor, menorigual, mayorigual, and, or, not;
// ------> PALABRAS RESERVADAS
terminal entero, decimal, cadena, caracter, booleano, verdadero, falso, importar;
terminal String principal, vacio;
// ------> VALORES
terminal String numEntero, numDecimal, dataChar, identificador, dataString;
// ------> NO TERMINALES
non terminal Object EXP, E, TIPO, L_DECLARACION, L_IMPORTAR;
non terminal Object INICIO, DECLARACIONES, DECLARACION_VAR;
non terminal Object MAIN, METODOS, FUNCIONES, PARAMETROS;
// ------> PRECEDENCE
precedence left or;
precedence left and;
precedence left igual, diff;
precedence left menor, mayor, menorigual, mayorigual;
precedence left mas, menos;
precedence left mult, div;
precedence left pot;
precedence right inc, dec, not;
precedence left cParent;

start with INICIO;
/*                         REGLAS SEMANTICAS                               */
/////////////////////////////////////////////////////////////////////////////
INICIO ::= {: this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);:} L_IMPORTAR DECLARACIONES
           | {: this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);:} DECLARACIONES
           ;
/////////////////////////////////////////////////////////////////////////////
L_IMPORTAR::= L_IMPORTAR importar:aux oParent dataString:ruta cParent ptComa
           {:
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta);
                parser.inicial.addNodo(im);
                RESULT = "";
           :}
           | importar:aux oParent dataString:ruta cParent ptComa
           {:
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta);
                parser.inicial.addNodo(im);
                RESULT = "";
           :}
           ;
/////////////////////////////////////////////////////////////////////////////
DECLARACIONES::= DECLARACIONES DECLARACION_VAR:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES MAIN:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES METODOS:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACIONES FUNCIONES:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | DECLARACION_VAR:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | MAIN:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | METODOS:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            | FUNCIONES:nodo
            {:
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
PARAMETROS ::= PARAMETROS:lista coma TIPO:tipo identificador:id
            {:
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            :}
            | TIPO:tipo identificador:id
            {:
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            :}
            ;
/////////////////////////////////////////////////////////////////////////////
MAIN ::= vacio principal:aux oParent cParent oKey cKey
      {:
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      :}
      | vacio principal error cKey
      {:
            parser.expected.add("'('");
      :}
      ;
/////////////////////////////////////////////////////////////////////////////
METODOS ::= vacio identificador:id oParent cParent oKey cKey
        {:
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador:id oParent PARAMETROS:lista cParent oKey cKey
        {:
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        :}
        | vacio identificador error cKey
        {:
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
FUNCIONES ::= TIPO:tipo identificador:id oParent cParent oKey cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO:tipo identificador:id oParent PARAMETROS:lista cParent oKey cKey
        {:
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        :}
        | TIPO identificador error cKey
        {:
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        :}
        ;
/////////////////////////////////////////////////////////////////////////////
DECLARACION_VAR::= TIPO:aux L_DECLARACION:lista ptComa
                 {:
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 :}
                 | TIPO error ptComa
                 {:
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 :}
                 ;
//---------------------------------------------------------------------------
TIPO ::= entero
       {:
            RESULT = "ENTERO";
       :}
       | decimal
       {:
            RESULT = "DECIMAL";
       :}
       | cadena
       {:
            RESULT = "CADENA";
       :}
       | caracter
       {:
            RESULT = "CARACTER";
       :}
       | booleano
       {:
            RESULT = "BOOLEAN";
       :}
       | identificador:id
       {:
            RESULT = id.toUpperCase();
       :}
       ;
//---------------------------------------------------------------------------
L_DECLARACION ::= L_DECLARACION:lista coma identificador:id
             {:
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             :}
             | L_DECLARACION:lista coma identificador:id asigna EXP:nodo
             {:
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador:id
             {:
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador:id asigna EXP:nodo
             {:
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             :}
             | identificador error ptComa
             {:
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             :}
             ;
//////////////////////////////////////////////////////////////////////////////
EXP ::= E:e
      {:
        RESULT = e;
      :}
      ;
//----------------------------------------------------------------------------
E ::= E:val1 mas:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    :}
    | E:val1 menos:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :}
    | E:val1 mult:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    :}
    | E:val1 div:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    :}
    | E:val1 pot:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    :}
    | E:val1 igual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    :}
    | E:val1 diff:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    :}
    | E:val1 menor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    :}
    | E:val1 mayor:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    :}
    | E:val1 mayorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    :}
    | E:val1 menorigual:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    :}
    | E:val1 and:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    :}
    | E:val1 or:aux E:val2
    {:
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    :}
    | not:aux E:val
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | menos:aux E:val 
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    :} %prec menos
    | E:val inc:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    :}
    | E:val dec:aux
    {:
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    :}
    | oParent E:e cParent
    {:
        //
        RESULT = e;
    :}
    | numEntero:val
    {:
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | numDecimal:val
    {:
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | dataChar:val
    {:
        //

        Character real = val.charAt(0);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    :}
    | dataString:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    :}
    | verdadero:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    :}
    | falso:val
    {:
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    :}
    ;