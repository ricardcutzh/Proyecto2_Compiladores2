
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 09 00:28:10 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;
import DppPackage.DppAST.Sentencias.IF.*;
import DppPackage.DppAST.Sentencias.While.*;
import DppPackage.DppAST.Sentencias.For.*;
import DppPackage.DppAST.Sentencias.Nativas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 09 00:28:10 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\004\000\002\053\002\000\002\011" +
    "\005\000\002\054\002\000\002\011\004\000\002\006\010" +
    "\000\002\006\007\000\002\006\006\000\002\006\005\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\022\006" +
    "\000\002\022\007\000\002\022\004\000\002\022\005\000" +
    "\002\052\005\000\002\052\004\000\002\017\010\000\002" +
    "\017\011\000\002\017\006\000\002\020\010\000\002\020" +
    "\011\000\002\020\011\000\002\020\012\000\002\020\006" +
    "\000\002\021\010\000\002\021\011\000\002\021\011\000" +
    "\002\021\012\000\002\021\006\000\002\007\007\000\002" +
    "\007\005\000\002\010\006\000\002\010\007\000\002\010" +
    "\005\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\016\004\000\002\016\005\000\002\016\005\000" +
    "\002\027\010\000\002\027\011\000\002\027\012\000\002" +
    "\027\013\000\002\027\011\000\002\027\012\000\002\027" +
    "\011\000\002\027\012\000\002\027\005\000\002\031\012" +
    "\000\002\031\013\000\002\031\011\000\002\031\012\000" +
    "\002\031\005\000\002\030\005\000\002\030\006\000\002" +
    "\032\010\000\002\032\011\000\002\032\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\006\000\002\033\006" +
    "\000\002\034\013\000\002\034\012\000\002\034\005\000" +
    "\002\025\007\000\002\025\006\000\002\026\006\000\002" +
    "\026\005\000\002\026\005\000\002\014\006\000\002\014" +
    "\007\000\002\014\006\000\002\015\005\000\002\015\003" +
    "\000\002\013\005\000\002\013\005\000\002\045\006\000" +
    "\002\045\010\000\002\045\007\000\002\045\006\000\002" +
    "\047\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\003\000\002\050\003\000\002\046\006\000\002\046\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\035\004\000\002\036\004\000\002\037\007\000\002\037" +
    "\005\000\002\005\005\000\002\005\007\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\024\006\000" +
    "\002\024\010\000\002\024\006\000\002\024\007\000\002" +
    "\051\007\000\002\051\011\000\002\051\010\000\002\040" +
    "\015\000\002\040\005\000\002\041\017\000\002\041\005" +
    "\000\002\042\017\000\002\042\005\000\002\044\015\000" +
    "\002\043\021\000\002\043\005\000\002\002\003\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\006\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\004\000\002\003\006\000\002\003\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c0\000\024\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\047\000\052\ufffe\062\ufffe\073\ufffe\001\002\000\022" +
    "\040\032\041\025\042\023\043\027\044\036\052\030\062" +
    "\035\073\040\001\002\000\004\047\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\024\040" +
    "\032\041\025\042\023\043\027\044\036\047\034\052\030" +
    "\062\035\073\040\001\002\000\006\003\012\006\013\001" +
    "\002\000\004\004\017\001\002\000\004\074\014\001\002" +
    "\000\004\007\015\001\002\000\004\004\016\001\002\000" +
    "\024\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\047\ufffb" +
    "\052\ufffb\062\ufffb\073\ufffb\001\002\000\024\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9\052\ufff9\062\ufff9" +
    "\073\ufff9\001\002\000\024\002\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\052\uffef\062\uffef\073\uffef\001\002" +
    "\000\024\002\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\052\uffed\062\uffed\073\uffed\001\002\000\024\002\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\052\ufff1\062" +
    "\ufff1\073\ufff1\001\002\000\006\003\uff77\073\uff77\001\002" +
    "\000\024\002\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\052\ufff0\062\ufff0\073\ufff0\001\002\000\006\003\uff78" +
    "\073\uff78\001\002\000\024\002\uffff\040\032\041\025\042" +
    "\023\043\027\044\036\052\030\062\035\073\040\001\002" +
    "\000\006\003\uff76\073\uff76\001\002\000\006\051\u01a5\073" +
    "\u01a4\001\002\000\024\002\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\052\uffee\062\uffee\073\uffee\001\002\000" +
    "\006\003\uff79\073\uff79\001\002\000\006\003\175\073\176" +
    "\001\002\000\006\003\166\006\167\001\002\000\006\003" +
    "\041\073\042\001\002\000\006\003\uff75\073\uff75\001\002" +
    "\000\024\002\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\052\ufff2\062\ufff2\073\ufff2\001\002\000\006\003\uff74" +
    "\073\uff74\001\002\000\004\012\165\001\002\000\004\011" +
    "\043\001\002\000\016\040\032\041\025\042\023\043\027" +
    "\044\036\073\040\001\002\000\006\003\157\073\160\001" +
    "\002\000\020\012\046\040\032\041\025\042\023\043\027" +
    "\044\036\073\040\001\002\000\024\002\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\052\uffb5\062\uffb5\073\uffb5" +
    "\001\002\000\006\003\050\073\051\001\002\000\004\004" +
    "\156\001\002\000\006\004\053\014\054\001\002\000\006" +
    "\004\155\014\143\001\002\000\020\012\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\073\uffb3\001\002\000\030" +
    "\006\055\021\063\037\057\045\062\046\064\070\066\071" +
    "\061\072\056\073\070\074\065\075\060\001\002\000\030" +
    "\006\055\021\063\037\057\045\062\046\064\070\066\071" +
    "\061\072\056\073\070\074\065\075\060\001\002\000\056" +
    "\004\uff45\007\uff45\010\uff45\012\uff45\015\uff45\016\uff45\017" +
    "\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45" +
    "\026\uff45\027\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034" +
    "\uff45\035\uff45\036\uff45\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\056\004\uff3d\007\uff3d" +
    "\010\uff3d\012\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021" +
    "\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d" +
    "\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036" +
    "\uff3d\001\002\000\056\004\uff46\007\uff46\010\uff46\012\uff46" +
    "\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023" +
    "\uff46\024\uff46\025\uff46\026\uff46\027\uff46\030\uff46\031\uff46" +
    "\032\uff46\033\uff46\034\uff46\035\uff46\036\uff46\001\002\000" +
    "\056\004\uff43\007\uff43\010\uff43\012\uff43\015\uff43\016\uff43" +
    "\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43\025" +
    "\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43" +
    "\034\uff43\035\uff43\036\uff43\001\002\000\030\006\055\021" +
    "\063\037\057\045\062\046\064\070\066\071\061\072\056" +
    "\073\070\074\065\075\060\001\002\000\056\004\uff42\007" +
    "\uff42\010\uff42\012\uff42\015\uff42\016\uff42\017\uff42\020\uff42" +
    "\021\uff42\022\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027" +
    "\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42" +
    "\036\uff42\001\002\000\056\004\uff44\007\uff44\010\uff44\012" +
    "\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44" +
    "\023\uff44\024\uff44\025\uff44\026\uff44\027\uff44\030\uff44\031" +
    "\uff44\032\uff44\033\uff44\034\uff44\035\uff44\036\uff44\001\002" +
    "\000\056\004\uff47\007\uff47\010\uff47\012\uff47\015\uff47\016" +
    "\uff47\017\uff47\020\uff47\021\uff47\022\uff47\023\uff47\024\uff47" +
    "\025\uff47\026\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033" +
    "\uff47\034\uff47\035\uff47\036\uff47\001\002\000\004\015\150" +
    "\001\002\000\064\004\uff41\006\134\007\uff41\010\uff41\012" +
    "\uff41\013\132\014\054\015\uff41\016\uff41\017\uff41\020\uff41" +
    "\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41\026\uff41\027" +
    "\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41" +
    "\036\uff41\001\002\000\054\004\uff5a\007\uff5a\010\uff5a\012" +
    "\uff5a\015\uff5a\016\105\020\110\021\101\022\076\023\072" +
    "\024\103\025\073\026\074\027\111\030\104\031\102\032" +
    "\107\033\106\034\075\035\100\036\077\001\002\000\030" +
    "\006\055\021\063\037\057\045\062\046\064\070\066\071" +
    "\061\072\056\073\070\074\065\075\060\001\002\000\056" +
    "\004\uff4a\007\uff4a\010\uff4a\012\uff4a\015\uff4a\016\uff4a\017" +
    "\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a" +
    "\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034" +
    "\uff4a\035\uff4a\036\uff4a\001\002\000\056\004\uff49\007\uff49" +
    "\010\uff49\012\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021" +
    "\uff49\022\uff49\023\uff49\024\uff49\025\uff49\026\uff49\027\uff49" +
    "\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\036" +
    "\uff49\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\056\004\uff54\007\uff54\010\uff54\012\uff54" +
    "\015\uff54\016\105\017\uff54\020\110\021\101\022\076\023" +
    "\072\024\103\025\073\026\074\027\uff54\030\uff54\031\102" +
    "\032\107\033\106\034\075\035\uff54\036\uff54\001\002\000" +
    "\056\004\uff59\007\uff59\010\uff59\012\uff59\015\uff59\016\105" +
    "\017\uff59\020\uff59\021\uff59\022\076\023\072\024\103\025" +
    "\073\026\074\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59" +
    "\034\uff59\035\uff59\036\uff59\001\002\000\056\004\uff51\007" +
    "\uff51\010\uff51\012\uff51\015\uff51\016\105\017\uff51\020\110" +
    "\021\101\022\076\023\072\024\103\025\073\026\074\027" +
    "\uff51\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\uff51" +
    "\036\uff51\001\002\000\056\004\uff4f\007\uff4f\010\uff4f\012" +
    "\uff4f\015\uff4f\016\105\017\uff4f\020\110\021\101\022\076" +
    "\023\072\024\103\025\073\026\074\027\uff4f\030\uff4f\031" +
    "\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\001\002" +
    "\000\044\016\105\017\117\020\110\021\101\022\076\023" +
    "\072\024\103\025\073\026\074\027\111\030\104\031\102" +
    "\032\107\033\106\034\075\035\100\036\077\001\002\000" +
    "\030\006\055\021\063\037\057\045\062\046\064\070\066" +
    "\071\061\072\056\073\070\074\065\075\060\001\002\000" +
    "\056\004\uff3a\007\uff3a\010\uff3a\012\uff3a\015\uff3a\016\105" +
    "\017\uff3a\020\110\021\101\022\076\023\072\024\103\025" +
    "\073\026\074\027\111\030\104\031\102\032\107\033\106" +
    "\034\075\035\100\036\077\001\002\000\056\004\uff53\007" +
    "\uff53\010\uff53\012\uff53\015\uff53\016\105\017\uff53\020\110" +
    "\021\101\022\076\023\072\024\103\025\073\026\074\027" +
    "\uff53\030\uff53\031\102\032\107\033\106\034\075\035\uff53" +
    "\036\uff53\001\002\000\056\004\uff55\007\uff55\010\uff55\012" +
    "\uff55\015\uff55\016\105\017\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\024\uff55\025\073\026\074\027\uff55\030\uff55\031" +
    "\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\001\002" +
    "\000\056\004\uff52\007\uff52\010\uff52\012\uff52\015\uff52\016" +
    "\105\017\uff52\020\110\021\101\022\076\023\072\024\103" +
    "\025\073\026\074\027\uff52\030\uff52\031\uff52\032\uff52\033" +
    "\uff52\034\uff52\035\uff52\036\uff52\001\002\000\056\004\uff58" +
    "\007\uff58\010\uff58\012\uff58\015\uff58\016\105\017\uff58\020" +
    "\uff58\021\uff58\022\076\023\072\024\103\025\073\026\074" +
    "\027\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035" +
    "\uff58\036\uff58\001\002\000\056\004\uff4e\007\uff4e\010\uff4e" +
    "\012\uff4e\015\uff4e\016\105\017\uff4e\020\110\021\101\022" +
    "\076\023\072\024\103\025\073\026\074\027\111\030\104" +
    "\031\102\032\107\033\106\034\075\035\uff4e\036\uff4e\001" +
    "\002\000\056\004\uff4d\007\uff4d\010\uff4d\012\uff4d\015\uff4d" +
    "\016\105\017\uff4d\020\110\021\101\022\076\023\072\024" +
    "\103\025\073\026\074\027\111\030\104\031\102\032\107" +
    "\033\106\034\075\035\100\036\uff4d\001\002\000\056\004" +
    "\uff57\007\uff57\010\uff57\012\uff57\015\uff57\016\105\017\uff57" +
    "\020\uff57\021\uff57\022\uff57\023\uff57\024\103\025\073\026" +
    "\074\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57" +
    "\035\uff57\036\uff57\001\002\000\056\004\uff50\007\uff50\010" +
    "\uff50\012\uff50\015\uff50\016\105\017\uff50\020\110\021\101" +
    "\022\076\023\072\024\103\025\073\026\074\027\uff50\030" +
    "\uff50\031\uff50\032\uff50\033\uff50\034\uff50\035\uff50\036\uff50" +
    "\001\002\000\056\004\uff56\007\uff56\010\uff56\012\uff56\015" +
    "\uff56\016\105\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56" +
    "\024\103\025\073\026\074\027\uff56\030\uff56\031\uff56\032" +
    "\uff56\033\uff56\034\uff56\035\uff56\036\uff56\001\002\000\004" +
    "\073\146\001\002\000\060\004\uff3c\007\uff3c\010\uff3c\012" +
    "\uff3c\014\143\015\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c" +
    "\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c\027\uff3c\030" +
    "\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c" +
    "\001\002\000\032\006\055\007\136\021\063\037\057\045" +
    "\062\046\064\070\066\071\061\072\056\073\070\074\065" +
    "\075\060\001\002\000\006\007\141\010\140\001\002\000" +
    "\056\004\uff3f\007\uff3f\010\uff3f\012\uff3f\015\uff3f\016\uff3f" +
    "\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025" +
    "\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f" +
    "\034\uff3f\035\uff3f\036\uff3f\001\002\000\006\007\uff87\010" +
    "\uff87\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\056\004\uff40\007\uff40\010\uff40\012\uff40" +
    "\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\023" +
    "\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40" +
    "\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40\001\002\000" +
    "\006\007\uff88\010\uff88\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\004\015\145\001\002" +
    "\000\064\003\uff7b\004\uff7b\005\uff7b\007\uff7b\010\uff7b\012" +
    "\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\001\002\000\060\004\uff3e\007\uff3e\010\uff3e\012\uff3e\014" +
    "\054\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e" +
    "\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031" +
    "\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\001\002" +
    "\000\060\004\uff3b\007\uff3b\010\uff3b\012\uff3b\014\143\015" +
    "\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b" +
    "\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b\031\uff3b\032" +
    "\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\001\002\000\064" +
    "\003\uff7a\004\uff7a\005\uff7a\007\uff7a\010\uff7a\012\uff7a\014" +
    "\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\001\002" +
    "\000\056\004\uff4b\007\uff4b\010\uff4b\012\uff4b\015\uff4b\016" +
    "\105\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b" +
    "\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\001\002\000\056\004\uff4c" +
    "\007\uff4c\010\uff4c\012\uff4c\015\uff4c\016\105\017\uff4c\020" +
    "\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\073\026\074" +
    "\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\001\002\000\044\007\154\016\105\020\110" +
    "\021\101\022\076\023\072\024\103\025\073\026\074\027" +
    "\111\030\104\031\102\032\107\033\106\034\075\035\100" +
    "\036\077\001\002\000\056\004\uff48\007\uff48\010\uff48\012" +
    "\uff48\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48" +
    "\023\uff48\024\uff48\025\uff48\026\uff48\027\uff48\030\uff48\031" +
    "\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48\001\002" +
    "\000\020\012\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\073\uffb2\001\002\000\020\012\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\073\uffae\001\002\000\004\004" +
    "\164\001\002\000\006\004\162\014\054\001\002\000\006" +
    "\004\163\014\143\001\002\000\020\012\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\073\uffb1\001\002\000\020" +
    "\012\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\073" +
    "\uffb0\001\002\000\020\012\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\073\uffaf\001\002\000\024\002\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\052\uffb4\062\uffb4" +
    "\073\uffb4\001\002\000\004\004\173\001\002\000\004\074" +
    "\170\001\002\000\004\007\171\001\002\000\004\004\172" +
    "\001\002\000\024\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\047\ufffc\052\ufffc\062\ufffc\073\ufffc\001\002\000\024" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\047\ufffa\052" +
    "\ufffa\062\ufffa\073\ufffa\001\002\000\006\004\u01a0\010\u019f" +
    "\001\002\000\004\004\u019e\001\002\000\016\003\201\004" +
    "\uff6d\005\177\006\202\010\uff6d\014\054\001\002\000\030" +
    "\006\055\021\063\037\057\045\062\046\064\070\066\071" +
    "\061\072\056\073\070\074\065\075\060\001\002\000\012" +
    "\003\u0190\004\u0191\005\u018f\014\143\001\002\000\006\004" +
    "\u017f\012\u018e\001\002\000\020\007\204\040\032\041\025" +
    "\042\023\043\027\044\036\073\040\001\002\000\004\073" +
    "\u018c\001\002\000\004\011\u0188\001\002\000\006\007\207" +
    "\010\206\001\002\000\016\040\032\041\025\042\023\043" +
    "\027\044\036\073\040\001\002\000\004\011\210\001\002" +
    "\000\046\012\245\040\032\041\025\042\252\043\027\044" +
    "\036\050\234\053\251\054\227\056\230\057\223\060\212" +
    "\061\216\063\241\064\233\065\232\066\247\073\226\001" +
    "\002\000\046\012\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\050\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\073\uffd7" +
    "\001\002\000\004\004\u0180\001\002\000\046\012\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\050\uffda\053\uffda" +
    "\054\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\073\uffda\001\002\000\006\003\175" +
    "\073\u017d\001\002\000\046\012\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\050\uffcf\053\uffcf\054\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\073\uffcf\001\002\000\006\003\u0177\006\u0178\001\002" +
    "\000\046\012\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\050\uffc9\053\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\073\uffc9\001" +
    "\002\000\046\012\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\050\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\073\uffcd" +
    "\001\002\000\046\012\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\050\uffcc\053\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\073" +
    "\uffcc\001\002\000\046\012\u0176\040\032\041\025\042\252" +
    "\043\027\044\036\050\234\053\251\054\227\056\230\057" +
    "\223\060\212\061\216\063\241\064\233\065\232\066\247" +
    "\073\226\001\002\000\004\004\u0175\001\002\000\046\012" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\050\uffca" +
    "\053\uffca\054\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\073\uffca\001\002\000\046" +
    "\012\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\050" +
    "\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\073\uffd6\001\002\000" +
    "\022\003\uff74\005\u014f\006\u0152\013\u0150\014\054\025\u0153" +
    "\026\u0154\073\uff74\001\002\000\006\003\u0128\006\u0129\001" +
    "\002\000\006\003\u011f\006\u0120\001\002\000\046\012\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\050\uffd8\053" +
    "\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\073\uffd8\001\002\000\006\003" +
    "\u0111\006\u0112\001\002\000\006\003\u0103\006\u0104\001\002" +
    "\000\006\003\326\006\330\001\002\000\046\012\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\050\uffcb\053\uffcb" +
    "\054\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\073\uffcb\001\002\000\046\012\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\050\uffd0\053" +
    "\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\073\uffd0\001\002\000\046\012" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\050\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\073\uffd9\001\002\000\046" +
    "\012\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\050" +
    "\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\073\uffd4\001\002\000" +
    "\006\003\312\006\313\001\002\000\046\012\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\050\uffd2\053\uffd2\054" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\073\uffd2\001\002\000\046\012\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\050\uffd5\053\uffd5" +
    "\054\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\073\uffd5\001\002\000\046\012\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\050\uffce\053" +
    "\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\073\uffce\001\002\000\024\002" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\052\uffb9" +
    "\062\uffb9\073\uffb9\001\002\000\046\012\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\050\uffd3\053\uffd3\054\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\073\uffd3\001\002\000\006\003\272\006\273" +
    "\001\002\000\046\012\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\050\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\073" +
    "\uffd1\001\002\000\034\003\265\004\266\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\010\003\uff77\006\253" +
    "\073\uff77\001\002\000\030\006\055\021\063\037\057\045" +
    "\062\046\064\070\066\071\061\072\056\073\070\074\065" +
    "\075\060\001\002\000\004\010\255\001\002\000\030\006" +
    "\055\021\063\037\057\045\062\046\064\070\066\071\061" +
    "\072\056\073\070\074\065\075\060\001\002\000\004\010" +
    "\257\001\002\000\004\074\260\001\002\000\004\010\261" +
    "\001\002\000\030\006\055\021\063\037\057\045\062\046" +
    "\064\070\066\071\061\072\056\073\070\074\065\075\060" +
    "\001\002\000\004\007\263\001\002\000\004\004\264\001" +
    "\002\000\046\012\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\044\uff5d\050\uff5d\053\uff5d\054\uff5d\056\uff5d\057\uff5d\060" +
    "\uff5d\061\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\073\uff5d" +
    "\001\002\000\004\004\271\001\002\000\046\012\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\050\uffad\053\uffad" +
    "\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\073\uffad\001\002\000\004\004\270" +
    "\001\002\000\046\012\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\050\uffac\053\uffac\054\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\063\uffac\064\uffac\065\uffac\066\uffac\073" +
    "\uffac\001\002\000\046\012\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\050\uffab\053\uffab\054\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\073\uffab\001\002\000\004\004\311\001\002\000\030\006" +
    "\055\021\063\037\057\045\062\046\064\070\066\071\061" +
    "\072\056\073\070\074\065\075\060\001\002\000\004\010" +
    "\275\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\004\010\277\001\002\000\030\006\055" +
    "\021\063\037\057\045\062\046\064\070\066\071\061\072" +
    "\056\073\070\074\065\075\060\001\002\000\004\010\301" +
    "\001\002\000\030\006\055\021\063\037\057\045\062\046" +
    "\064\070\066\071\061\072\056\073\070\074\065\075\060" +
    "\001\002\000\004\010\303\001\002\000\004\074\304\001" +
    "\002\000\004\010\305\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\004\007\307\001\002" +
    "\000\004\004\310\001\002\000\046\012\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\050\uff5c\053\uff5c\054\uff5c" +
    "\056\uff5c\057\uff5c\060\uff5c\061\uff5c\063\uff5c\064\uff5c\065" +
    "\uff5c\066\uff5c\073\uff5c\001\002\000\046\012\uff5b\040\uff5b" +
    "\041\uff5b\042\uff5b\043\uff5b\044\uff5b\050\uff5b\053\uff5b\054" +
    "\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\063\uff5b\064\uff5b" +
    "\065\uff5b\066\uff5b\073\uff5b\001\002\000\004\004\325\001" +
    "\002\000\030\006\055\021\063\037\057\045\062\046\064" +
    "\070\066\071\061\072\056\073\070\074\065\075\060\001" +
    "\002\000\004\010\315\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\004\010\317\001\002" +
    "\000\004\074\320\001\002\000\004\010\321\001\002\000" +
    "\030\006\055\021\063\037\057\045\062\046\064\070\066" +
    "\071\061\072\056\073\070\074\065\075\060\001\002\000" +
    "\004\007\323\001\002\000\004\004\324\001\002\000\046" +
    "\012\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\050" +
    "\uff63\053\uff63\054\uff63\056\uff63\057\uff63\060\uff63\061\uff63" +
    "\063\uff63\064\uff63\065\uff63\066\uff63\073\uff63\001\002\000" +
    "\046\012\uff62\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62" +
    "\050\uff62\053\uff62\054\uff62\056\uff62\057\uff62\060\uff62\061" +
    "\uff62\063\uff62\064\uff62\065\uff62\066\uff62\073\uff62\001\002" +
    "\000\004\004\u0102\001\002\000\004\004\340\001\002\000" +
    "\016\040\032\041\025\042\023\043\027\044\036\073\331" +
    "\001\002\000\006\005\336\073\uff74\001\002\000\004\073" +
    "\333\001\002\000\004\005\334\001\002\000\030\006\055" +
    "\021\063\037\057\045\062\046\064\070\066\071\061\072" +
    "\056\073\070\074\065\075\060\001\002\000\004\004\uff90" +
    "\001\002\000\030\006\055\021\063\037\057\045\062\046" +
    "\064\070\066\071\061\072\056\073\070\074\065\075\060" +
    "\001\002\000\004\004\uff8f\001\002\000\030\006\055\021" +
    "\063\037\057\045\062\046\064\070\066\071\061\072\056" +
    "\073\070\074\065\075\060\001\002\000\004\004\342\001" +
    "\002\000\004\073\343\001\002\000\010\005\373\025\374" +
    "\026\375\001\002\000\004\011\345\001\002\000\046\012" +
    "\347\040\032\041\025\042\252\043\027\044\036\050\234" +
    "\053\251\054\227\056\230\057\223\060\212\061\216\063" +
    "\241\064\233\065\232\066\247\073\226\001\002\000\046" +
    "\012\370\040\032\041\025\042\252\043\027\044\036\050" +
    "\234\053\251\054\227\056\230\057\223\060\212\061\216" +
    "\063\241\064\233\065\232\066\247\073\226\001\002\000" +
    "\046\012\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\050\uff92\053\uff92\054\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\073\uff92\001\002" +
    "\000\046\012\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\050\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\073\uffe0\001" +
    "\002\000\046\012\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\050\uffdb\053\uffdb\054\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\073\uffdb" +
    "\001\002\000\046\012\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\050\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\073" +
    "\uffe8\001\002\000\046\012\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\050\uffe2\053\uffe2\054\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\073\uffe2\001\002\000\046\012\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\050\uffe6\053\uffe6\054\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\073\uffe6\001\002\000\046\012\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\050\uffe5\053\uffe5\054\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\073\uffe5\001\002\000\046\012\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\050\uffe3\053\uffe3\054\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\073\uffe3\001\002\000\046\012\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\050\uffdf\053\uffdf\054" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\073\uffdf\001\002\000\046\012\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\050\uffe1\053\uffe1" +
    "\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\073\uffe1\001\002\000\046\012\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\050\uffe4\053" +
    "\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\073\uffe4\001\002\000\046\012" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\050\uffe9" +
    "\053\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\073\uffe9\001\002\000\046" +
    "\012\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\050" +
    "\uffdc\053\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\073\uffdc\001\002\000" +
    "\046\012\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\050\uffdd\053\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\073\uffdd\001\002" +
    "\000\046\012\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\050\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\073\uffeb\001" +
    "\002\000\046\012\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\050\uffde\053\uffde\054\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\073\uffde" +
    "\001\002\000\046\012\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\050\uffe7\053\uffe7\054\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\073" +
    "\uffe7\001\002\000\046\012\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\050\uff93\053\uff93\054\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\073\uff93\001\002\000\046\012\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\050\uffec\053\uffec\054\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\073\uffec\001\002\000\046\012\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\050\uffea\053\uffea\054\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\073\uffea\001\002\000\030\006\055\021\063\037" +
    "\057\045\062\046\064\070\066\071\061\072\056\073\070" +
    "\074\065\075\060\001\002\000\004\007\377\001\002\000" +
    "\004\007\376\001\002\000\004\011\uff8c\001\002\000\004" +
    "\011\uff8d\001\002\000\004\007\u0101\001\002\000\004\011" +
    "\uff8e\001\002\000\046\012\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\050\uff91\053\uff91\054\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\073\uff91\001\002\000\004\004\u0110\001\002\000\030\006" +
    "\055\021\063\037\057\045\062\046\064\070\066\071\061" +
    "\072\056\073\070\074\065\075\060\001\002\000\004\010" +
    "\u0106\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\004\010\u0108\001\002\000\004\074\u0109" +
    "\001\002\000\004\010\u010a\001\002\000\030\006\055\021" +
    "\063\037\057\045\062\046\064\070\066\071\061\072\056" +
    "\073\070\074\065\075\060\001\002\000\004\010\u010c\001" +
    "\002\000\030\006\055\021\063\037\057\045\062\046\064" +
    "\070\066\071\061\072\056\073\070\074\065\075\060\001" +
    "\002\000\004\007\u010e\001\002\000\004\004\u010f\001\002" +
    "\000\046\012\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044" +
    "\uff61\050\uff61\053\uff61\054\uff61\056\uff61\057\uff61\060\uff61" +
    "\061\uff61\063\uff61\064\uff61\065\uff61\066\uff61\073\uff61\001" +
    "\002\000\046\012\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\050\uff60\053\uff60\054\uff60\056\uff60\057\uff60\060" +
    "\uff60\061\uff60\063\uff60\064\uff60\065\uff60\066\uff60\073\uff60" +
    "\001\002\000\004\004\u011e\001\002\000\030\006\055\021" +
    "\063\037\057\045\062\046\064\070\066\071\061\072\056" +
    "\073\070\074\065\075\060\001\002\000\004\010\u0114\001" +
    "\002\000\030\006\055\021\063\037\057\045\062\046\064" +
    "\070\066\071\061\072\056\073\070\074\065\075\060\001" +
    "\002\000\004\010\u0116\001\002\000\004\074\u0117\001\002" +
    "\000\004\010\u0118\001\002\000\030\006\055\021\063\037" +
    "\057\045\062\046\064\070\066\071\061\072\056\073\070" +
    "\074\065\075\060\001\002\000\004\010\u011a\001\002\000" +
    "\030\006\055\021\063\037\057\045\062\046\064\070\066" +
    "\071\061\072\056\073\070\074\065\075\060\001\002\000" +
    "\004\007\u011c\001\002\000\004\004\u011d\001\002\000\046" +
    "\012\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\050" +
    "\uff5f\053\uff5f\054\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\063\uff5f\064\uff5f\065\uff5f\066\uff5f\073\uff5f\001\002\000" +
    "\046\012\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\050\uff5e\053\uff5e\054\uff5e\056\uff5e\057\uff5e\060\uff5e\061" +
    "\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\073\uff5e\001\002" +
    "\000\004\012\u0127\001\002\000\030\006\055\021\063\037" +
    "\057\045\062\046\064\070\066\071\061\072\056\073\070" +
    "\074\065\075\060\001\002\000\004\007\u0122\001\002\000" +
    "\004\011\u0123\001\002\000\046\012\u0125\040\032\041\025" +
    "\042\252\043\027\044\036\050\234\053\251\054\227\056" +
    "\230\057\223\060\212\061\216\063\241\064\233\065\232" +
    "\066\247\073\226\001\002\000\046\012\u0126\040\032\041" +
    "\025\042\252\043\027\044\036\050\234\053\251\054\227" +
    "\056\230\057\223\060\212\061\216\063\241\064\233\065" +
    "\232\066\247\073\226\001\002\000\046\012\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\050\uff9a\053\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\073\uff9a\001\002\000\046\012\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\050\uff99\053\uff99" +
    "\054\uff99\056\uff99\057\uff99\060\uff99\061\uff99\063\uff99\064" +
    "\uff99\065\uff99\066\uff99\073\uff99\001\002\000\046\012\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\050\uff98\053" +
    "\uff98\054\uff98\056\uff98\057\uff98\060\uff98\061\uff98\063\uff98" +
    "\064\uff98\065\uff98\066\uff98\073\uff98\001\002\000\004\012" +
    "\u014e\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\004\007\u012b\001\002\000\004\011\u012c" +
    "\001\002\000\046\012\u012e\040\032\041\025\042\252\043" +
    "\027\044\036\050\234\053\251\054\227\056\230\057\223" +
    "\060\212\061\216\063\241\064\233\065\232\066\247\073" +
    "\226\001\002\000\046\012\u014a\040\032\041\025\042\252" +
    "\043\027\044\036\050\234\053\251\054\227\056\230\057" +
    "\223\060\212\061\216\063\241\064\233\065\232\066\247" +
    "\073\226\001\002\000\050\012\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\050\uffaa\053\uffaa\054\uffaa\055\u012f" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\073\uffaa\001\002\000\010\003\u0140\011\u0135" +
    "\054\u0141\001\002\000\050\012\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\050\uffa6\053\uffa6\054\uffa6\055\u0132" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\073\uffa6\001\002\000\046\012\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\050\uffa4\053\uffa4\054" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\066\uffa4\073\uffa4\001\002\000\006\011\u0135\054" +
    "\u0134\001\002\000\046\012\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\050\uffa8\053\uffa8\054\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\073\uffa8\001\002\000\004\006\u0139\001\002\000\046\012" +
    "\u0137\040\032\041\025\042\252\043\027\044\036\050\234" +
    "\053\251\054\227\056\230\057\223\060\212\061\216\063" +
    "\241\064\233\065\232\066\247\073\226\001\002\000\046" +
    "\012\u0138\040\032\041\025\042\252\043\027\044\036\050" +
    "\234\053\251\054\227\056\230\057\223\060\212\061\216" +
    "\063\241\064\233\065\232\066\247\073\226\001\002\000" +
    "\046\012\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\050\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\073\uff9c\001\002" +
    "\000\046\012\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\050\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\073\uff9b\001" +
    "\002\000\030\006\055\021\063\037\057\045\062\046\064" +
    "\070\066\071\061\072\056\073\070\074\065\075\060\001" +
    "\002\000\004\007\u013b\001\002\000\004\011\u013c\001\002" +
    "\000\046\012\u013e\040\032\041\025\042\252\043\027\044" +
    "\036\050\234\053\251\054\227\056\230\057\223\060\212" +
    "\061\216\063\241\064\233\065\232\066\247\073\226\001" +
    "\002\000\046\012\u013f\040\032\041\025\042\252\043\027" +
    "\044\036\050\234\053\251\054\227\056\230\057\223\060" +
    "\212\061\216\063\241\064\233\065\232\066\247\073\226" +
    "\001\002\000\050\012\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\050\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\073\uffa1\001\002\000\050\012\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\050\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\073\uffa0\001\002\000\004\012\u0149\001" +
    "\002\000\004\006\u0142\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\004\007\u0144\001\002" +
    "\000\004\011\u0145\001\002\000\046\012\u0147\040\032\041" +
    "\025\042\252\043\027\044\036\050\234\053\251\054\227" +
    "\056\230\057\223\060\212\061\216\063\241\064\233\065" +
    "\232\066\247\073\226\001\002\000\046\012\u0148\040\032" +
    "\041\025\042\252\043\027\044\036\050\234\053\251\054" +
    "\227\056\230\057\223\060\212\061\216\063\241\064\233" +
    "\065\232\066\247\073\226\001\002\000\050\012\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\050\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\073\uff9f\001\002\000\050" +
    "\012\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\050" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\073\uff9e\001" +
    "\002\000\050\012\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\050\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\073\uff9d\001\002\000\050\012\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\050\uffa9\053\uffa9\054\uffa9\055\u012f" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\073\uffa9\001\002\000\050\012\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\050\uffa5\053\uffa5\054" +
    "\uffa5\055\u0132\056\uffa5\057\uffa5\060\uffa5\061\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\073\uffa5\001\002\000\046\012" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\050\uffa3" +
    "\053\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\073\uffa3\001\002\000\046" +
    "\012\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\050" +
    "\uffa7\053\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\073\uffa7\001\002\000" +
    "\046\012\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\050\uffa2\053\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\073\uffa2\001\002" +
    "\000\032\003\u0171\006\055\021\063\037\057\045\062\046" +
    "\064\070\066\071\061\072\056\073\070\074\065\075\060" +
    "\001\002\000\004\073\u0165\001\002\000\006\005\u0162\014" +
    "\143\001\002\000\034\003\u015c\006\055\007\u015d\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\006\003\u0158\004\u0159" +
    "\001\002\000\006\003\u0155\004\u0156\001\002\000\004\004" +
    "\u0157\001\002\000\046\012\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\050\uff96\053\uff96\054\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\073\uff96\001\002\000\046\012\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\050\uff94\053\uff94\054\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\063\uff94\064\uff94\065\uff94\066" +
    "\uff94\073\uff94\001\002\000\004\004\u015a\001\002\000\046" +
    "\012\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\050" +
    "\uff97\053\uff97\054\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\063\uff97\064\uff97\065\uff97\066\uff97\073\uff97\001\002\000" +
    "\046\012\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\050\uff95\053\uff95\054\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\073\uff95\001\002" +
    "\000\006\007\u0160\010\140\001\002\000\004\004\u015f\001" +
    "\002\000\004\004\u015e\001\002\000\046\012\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\050\uff8b\053\uff8b\054" +
    "\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\073\uff8b\001\002\000\046\012\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\050\uff89\053\uff89" +
    "\054\uff89\056\uff89\057\uff89\060\uff89\061\uff89\063\uff89\064" +
    "\uff89\065\uff89\066\uff89\073\uff89\001\002\000\004\004\u0161" +
    "\001\002\000\046\012\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\050\uff8a\053\uff8a\054\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\073" +
    "\uff8a\001\002\000\030\006\055\021\063\037\057\045\062" +
    "\046\064\070\066\071\061\072\056\073\070\074\065\075" +
    "\060\001\002\000\004\004\u0164\001\002\000\046\012\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\050\uff66\053" +
    "\uff66\054\uff66\056\uff66\057\uff66\060\uff66\061\uff66\063\uff66" +
    "\064\uff66\065\uff66\066\uff66\073\uff66\001\002\000\010\003" +
    "\u0168\005\u0166\014\054\001\002\000\030\006\055\021\063" +
    "\037\057\045\062\046\064\070\066\071\061\072\056\073" +
    "\070\074\065\075\060\001\002\000\010\003\u016b\005\u016a" +
    "\014\143\001\002\000\004\004\u0169\001\002\000\046\012" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\050\uff67" +
    "\053\uff67\054\uff67\056\uff67\057\uff67\060\uff67\061\uff67\063" +
    "\uff67\064\uff67\065\uff67\066\uff67\073\uff67\001\002\000\030" +
    "\006\055\021\063\037\057\045\062\046\064\070\066\071" +
    "\061\072\056\073\070\074\065\075\060\001\002\000\004" +
    "\004\u016c\001\002\000\046\012\uff64\040\uff64\041\uff64\042" +
    "\uff64\043\uff64\044\uff64\050\uff64\053\uff64\054\uff64\056\uff64" +
    "\057\uff64\060\uff64\061\uff64\063\uff64\064\uff64\065\uff64\066" +
    "\uff64\073\uff64\001\002\000\004\004\u016e\001\002\000\046" +
    "\012\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\050" +
    "\uff65\053\uff65\054\uff65\056\uff65\057\uff65\060\uff65\061\uff65" +
    "\063\uff65\064\uff65\065\uff65\066\uff65\073\uff65\001\002\000" +
    "\004\004\u0170\001\002\000\046\012\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\050\uff69\053\uff69\054\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\063\uff69\064\uff69\065\uff69" +
    "\066\uff69\073\uff69\001\002\000\004\004\u0174\001\002\000" +
    "\004\004\u0173\001\002\000\046\012\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\044\uff6a\050\uff6a\053\uff6a\054\uff6a\056" +
    "\uff6a\057\uff6a\060\uff6a\061\uff6a\063\uff6a\064\uff6a\065\uff6a" +
    "\066\uff6a\073\uff6a\001\002\000\046\012\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\050\uff68\053\uff68\054\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\063\uff68\064\uff68\065" +
    "\uff68\066\uff68\073\uff68\001\002\000\046\012\uff72\040\uff72" +
    "\041\uff72\042\uff72\043\uff72\044\uff72\050\uff72\053\uff72\054" +
    "\uff72\056\uff72\057\uff72\060\uff72\061\uff72\063\uff72\064\uff72" +
    "\065\uff72\066\uff72\073\uff72\001\002\000\024\002\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\052\uffb7\062\uffb7" +
    "\073\uffb7\001\002\000\004\004\u017c\001\002\000\030\006" +
    "\055\021\063\037\057\045\062\046\064\070\066\071\061" +
    "\072\056\073\070\074\065\075\060\001\002\000\004\007" +
    "\u017a\001\002\000\004\004\u017b\001\002\000\046\012\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\050\uff71\053" +
    "\uff71\054\uff71\056\uff71\057\uff71\060\uff71\061\uff71\063\uff71" +
    "\064\uff71\065\uff71\066\uff71\073\uff71\001\002\000\046\012" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\050\uff70" +
    "\053\uff70\054\uff70\056\uff70\057\uff70\060\uff70\061\uff70\063" +
    "\uff70\064\uff70\065\uff70\066\uff70\073\uff70\001\002\000\014" +
    "\003\u017e\004\uff6d\005\177\010\uff6d\014\054\001\002\000" +
    "\004\004\u017f\001\002\000\060\002\uff81\004\uff6b\010\uff6b" +
    "\012\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\050" +
    "\uff81\052\uff81\053\uff81\054\uff81\056\uff81\057\uff81\060\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\073" +
    "\uff81\001\002\000\046\012\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\050\uff73\053\uff73\054\uff73\056\uff73\057" +
    "\uff73\060\uff73\061\uff73\063\uff73\064\uff73\065\uff73\066\uff73" +
    "\073\uff73\001\002\000\004\073\u0182\001\002\000\010\007" +
    "\uffc8\010\uffc8\014\u0184\001\002\000\010\007\uffc7\010\uffc7" +
    "\014\u0186\001\002\000\004\015\u0185\001\002\000\010\007" +
    "\uffc3\010\uffc3\014\uffc3\001\002\000\004\015\u0187\001\002" +
    "\000\010\007\uffc4\010\uffc4\014\uffc4\001\002\000\046\012" +
    "\u018a\040\032\041\025\042\252\043\027\044\036\050\234" +
    "\053\251\054\227\056\230\057\223\060\212\061\216\063" +
    "\241\064\233\065\232\066\247\073\226\001\002\000\046" +
    "\012\u018b\040\032\041\025\042\252\043\027\044\036\050" +
    "\234\053\251\054\227\056\230\057\223\060\212\061\216" +
    "\063\241\064\233\065\232\066\247\073\226\001\002\000" +
    "\024\002\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\052\uffba\062\uffba\073\uffba\001\002\000\024\002\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\052\uffb8\062\uffb8" +
    "\073\uffb8\001\002\000\010\007\uffc6\010\uffc6\014\u0184\001" +
    "\002\000\010\007\uffc5\010\uffc5\014\u0186\001\002\000\024" +
    "\002\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\052" +
    "\uffb6\062\uffb6\073\uffb6\001\002\000\004\011\u0194\001\002" +
    "\000\004\004\u0192\001\002\000\054\002\uff84\012\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\050\uff84\052\uff84" +
    "\053\uff84\054\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\065\uff84\066\uff84\073\uff84\001\002" +
    "\000\054\002\uff82\012\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\050\uff82\052\uff82\053\uff82\054\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\073\uff82\001\002\000\004\004\u019c\001\002" +
    "\000\032\006\055\011\u0194\021\063\037\057\045\062\046" +
    "\064\070\066\071\061\072\056\073\070\074\065\075\060" +
    "\001\002\000\006\010\u0199\012\u0198\001\002\000\006\010" +
    "\uff7c\012\uff7c\001\002\000\006\010\uff7d\012\uff7d\001\002" +
    "\000\010\004\uff80\010\uff80\012\uff80\001\002\000\032\006" +
    "\055\011\u0194\021\063\037\057\045\062\046\064\070\066" +
    "\071\061\072\056\073\070\074\065\075\060\001\002\000" +
    "\006\010\uff7e\012\uff7e\001\002\000\006\010\uff7f\012\uff7f" +
    "\001\002\000\054\002\uff83\012\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\050\uff83\052\uff83\053\uff83\054\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\065\uff83\066\uff83\073\uff83\001\002\000\006\004\uff6c" +
    "\010\uff6c\001\002\000\054\002\uff85\012\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\050\uff85\052\uff85\053\uff85" +
    "\054\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\073\uff85\001\002\000\004" +
    "\073\u01a1\001\002\000\054\002\uff86\012\uff86\040\uff86\041" +
    "\uff86\042\uff86\043\uff86\044\uff86\050\uff86\052\uff86\053\uff86" +
    "\054\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\066\uff86\073\uff86\001\002\000\010" +
    "\004\uff6f\005\u01a2\010\uff6f\001\002\000\030\006\055\021" +
    "\063\037\057\045\062\046\064\070\066\071\061\072\056" +
    "\073\070\074\065\075\060\001\002\000\006\004\uff6e\010" +
    "\uff6e\001\002\000\006\003\u01ae\006\u01af\001\002\000\006" +
    "\003\u01a6\006\u01a7\001\002\000\004\012\u01ad\001\002\000" +
    "\004\007\u01a8\001\002\000\004\011\u01a9\001\002\000\046" +
    "\012\u01ab\040\032\041\025\042\252\043\027\044\036\050" +
    "\234\053\251\054\227\056\230\057\223\060\212\061\216" +
    "\063\241\064\233\065\232\066\247\073\226\001\002\000" +
    "\046\012\u01ac\040\032\041\025\042\252\043\027\044\036" +
    "\050\234\053\251\054\227\056\230\057\223\060\212\061" +
    "\216\063\241\064\233\065\232\066\247\073\226\001\002" +
    "\000\024\002\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\052\uffc2\062\uffc2\073\uffc2\001\002\000\024\002\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\052\uffc1\062" +
    "\uffc1\073\uffc1\001\002\000\024\002\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\052\uffc0\062\uffc0\073\uffc0\001" +
    "\002\000\004\012\u01bb\001\002\000\020\007\u01b0\040\032" +
    "\041\025\042\023\043\027\044\036\073\040\001\002\000" +
    "\004\011\u01b7\001\002\000\006\007\u01b2\010\206\001\002" +
    "\000\004\011\u01b3\001\002\000\046\012\u01b5\040\032\041" +
    "\025\042\252\043\027\044\036\050\234\053\251\054\227" +
    "\056\230\057\223\060\212\061\216\063\241\064\233\065" +
    "\232\066\247\073\226\001\002\000\046\012\u01b6\040\032" +
    "\041\025\042\252\043\027\044\036\050\234\053\251\054" +
    "\227\056\230\057\223\060\212\061\216\063\241\064\233" +
    "\065\232\066\247\073\226\001\002\000\024\002\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\052\uffbe\062\uffbe" +
    "\073\uffbe\001\002\000\024\002\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\052\uffbc\062\uffbc\073\uffbc\001\002" +
    "\000\046\012\u01b9\040\032\041\025\042\252\043\027\044" +
    "\036\050\234\053\251\054\227\056\230\057\223\060\212" +
    "\061\216\063\241\064\233\065\232\066\247\073\226\001" +
    "\002\000\046\012\u01ba\040\032\041\025\042\252\043\027" +
    "\044\036\050\234\053\251\054\227\056\230\057\223\060" +
    "\212\061\216\063\241\064\233\065\232\066\247\073\226" +
    "\001\002\000\024\002\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\052\uffbf\062\uffbf\073\uffbf\001\002\000\024" +
    "\002\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\052" +
    "\uffbd\062\uffbd\073\uffbd\001\002\000\024\002\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\052\uffbb\062\uffbb\073" +
    "\uffbb\001\002\000\024\002\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\052\ufff7\062\ufff7\073\ufff7\001\002\000" +
    "\024\002\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\052\ufff5\062\ufff5\073\ufff5\001\002\000\024\002\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\052\ufff4\062\ufff4" +
    "\073\ufff4\001\002\000\024\002\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\052\ufff8\062\ufff8\073\ufff8\001\002" +
    "\000\024\002\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\052\ufff6\062\ufff6\073\ufff6\001\002\000\024\002\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\052\ufff3\062" +
    "\ufff3\073\ufff3\001\002\000\024\002\ufffd\040\032\041\025" +
    "\042\023\043\027\044\036\052\030\062\035\073\040\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c0\000\010\011\005\053\004\054\003\001\001\000" +
    "\022\004\032\007\021\012\u01c1\013\023\017\017\020\030" +
    "\021\020\045\036\001\001\000\004\006\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\032\007\021" +
    "\012\025\013\023\017\017\020\030\021\020\045\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\032\007\u01bd\013\u01be\017\u01bb\020\u01bf" +
    "\021\u01bc\045\u01c0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\043\010\044\001\001\000" +
    "\002\001\001\000\004\004\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\066" +
    "\003\070\001\001\000\004\003\152\001\001\000\002\001" +
    "\001\000\004\003\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\132\001\001\000\002\001\001\000" +
    "\004\003\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\127\001\001\000\004\003\126\001\001\000" +
    "\004\003\125\001\001\000\004\003\124\001\001\000\004" +
    "\003\123\001\001\000\004\003\122\001\001\000\004\003" +
    "\121\001\001\000\004\003\120\001\001\000\004\003\115" +
    "\001\001\000\004\003\114\001\001\000\004\003\113\001" +
    "\001\000\004\003\112\001\001\000\004\003\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\136" +
    "\003\070\015\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\141\003\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\143\003" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\177\001\001" +
    "\000\006\002\u019c\003\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\202\022\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0180\001\001\000\002\001\001\000\052\004\213\013\245" +
    "\014\247\016\235\023\221\024\241\027\214\032\243\033" +
    "\217\034\220\035\223\036\234\037\216\040\230\041\210" +
    "\042\224\043\237\044\242\045\236\051\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\213\013\370\014\371\016\361\024\364\027\351\032" +
    "\366\033\353\034\354\035\355\036\360\037\352\040\357" +
    "\041\347\042\356\043\363\044\365\045\362\051\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\266\003\070\001\001\000\002\001" +
    "\001\000\006\002\253\003\070\001\001\000\002\001\001" +
    "\000\006\002\255\003\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\261\003\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\273\003\070\001\001\000\002\001\001\000\006" +
    "\002\275\003\070\001\001\000\002\001\001\000\006\002" +
    "\277\003\070\001\001\000\002\001\001\000\006\002\301" +
    "\003\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\305\003\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\313\003\070\001\001" +
    "\000\002\001\001\000\006\002\315\003\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\321\003\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\334" +
    "\003\070\001\001\000\002\001\001\000\006\002\336\003" +
    "\070\001\001\000\002\001\001\000\006\002\340\003\070" +
    "\001\001\000\002\001\001\000\004\026\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\213\013\245" +
    "\014\247\016\235\023\345\024\241\027\214\032\243\033" +
    "\217\034\220\035\223\036\234\037\216\040\230\041\210" +
    "\042\224\043\237\044\242\045\236\051\212\001\001\000" +
    "\050\004\213\013\370\014\371\016\361\024\364\027\351" +
    "\032\366\033\353\034\354\035\355\036\360\037\352\040" +
    "\357\041\347\042\356\043\363\044\365\045\362\051\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\377\003\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u0104\003\070\001\001" +
    "\000\002\001\001\000\006\002\u0106\003\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u010a\003\070\001\001\000\002\001\001\000\006\002" +
    "\u010c\003\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\u0112\003\070\001\001\000\002\001\001\000\006" +
    "\002\u0114\003\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u0118\003\070\001\001" +
    "\000\002\001\001\000\006\002\u011a\003\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u0120\003\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\213" +
    "\013\245\014\247\016\235\023\u0123\024\241\027\214\032" +
    "\243\033\217\034\220\035\223\036\234\037\216\040\230" +
    "\041\210\042\224\043\237\044\242\045\236\051\212\001" +
    "\001\000\050\004\213\013\370\014\371\016\361\024\364" +
    "\027\351\032\366\033\353\034\354\035\355\036\360\037" +
    "\352\040\357\041\347\042\356\043\363\044\365\045\362" +
    "\051\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\u0129\003\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\213\013\245\014\247\016\235\023\u012c\024\241\027\214" +
    "\032\243\033\217\034\220\035\223\036\234\037\216\040" +
    "\230\041\210\042\224\043\237\044\242\045\236\051\212" +
    "\001\001\000\050\004\213\013\370\014\371\016\361\024" +
    "\364\027\351\032\366\033\353\034\354\035\355\036\360" +
    "\037\352\040\357\041\347\042\356\043\363\044\365\045" +
    "\362\051\350\001\001\000\006\030\u0130\031\u012f\001\001" +
    "\000\002\001\001\000\004\030\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\213\013\245\014\247\016\235\023\u0135\024" +
    "\241\027\214\032\243\033\217\034\220\035\223\036\234" +
    "\037\216\040\230\041\210\042\224\043\237\044\242\045" +
    "\236\051\212\001\001\000\050\004\213\013\370\014\371" +
    "\016\361\024\364\027\351\032\366\033\353\034\354\035" +
    "\355\036\360\037\352\040\357\041\347\042\356\043\363" +
    "\044\365\045\362\051\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\u0139\003\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\213\013\245\014" +
    "\247\016\235\023\u013c\024\241\027\214\032\243\033\217" +
    "\034\220\035\223\036\234\037\216\040\230\041\210\042" +
    "\224\043\237\044\242\045\236\051\212\001\001\000\050" +
    "\004\213\013\370\014\371\016\361\024\364\027\351\032" +
    "\366\033\353\034\354\035\355\036\360\037\352\040\357" +
    "\041\347\042\356\043\363\044\365\045\362\051\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u0142\003\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\213\013\245" +
    "\014\247\016\235\023\u0145\024\241\027\214\032\243\033" +
    "\217\034\220\035\223\036\234\037\216\040\230\041\210" +
    "\042\224\043\237\044\242\045\236\051\212\001\001\000" +
    "\050\004\213\013\370\014\371\016\361\024\364\027\351" +
    "\032\366\033\353\034\354\035\355\036\360\037\352\040" +
    "\357\041\347\042\356\043\363\044\365\045\362\051\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u014b\031\u014a\001\001\000\004\030\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\u0171\003\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\136\003\070\015\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\u0162" +
    "\003\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0166\001\001\000\006\002\u016e\003\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\u016c\003\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\u0178\003\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u0182\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\213\013\245\014\247\016\235\023\u0188" +
    "\024\241\027\214\032\243\033\217\034\220\035\223\036" +
    "\234\037\216\040\230\041\210\042\224\043\237\044\242" +
    "\045\236\051\212\001\001\000\050\004\213\013\370\014" +
    "\371\016\361\024\364\027\351\032\366\033\353\034\354" +
    "\035\355\036\360\037\352\040\357\041\347\042\356\043" +
    "\363\044\365\045\362\051\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u018c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u0192\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\u0196\003\070\047\u0195\050\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\u019a\003\070\047\u0199\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u01a2\003\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\004\213\013\245\014\247\016\235\023\u01a9\024\241" +
    "\027\214\032\243\033\217\034\220\035\223\036\234\037" +
    "\216\040\230\041\210\042\224\043\237\044\242\045\236" +
    "\051\212\001\001\000\050\004\213\013\370\014\371\016" +
    "\361\024\364\027\351\032\366\033\353\034\354\035\355" +
    "\036\360\037\352\040\357\041\347\042\356\043\363\044" +
    "\365\045\362\051\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\202\022\u01b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\004\213\013\245\014\247\016" +
    "\235\023\u01b3\024\241\027\214\032\243\033\217\034\220" +
    "\035\223\036\234\037\216\040\230\041\210\042\224\043" +
    "\237\044\242\045\236\051\212\001\001\000\050\004\213" +
    "\013\370\014\371\016\361\024\364\027\351\032\366\033" +
    "\353\034\354\035\355\036\360\037\352\040\357\041\347" +
    "\042\356\043\363\044\365\045\362\051\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\213\013\245" +
    "\014\247\016\235\023\u01b7\024\241\027\214\032\243\033" +
    "\217\034\220\035\223\036\234\037\216\040\230\041\210" +
    "\042\224\043\237\044\242\045\236\051\212\001\001\000" +
    "\050\004\213\013\370\014\371\016\361\024\364\027\351" +
    "\032\366\033\353\034\354\035\355\036\360\037\352\040" +
    "\357\041\347\042\356\043\363\044\365\045\362\051\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\032\007\u01bd\013\u01be\017\u01bb\020\u01bf\021\u01bc" +
    "\045\u01c0\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // E ::= E qMark E dPuntos E 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Expresion cond = (Expresion)c;
        Expresion verd = (Expresion)v;
        Expresion fals = (Expresion)f;
        Ternario t = new Ternario(cright, cleft, ArchivoOrigen, cond, verd, fals);
        RESULT = t;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // E ::= identificador punto identificador DIMENSIONES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
        AccesoMiembroArreglo i = new AccesoMiembroArreglo(idright, idleft, ArchivoOrigen, id, id2, dimensiones);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // E ::= identificador DIMENSIONES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
        AccesoArreglo i = new AccesoArreglo(idright, idleft, ArchivoOrigen, id, exp);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // E ::= nulo 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ValorNulo i = new ValorNulo(auxright, auxleft, ArchivoOrigen);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // E ::= identificador punto identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        AccesoMiembroSimple i = new AccesoMiembroSimple(idright, idleft, ArchivoOrigen, id, id2);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // E ::= identificador oParent cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
        ArrayList<Expresion> parametros = new ArrayList<>();
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // E ::= identificador oParent L_EXPRE cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        ArrayList<Expresion> parametros = (ArrayList<Expresion>)lista;
        if(parametros == null) {parametros = new ArrayList<>();}
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // E ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //

        Character real = val.charAt(1);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e; 
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.NOT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FUN_LINEA ::= linea error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_LINEA",33, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FUN_LINEA ::= linea oParent EXP coma EXP coma EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posxf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posyf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int grosorleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int grosorright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object grosor = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                Expresion xf = (Expresion)posxf;
                Expresion yf = (Expresion)posyf;
                String color = (String)col;
                Expresion g = (Expresion)grosor;
                Linea i = new Linea(auxright, auxleft, ArchivoOrigen, x, y, xf, yf, color, g);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_LINEA",33, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FUN_CADENA ::= cadena oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion cad = (Expresion)str;
                Cadena i = new Cadena(auxright, auxleft, ArchivoOrigen, x, y, color, cad);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CADENA",34, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUN_OVALO ::= ovalo error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_OVALO",32, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUN_OVALO ::= ovalo oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Ovalo i = new Ovalo(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_OVALO",32, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUN_CUADRADO ::= cuadrado error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CUADRADO",31, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUN_CUADRADO ::= cuadrado oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Cuadrado i = new Cuadrado(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CUADRADO",31, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUN_PUNTO ::= point error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_PUNTO",30, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUN_PUNTO ::= point oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int diametroleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int diametroright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object diametro = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion d = (Expresion)diametro;
                Punto i = new Punto(auxright, auxleft, ArchivoOrigen, x, y, color, d);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_PUNTO",30, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASIGNA_ARR ::= identificador punto identificador DIMENSIONES error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",39, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ASIGNA_ARR ::= identificador punto identificador DIMENSIONES asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                Expresion e = (Expresion)exp;
                AsignacionMiembroArreglo i = new AsignacionMiembroArreglo(idright, idleft, ArchivoOrigen, id, id2, dimensiones, e);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",39, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ASIGNA_ARR ::= identificador DIMENSIONES asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                Expresion e = (Expresion)exp;
                AsignaArr i = new AsignaArr(idright, idleft, ArchivoOrigen, id, dimensiones, e);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",39, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ASIGNACION_VAR ::= identificador punto identificador error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ASIGNACION_VAR ::= identificador asigna error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'= Expresion'");
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ASIGNACION_VAR ::= identificador punto identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionMiembroSimple i = new AsignacionMiembroSimple(idright, idleft, ArchivoOrigen, id, id2, e);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // F_IMPRIMIR ::= imprimir error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("F_IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // F_IMPRIMIR ::= imprimir oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion exp = (Expresion)nodo;
                Imprimir i = new Imprimir(auxright, auxleft, ArchivoOrigen, exp);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("F_IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BREAK ::= detener ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Detener i = new Detener(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BREAK",28, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTINUE ::= continuar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Continuar i = new Continuar(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",27, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            RESULT = id;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TIPO ::= booleano 
            {
              Object RESULT =null;
		
            RESULT = "BOOLEAN";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPO ::= caracter 
            {
              Object RESULT =null;
		
            RESULT = "CARACTER";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO ::= cadena 
            {
              Object RESULT =null;
		
            RESULT = "CADENA";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO ::= decimal 
            {
              Object RESULT =null;
		
            RESULT = "DECIMAL";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO ::= entero 
            {
              Object RESULT =null;
		
            RESULT = "ENTERO";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DIMENSIONES ::= oBracket EXP cBracket 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = new ArrayList<>();
                Expresion exp = (Expresion)e;
                if(exp != null){dimensiones.add(exp);}
                RESULT = dimensiones;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",36, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DIMENSIONES ::= DIMENSIONES oBracket EXP cBracket 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                if(dimensiones==null){dimensiones = new ArrayList<>();}
                Expresion exp = (Expresion)e;
                dimensiones.add(exp);
                RESULT = dimensiones;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",36, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LISTA_ARR ::= VALORES_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LISTA_ARR ::= EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = new ArrayList<>();
                Expresion exp = (Expresion)e;
                if(exp!=null)
                {
                    valores.add(exp);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LISTA_ARR ::= LISTA_ARR coma VALORES_ARR 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista1;
                if(valores == null){valores = new ArrayList<>();}
                ArrayList<Expresion> aux = (ArrayList<Expresion>)lista2;
                if(aux == null){aux = new ArrayList<>();}
                for(Expresion e:aux)
                {
                    valores.add(e);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LISTA_ARR ::= LISTA_ARR coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                Expresion exp = (Expresion)e;
                if(exp!=null)
                {
                    valores.add(exp);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALORES_ARR ::= oKey LISTA_ARR cKey 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                RESULT = valores;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("VALORES_ARR",37, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION_ARR ::= TIPO identificador error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION_ARR ::= TIPO identificador DIMENSIONES error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION_ARR ::= TIPO identificador DIMENSIONES asigna VALORES_ARR ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String t = (String)aux;
                    ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                    if(dimensiones==null){dimensiones = new ArrayList<>();}
                    ArrayList<Expresion> valores = (ArrayList<Expresion>)lista2;
                    if(valores == null){valores = new ArrayList<>();}
                    DeclaracionArrCA i = new DeclaracionArrCA(auxright, auxleft, ArchivoOrigen, id, t, dimensiones, valores);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION_ARR ::= TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String t = (String)aux;
                    ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                    if(dimensiones==null){dimensiones = new ArrayList<>();}
                    DeclaracionArrSA i = new DeclaracionArrSA(idright, idleft, ArchivoOrigen, id, t, dimensiones);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // L_EXPRE ::= EXP 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = new ArrayList<>();
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // L_EXPRE ::= L_EXPRE coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null){exp = new ArrayList<>();}
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMADA ::= identificador oParent error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMADA ::= identificador oParent L_EXPRE cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null) { exp = new ArrayList<>();}
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LLAMADA ::= identificador oParent cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Expresion> exp = new ArrayList<>();
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR_ACTUALIZACION ::= identificador dec cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                    SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR_ACTUALIZACION ::= identificador inc cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                   SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                   RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FOR_ACTUALIZACION ::= identificador asigna EXP cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)nodo;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FOR_INIT ::= oParent identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion e = (Expresion)nodo;
                AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                RESULT = a;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR_INIT ::= oParent TIPO identificador asigna EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                String tipo = (String)t;
                DeclaracionVar d = new DeclaracionVar(idright, idleft, ArchivoOrigen, nodos,tipo);
                RESULT = d;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENT_FOR ::= para error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = new ArrayList<>();
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                if(sentencias==null){sentencias = new ArrayList<>();}
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENT_AUM_DEC ::= identificador dec error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENT_AUM_DEC ::= identificador inc error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENT_AUM_DEC ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENT_AUM_DEC ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENT_MIENTRAS ::= mientras error cKey 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                    if(sentencias == null){sentencias = new ArrayList<>();}
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = new ArrayList<>();
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SINO ::= sino oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SINO ::= sino oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SINO_SI ::= sino error cKey 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SINO_SI ::= sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SINO_SI ::= sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENT_SI ::= si error cKey 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENT_SI ::= si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RETORNA ::= retornar error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RETORNA ::= retornar EXP ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RETORNA ::= retornar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, null);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MIEMBROS ::= MIEMBROS TIPO error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MIEMBROS ::= TIPO error ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MIEMBROS ::= TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                if(dimensiones == null){dimensiones = new ArrayList<>();}
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, 1, dimensiones);
                ArrayList<NodoMiembro> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MIEMBROS ::= TIPO identificador ptComa 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen,t, id, 1);
                ArrayList<NodoMiembro> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MIEMBROS ::= MIEMBROS TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista2;
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, nodos.size()+1, dimensiones);
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MIEMBROS ::= MIEMBROS TIPO identificador ptComa 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
                if(nodos == null){nodos = new ArrayList<>();}
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, nodos.size()+1);
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STRUCT ::= estructura error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'identificador'");
            parser.expected.add("'{MIEMBROS}'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("STRUCT",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STRUCT ::= estructura identificador oKey MIEMBROS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
            if(nodos==null){nodos = new ArrayList<>();}
            DeclaracionStruct n = new DeclaracionStruct(idright, idleft, ArchivoOrigen, nodos, id);
            RESULT = n;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("STRUCT",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCIONES ::= TIPO identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCIONES ::= TIPO identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCIONES ::= TIPO identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODOS ::= vacio identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODOS ::= vacio identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= vacio identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MAIN ::= vacio principal error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MAIN ::= vacio principal oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MAIN ::= vacio principal oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BRACKETS ::= oBracket cBracket 
            {
              Object RESULT =null;
		
                RESULT = 1;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BRACKETS",40, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BRACKETS ::= BRACKETS oBracket cBracket 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                int res = (int)num;
                res = res + 1;
                RESULT = res;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BRACKETS",40, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= TIPO identificador BRACKETS 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                int d = (int)num;
                NodoParametro n = new NodoParametro(id, t, true, d);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= PARAMETROS coma TIPO identificador BRACKETS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                int d = (int)num;
                NodoParametro n = new NodoParametro(id, t, true, d);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= F_IMPRIMIR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= CONTINUE 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= BREAK 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= SENT_FOR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= SENT_AUM_DEC 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= SENT_MIENTRAS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= SENT_SI 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= RETORNA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= LLAMADA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= FUN_LINEA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= FUN_CADENA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= FUN_OVALO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= FUN_CUADRADO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= FUN_PUNTO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS ::= ASIGNA_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS ::= SENTENCIAS ASIGNA_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= SENTENCIAS DECLARACION_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= SENTENCIAS FUN_LINEA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= SENTENCIAS FUN_CADENA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= SENTENCIAS FUN_OVALO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIAS FUN_CUADRADO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS FUN_PUNTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENTENCIAS F_IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS CONTINUE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS BREAK 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS SENT_AUM_DEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS SENT_MIENTRAS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS SENT_SI 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS RETORNA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS LLAMADA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES ::= STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES ::= DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACIONES STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_IMPORTAR ::= importar error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'importar(cadena);'");
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_IMPORTAR ::= L_IMPORTAR importar error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'importar(cadena);'");
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORTAR ::= importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                String temparchivo = ArchivoOrigen;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                ArchivoOrigen = temparchivo;
                parser.ArchivoOrigen = temparchivo;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORTAR ::= L_IMPORTAR importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                String temparchivo = ArchivoOrigen;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                ArchivoOrigen = temparchivo;
                parser.ArchivoOrigen = temparchivo;
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= NT$1 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 L_IMPORTAR DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

