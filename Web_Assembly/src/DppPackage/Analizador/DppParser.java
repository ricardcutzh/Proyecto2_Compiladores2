
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 01 13:05:14 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;
import DppPackage.DppAST.Sentencias.IF.*;
import DppPackage.DppAST.Sentencias.While.*;
import DppPackage.DppAST.Sentencias.For.*;
import DppPackage.DppAST.Sentencias.Nativas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 01 13:05:14 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\045\002\000\002\011" +
    "\005\000\002\046\002\000\002\011\004\000\002\006\010" +
    "\000\002\006\007\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\022\006\000\002\022\004\000\002" +
    "\017\010\000\002\017\011\000\002\017\006\000\002\020" +
    "\010\000\002\020\011\000\002\020\011\000\002\020\012" +
    "\000\002\020\006\000\002\021\010\000\002\021\011\000" +
    "\002\021\011\000\002\021\012\000\002\021\006\000\002" +
    "\007\007\000\002\010\006\000\002\010\005\000\002\016" +
    "\004\000\002\016\005\000\002\027\010\000\002\027\011" +
    "\000\002\027\012\000\002\027\013\000\002\027\011\000" +
    "\002\027\012\000\002\027\011\000\002\027\012\000\002" +
    "\031\012\000\002\031\013\000\002\031\011\000\002\031" +
    "\012\000\002\030\005\000\002\030\006\000\002\032\010" +
    "\000\002\032\011\000\002\033\005\000\002\033\005\000" +
    "\002\034\013\000\002\034\012\000\002\025\007\000\002" +
    "\025\006\000\002\026\006\000\002\026\005\000\002\026" +
    "\005\000\002\014\006\000\002\014\007\000\002\015\005" +
    "\000\002\015\003\000\002\013\005\000\002\013\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\035" +
    "\004\000\002\036\004\000\002\037\007\000\002\005\005" +
    "\000\002\005\007\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\024\006\000\002\024\010\000\002" +
    "\024\006\000\002\040\015\000\002\041\017\000\002\042" +
    "\017\000\002\044\015\000\002\043\021\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\006" +
    "\000\002\003\005\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\024\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\043\000\046\ufffe\056\ufffe\066\ufffe\001\002\000\022" +
    "\034\030\035\023\036\021\037\025\040\034\046\026\056" +
    "\033\066\035\001\002\000\004\043\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\024\034" +
    "\030\035\023\036\021\037\025\040\034\043\031\046\026" +
    "\056\033\066\035\001\002\000\004\006\012\001\002\000" +
    "\004\067\013\001\002\000\004\007\014\001\002\000\004" +
    "\004\015\001\002\000\024\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\043\ufffb\046\ufffb\056\ufffb\066\ufffb\001\002" +
    "\000\024\002\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\046\ufff3\056\ufff3\066\ufff3\001\002\000\024\002\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\046\ufff1\056" +
    "\ufff1\066\ufff1\001\002\000\024\002\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\046\ufff5\056\ufff5\066\ufff5\001" +
    "\002\000\006\003\uff9b\066\uff9b\001\002\000\024\002\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\046\ufff4\056" +
    "\ufff4\066\ufff4\001\002\000\006\003\uff9c\066\uff9c\001\002" +
    "\000\024\002\uffff\034\030\035\023\036\021\037\025\040" +
    "\034\046\026\056\033\066\035\001\002\000\006\003\uff9a" +
    "\066\uff9a\001\002\000\006\045\u014b\066\u014a\001\002\000" +
    "\024\002\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\046\ufff2\056\ufff2\066\ufff2\001\002\000\006\003\uff9d\066" +
    "\uff9d\001\002\000\004\006\u0146\001\002\000\006\003\051" +
    "\066\052\001\002\000\004\066\036\001\002\000\006\003" +
    "\uff99\066\uff99\001\002\000\006\003\uff98\066\uff98\001\002" +
    "\000\004\011\037\001\002\000\016\034\030\035\023\036" +
    "\021\037\025\040\034\066\035\001\002\000\020\012\044" +
    "\034\030\035\023\036\021\037\025\040\034\066\035\001" +
    "\002\000\004\066\042\001\002\000\004\004\043\001\002" +
    "\000\020\012\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\066\uffbf\001\002\000\024\002\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\046\uffc1\056\uffc1\066\uffc1\001" +
    "\002\000\004\066\046\001\002\000\004\004\047\001\002" +
    "\000\020\012\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\066\uffc0\001\002\000\006\004\u0142\010\u0141\001\002" +
    "\000\004\004\u0140\001\002\000\014\003\054\004\uff92\005" +
    "\053\006\055\010\uff92\001\002\000\030\006\125\015\134" +
    "\033\127\041\132\042\133\063\135\064\131\065\126\066" +
    "\140\067\136\070\130\001\002\000\006\004\u0135\012\u013e" +
    "\001\002\000\020\007\057\034\030\035\023\036\021\037" +
    "\025\040\034\066\035\001\002\000\004\066\u013d\001\002" +
    "\000\004\011\u0139\001\002\000\006\007\062\010\061\001" +
    "\002\000\016\034\030\035\023\036\021\037\025\040\034" +
    "\066\035\001\002\000\004\011\063\001\002\000\046\012" +
    "\116\034\030\035\023\036\123\037\025\040\034\044\106" +
    "\047\122\050\101\052\102\053\075\054\065\055\070\057" +
    "\112\060\105\061\104\062\120\066\100\001\002\000\046" +
    "\012\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\044" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\066\uffdf\001\002\000" +
    "\004\004\u0136\001\002\000\006\003\051\066\u0133\001\002" +
    "\000\046\012\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\044\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\066\uffd7\001" +
    "\002\000\004\006\u012f\001\002\000\046\012\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\066\uffd1\001\002\000\046\012\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\044\uffd5\047\uffd5" +
    "\050\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\066\uffd5\001\002\000\046\012\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\044\uffd4\047" +
    "\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\066\uffd4\001\002\000\046\012" +
    "\u012e\034\030\035\023\036\123\037\025\040\034\044\106" +
    "\047\122\050\101\052\102\053\075\054\065\055\070\057" +
    "\112\060\105\061\104\062\120\066\100\001\002\000\004" +
    "\004\u012d\001\002\000\046\012\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\044\uffd2\047\uffd2\050\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\066\uffd2\001\002\000\046\012\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\044\uffde\047\uffde\050\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\066\uffde\001\002\000\020\003\uff98\005\u0119\006" +
    "\u011c\013\u011a\021\u011b\022\u011d\066\uff98\001\002\000\004" +
    "\006\366\001\002\000\004\006\357\001\002\000\046\012" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\044\uffe0" +
    "\047\uffe0\050\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\066\uffe0\001\002\000\004" +
    "\006\343\001\002\000\004\006\327\001\002\000\004\006" +
    "\257\001\002\000\046\012\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\044\uffd8\047\uffd8\050\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\066\uffd8\001\002\000\046\012\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\044\uffd3\047\uffd3\050\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\066\uffd3\001\002\000\046\012\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\044\uffdc\047\uffdc\050\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\066\uffdc\001\002\000\004\006\244\001\002\000" +
    "\046\012\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\044\uffda\047\uffda\050\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\066\uffda\001\002" +
    "\000\046\012\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\044\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\066\uffdd\001" +
    "\002\000\046\012\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\044\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\066\uffd6" +
    "\001\002\000\024\002\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\046\uffc5\056\uffc5\066\uffc5\001\002\000\046" +
    "\012\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\044" +
    "\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\066\uffdb\001\002\000" +
    "\004\006\226\001\002\000\046\012\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\044\uffd9\047\uffd9\050\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\066\uffd9\001\002\000\032\004\223\006\125\015" +
    "\134\033\127\041\132\042\133\063\135\064\131\065\126" +
    "\066\140\067\136\070\130\001\002\000\010\003\uff9b\006" +
    "\124\066\uff9b\001\002\000\030\006\125\015\134\033\127" +
    "\041\132\042\133\063\135\064\131\065\126\066\140\067" +
    "\136\070\130\001\002\000\030\006\125\015\134\033\127" +
    "\041\132\042\133\063\135\064\131\065\126\066\140\067" +
    "\136\070\130\001\002\000\046\004\uff72\007\uff72\010\uff72" +
    "\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\031\uff72\032\uff72\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\046\004\uff6a\007\uff6a\010" +
    "\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030" +
    "\uff6a\031\uff6a\032\uff6a\001\002\000\046\004\uff73\007\uff73" +
    "\010\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021" +
    "\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\001\002\000\046\004\uff70\007" +
    "\uff70\010\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\001\002\000\046\004\uff6f" +
    "\007\uff6f\010\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\001\002\000\030\006" +
    "\125\015\134\033\127\041\132\042\133\063\135\064\131" +
    "\065\126\066\140\067\136\070\130\001\002\000\046\004" +
    "\uff74\007\uff74\010\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\031\uff74\032\uff74\001\002\000\046" +
    "\004\uff71\007\uff71\010\uff71\014\uff71\015\uff71\016\uff71\017" +
    "\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\001\002\000" +
    "\004\010\207\001\002\000\052\004\uff6e\006\177\007\uff6e" +
    "\010\uff6e\013\176\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\001\002\000\046\004" +
    "\uff87\007\uff87\010\uff87\014\157\015\150\016\146\017\142" +
    "\020\153\021\143\022\144\023\160\024\154\025\152\026" +
    "\156\027\155\030\145\031\151\032\147\001\002\000\030" +
    "\006\125\015\134\033\127\041\132\042\133\063\135\064" +
    "\131\065\126\066\140\067\136\070\130\001\002\000\046" +
    "\004\uff77\007\uff77\010\uff77\014\uff77\015\uff77\016\uff77\017" +
    "\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\001\002\000" +
    "\046\004\uff76\007\uff76\010\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\046\004\uff81\007\uff81\010\uff81\014\157\015\150\016" +
    "\146\017\142\020\153\021\143\022\144\023\uff81\024\uff81" +
    "\025\152\026\156\027\155\030\145\031\uff81\032\uff81\001" +
    "\002\000\046\004\uff86\007\uff86\010\uff86\014\uff86\015\uff86" +
    "\016\146\017\142\020\153\021\143\022\144\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\001\002\000\046\004\uff7e\007\uff7e\010\uff7e\014\157\015" +
    "\150\016\146\017\142\020\153\021\143\022\144\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\001\002\000\046\004\uff7c\007\uff7c\010\uff7c\014\157" +
    "\015\150\016\146\017\142\020\153\021\143\022\144\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\001\002\000\046\004\uff80\007\uff80\010\uff80\014" +
    "\157\015\150\016\146\017\142\020\153\021\143\022\144" +
    "\023\uff80\024\uff80\025\152\026\156\027\155\030\145\031" +
    "\uff80\032\uff80\001\002\000\046\004\uff82\007\uff82\010\uff82" +
    "\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\143\022" +
    "\144\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82" +
    "\031\uff82\032\uff82\001\002\000\046\004\uff7f\007\uff7f\010" +
    "\uff7f\014\157\015\150\016\146\017\142\020\153\021\143" +
    "\022\144\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\001\002\000\046\004\uff7b\007\uff7b" +
    "\010\uff7b\014\157\015\150\016\146\017\142\020\153\021" +
    "\143\022\144\023\160\024\154\025\152\026\156\027\155" +
    "\030\145\031\uff7b\032\uff7b\001\002\000\046\004\uff85\007" +
    "\uff85\010\uff85\014\uff85\015\uff85\016\146\017\142\020\153" +
    "\021\143\022\144\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\001\002\000\046\004\uff7a" +
    "\007\uff7a\010\uff7a\014\157\015\150\016\146\017\142\020" +
    "\153\021\143\022\144\023\160\024\154\025\152\026\156" +
    "\027\155\030\145\031\151\032\uff7a\001\002\000\046\004" +
    "\uff84\007\uff84\010\uff84\014\uff84\015\uff84\016\uff84\017\uff84" +
    "\020\153\021\143\022\144\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\001\002\000\046" +
    "\004\uff7d\007\uff7d\010\uff7d\014\157\015\150\016\146\017" +
    "\142\020\153\021\143\022\144\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\001\002\000" +
    "\046\004\uff83\007\uff83\010\uff83\014\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\153\021\143\022\144\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\001\002" +
    "\000\004\066\206\001\002\000\032\006\125\007\201\015" +
    "\134\033\127\041\132\042\133\063\135\064\131\065\126" +
    "\066\140\067\136\070\130\001\002\000\006\007\204\010" +
    "\203\001\002\000\046\004\uff6c\007\uff6c\010\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\001\002\000\006\007\uffa0\010\uffa0\001\002\000" +
    "\030\006\125\015\134\033\127\041\132\042\133\063\135" +
    "\064\131\065\126\066\140\067\136\070\130\001\002\000" +
    "\046\004\uff6d\007\uff6d\010\uff6d\014\uff6d\015\uff6d\016\uff6d" +
    "\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\001\002" +
    "\000\006\007\uffa1\010\uffa1\001\002\000\046\004\uff6b\007" +
    "\uff6b\010\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b" +
    "\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027" +
    "\uff6b\030\uff6b\031\uff6b\032\uff6b\001\002\000\030\006\125" +
    "\015\134\033\127\041\132\042\133\063\135\064\131\065" +
    "\126\066\140\067\136\070\130\001\002\000\004\010\211" +
    "\001\002\000\004\067\212\001\002\000\004\010\213\001" +
    "\002\000\030\006\125\015\134\033\127\041\132\042\133" +
    "\063\135\064\131\065\126\066\140\067\136\070\130\001" +
    "\002\000\004\007\215\001\002\000\004\004\216\001\002" +
    "\000\046\012\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\044\uff89\047\uff89\050\uff89\052\uff89\053\uff89\054\uff89" +
    "\055\uff89\057\uff89\060\uff89\061\uff89\062\uff89\066\uff89\001" +
    "\002\000\046\004\uff78\007\uff78\010\uff78\014\uff78\015\uff78" +
    "\016\146\017\142\020\153\021\143\022\144\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\001\002\000\046\004\uff79\007\uff79\010\uff79\014\uff79\015" +
    "\uff79\016\uff79\017\uff79\020\uff79\021\143\022\144\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\001\002\000\042\007\222\014\157\015\150\016\146" +
    "\017\142\020\153\021\143\022\144\023\160\024\154\025" +
    "\152\026\156\027\155\030\145\031\151\032\147\001\002" +
    "\000\046\004\uff75\007\uff75\010\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\001" +
    "\002\000\046\012\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\044\uffbe\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\066\uffbe" +
    "\001\002\000\004\004\225\001\002\000\046\012\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\044\uffbd\047\uffbd" +
    "\050\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\066\uffbd\001\002\000\030\006\125" +
    "\015\134\033\127\041\132\042\133\063\135\064\131\065" +
    "\126\066\140\067\136\070\130\001\002\000\004\010\230" +
    "\001\002\000\030\006\125\015\134\033\127\041\132\042" +
    "\133\063\135\064\131\065\126\066\140\067\136\070\130" +
    "\001\002\000\004\010\232\001\002\000\030\006\125\015" +
    "\134\033\127\041\132\042\133\063\135\064\131\065\126" +
    "\066\140\067\136\070\130\001\002\000\004\010\234\001" +
    "\002\000\030\006\125\015\134\033\127\041\132\042\133" +
    "\063\135\064\131\065\126\066\140\067\136\070\130\001" +
    "\002\000\004\010\236\001\002\000\004\067\237\001\002" +
    "\000\004\010\240\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\004\007\242\001\002\000" +
    "\004\004\243\001\002\000\046\012\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\044\uff88\047\uff88\050\uff88\052" +
    "\uff88\053\uff88\054\uff88\055\uff88\057\uff88\060\uff88\061\uff88" +
    "\062\uff88\066\uff88\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\004\010\246\001\002\000" +
    "\030\006\125\015\134\033\127\041\132\042\133\063\135" +
    "\064\131\065\126\066\140\067\136\070\130\001\002\000" +
    "\004\010\250\001\002\000\004\067\251\001\002\000\004" +
    "\010\252\001\002\000\030\006\125\015\134\033\127\041" +
    "\132\042\133\063\135\064\131\065\126\066\140\067\136" +
    "\070\130\001\002\000\004\007\254\001\002\000\004\004" +
    "\255\001\002\000\046\012\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\044\uff8c\047\uff8c\050\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\066\uff8c\001\002\000\004\004\267\001\002\000\016\034" +
    "\030\035\023\036\021\037\025\040\034\066\260\001\002" +
    "\000\006\005\265\066\uff98\001\002\000\004\066\262\001" +
    "\002\000\004\005\263\001\002\000\030\006\125\015\134" +
    "\033\127\041\132\042\133\063\135\064\131\065\126\066" +
    "\140\067\136\070\130\001\002\000\004\004\uffa8\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\004\004\uffa7\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\004\004\271\001\002\000" +
    "\004\066\272\001\002\000\010\005\320\021\321\022\322" +
    "\001\002\000\004\011\274\001\002\000\046\012\276\034" +
    "\030\035\023\036\123\037\025\040\034\044\106\047\122" +
    "\050\101\052\102\053\075\054\065\055\070\057\112\060" +
    "\105\061\104\062\120\066\100\001\002\000\046\012\277" +
    "\034\030\035\023\036\123\037\025\040\034\044\106\047" +
    "\122\050\101\052\102\053\075\054\065\055\070\057\112" +
    "\060\105\061\104\062\120\066\100\001\002\000\046\012" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\044\uffa9" +
    "\047\uffa9\050\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\066\uffa9\001\002\000\046" +
    "\012\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\044" +
    "\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\066\uffaa\001\002\000" +
    "\046\012\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\044\uffee\047\uffee\050\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\066\uffee\001\002" +
    "\000\046\012\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\044\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7\001" +
    "\002\000\046\012\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\044\uffe4\047\uffe4\050\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\066\uffe4" +
    "\001\002\000\046\012\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\044\uffe1\047\uffe1\050\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\066" +
    "\uffe1\001\002\000\046\012\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\044\uffea\047\uffea\050\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\057\uffea\060\uffea\061\uffea\062\uffea" +
    "\066\uffea\001\002\000\046\012\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\044\uffef\047\uffef\050\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\066\uffef\001\002\000\046\012\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\044\uffe5\047\uffe5\050\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\066\uffe5\001\002\000\046\012\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\044\uffe9\047\uffe9\050\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\066\uffe9\001\002\000\046\012\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\044\uffe2\047\uffe2\050" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\066\uffe2\001\002\000\046\012\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\044\uffe8\047\uffe8" +
    "\050\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\066\uffe8\001\002\000\046\012\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\044\uffed\047" +
    "\uffed\050\uffed\052\uffed\053\uffed\054\uffed\055\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\066\uffed\001\002\000\046\012" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\044\uffe6" +
    "\047\uffe6\050\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\066\uffe6\001\002\000\046" +
    "\012\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\044" +
    "\uffec\047\uffec\050\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\066\uffec\001\002\000" +
    "\046\012\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\044\uffe3\047\uffe3\050\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\066\uffe3\001\002" +
    "\000\046\012\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\044\ufff0\047\ufff0\050\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\066\ufff0\001" +
    "\002\000\046\012\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\044\uffeb\047\uffeb\050\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\066\uffeb" +
    "\001\002\000\030\006\125\015\134\033\127\041\132\042" +
    "\133\063\135\064\131\065\126\066\140\067\136\070\130" +
    "\001\002\000\004\007\324\001\002\000\004\007\323\001" +
    "\002\000\004\011\uffa4\001\002\000\004\011\uffa5\001\002" +
    "\000\004\007\326\001\002\000\004\011\uffa6\001\002\000" +
    "\030\006\125\015\134\033\127\041\132\042\133\063\135" +
    "\064\131\065\126\066\140\067\136\070\130\001\002\000" +
    "\004\010\331\001\002\000\030\006\125\015\134\033\127" +
    "\041\132\042\133\063\135\064\131\065\126\066\140\067" +
    "\136\070\130\001\002\000\004\010\333\001\002\000\004" +
    "\067\334\001\002\000\004\010\335\001\002\000\030\006" +
    "\125\015\134\033\127\041\132\042\133\063\135\064\131" +
    "\065\126\066\140\067\136\070\130\001\002\000\004\010" +
    "\337\001\002\000\030\006\125\015\134\033\127\041\132" +
    "\042\133\063\135\064\131\065\126\066\140\067\136\070" +
    "\130\001\002\000\004\007\341\001\002\000\004\004\342" +
    "\001\002\000\046\012\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\044\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\066" +
    "\uff8b\001\002\000\030\006\125\015\134\033\127\041\132" +
    "\042\133\063\135\064\131\065\126\066\140\067\136\070" +
    "\130\001\002\000\004\010\345\001\002\000\030\006\125" +
    "\015\134\033\127\041\132\042\133\063\135\064\131\065" +
    "\126\066\140\067\136\070\130\001\002\000\004\010\347" +
    "\001\002\000\004\067\350\001\002\000\004\010\351\001" +
    "\002\000\030\006\125\015\134\033\127\041\132\042\133" +
    "\063\135\064\131\065\126\066\140\067\136\070\130\001" +
    "\002\000\004\010\353\001\002\000\030\006\125\015\134" +
    "\033\127\041\132\042\133\063\135\064\131\065\126\066" +
    "\140\067\136\070\130\001\002\000\004\007\355\001\002" +
    "\000\004\004\356\001\002\000\046\012\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\044\uff8a\047\uff8a\050\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\062\uff8a\066\uff8a\001\002\000\030\006\125\015\134" +
    "\033\127\041\132\042\133\063\135\064\131\065\126\066" +
    "\140\067\136\070\130\001\002\000\004\007\361\001\002" +
    "\000\004\011\362\001\002\000\046\012\364\034\030\035" +
    "\023\036\123\037\025\040\034\044\106\047\122\050\101" +
    "\052\102\053\075\054\065\055\070\057\112\060\105\061" +
    "\104\062\120\066\100\001\002\000\046\012\365\034\030" +
    "\035\023\036\123\037\025\040\034\044\106\047\122\050" +
    "\101\052\102\053\075\054\065\055\070\057\112\060\105" +
    "\061\104\062\120\066\100\001\002\000\046\012\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\044\uffae\047\uffae" +
    "\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\066\uffae\001\002\000\046\012\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\044\uffad\047" +
    "\uffad\050\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\066\uffad\001\002\000\030\006" +
    "\125\015\134\033\127\041\132\042\133\063\135\064\131" +
    "\065\126\066\140\067\136\070\130\001\002\000\004\007" +
    "\370\001\002\000\004\011\371\001\002\000\046\012\373" +
    "\034\030\035\023\036\123\037\025\040\034\044\106\047" +
    "\122\050\101\052\102\053\075\054\065\055\070\057\112" +
    "\060\105\061\104\062\120\066\100\001\002\000\046\012" +
    "\u0115\034\030\035\023\036\123\037\025\040\034\044\106" +
    "\047\122\050\101\052\102\053\075\054\065\055\070\057" +
    "\112\060\105\061\104\062\120\066\100\001\002\000\050" +
    "\012\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\044" +
    "\uffbc\047\uffbc\050\uffbc\051\374\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\066\uffbc\001" +
    "\002\000\006\011\u0102\050\u010d\001\002\000\050\012\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\044\uffb8\047" +
    "\uffb8\050\uffb8\051\377\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\066\uffb8\001\002\000" +
    "\046\012\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\044\uffb6\047\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\066\uffb6\001\002" +
    "\000\006\011\u0102\050\u0101\001\002\000\046\012\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\044\uffba\047\uffba" +
    "\050\uffba\052\uffba\053\uffba\054\uffba\055\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\066\uffba\001\002\000\004\006\u0106" +
    "\001\002\000\046\012\u0104\034\030\035\023\036\123\037" +
    "\025\040\034\044\106\047\122\050\101\052\102\053\075" +
    "\054\065\055\070\057\112\060\105\061\104\062\120\066" +
    "\100\001\002\000\046\012\u0105\034\030\035\023\036\123" +
    "\037\025\040\034\044\106\047\122\050\101\052\102\053" +
    "\075\054\065\055\070\057\112\060\105\061\104\062\120" +
    "\066\100\001\002\000\046\012\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\044\uffb0\047\uffb0\050\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\066\uffb0\001\002\000\046\012\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\044\uffaf\047\uffaf\050\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\066\uffaf\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\004\007\u0108\001\002\000" +
    "\004\011\u0109\001\002\000\046\012\u010b\034\030\035\023" +
    "\036\123\037\025\040\034\044\106\047\122\050\101\052" +
    "\102\053\075\054\065\055\070\057\112\060\105\061\104" +
    "\062\120\066\100\001\002\000\046\012\u010c\034\030\035" +
    "\023\036\123\037\025\040\034\044\106\047\122\050\101" +
    "\052\102\053\075\054\065\055\070\057\112\060\105\061" +
    "\104\062\120\066\100\001\002\000\050\012\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\044\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\066\uffb4\001\002\000\050\012" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\044\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\066\uffb3\001\002" +
    "\000\004\006\u010e\001\002\000\030\006\125\015\134\033" +
    "\127\041\132\042\133\063\135\064\131\065\126\066\140" +
    "\067\136\070\130\001\002\000\004\007\u0110\001\002\000" +
    "\004\011\u0111\001\002\000\046\012\u0113\034\030\035\023" +
    "\036\123\037\025\040\034\044\106\047\122\050\101\052" +
    "\102\053\075\054\065\055\070\057\112\060\105\061\104" +
    "\062\120\066\100\001\002\000\046\012\u0114\034\030\035" +
    "\023\036\123\037\025\040\034\044\106\047\122\050\101" +
    "\052\102\053\075\054\065\055\070\057\112\060\105\061" +
    "\104\062\120\066\100\001\002\000\050\012\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\044\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\066\uffb2\001\002\000\050\012" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\044\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\066\uffb1\001\002" +
    "\000\050\012\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\044\uffbb\047\uffbb\050\uffbb\051\374\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\066" +
    "\uffbb\001\002\000\050\012\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\044\uffb7\047\uffb7\050\uffb7\051\377\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\066\uffb7\001\002\000\046\012\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\044\uffb5\047\uffb5\050\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\066\uffb5\001\002\000\046\012\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\044\uffb9\047\uffb9\050" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\066\uffb9\001\002\000\032\003\u0129\006" +
    "\125\015\134\033\127\041\132\042\133\063\135\064\131" +
    "\065\126\066\140\067\136\070\130\001\002\000\004\066" +
    "\u0125\001\002\000\004\004\u0124\001\002\000\032\006\125" +
    "\007\u0120\015\134\033\127\041\132\042\133\063\135\064" +
    "\131\065\126\066\140\067\136\070\130\001\002\000\004" +
    "\004\u011e\001\002\000\046\012\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\044\uffab\047\uffab\050\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\066\uffab\001\002\000\006\007\u0122\010\203\001\002" +
    "\000\004\004\u0121\001\002\000\046\012\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\047\uffa3\050\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\066\uffa3\001\002\000\004\004\u0123\001\002" +
    "\000\046\012\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\044\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\066\uffa2\001" +
    "\002\000\046\012\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\044\uffac\047\uffac\050\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\057\uffac\060\uffac\061\uffac\062\uffac\066\uffac" +
    "\001\002\000\004\005\u0126\001\002\000\030\006\125\015" +
    "\134\033\127\041\132\042\133\063\135\064\131\065\126" +
    "\066\140\067\136\070\130\001\002\000\004\004\u0128\001" +
    "\002\000\046\012\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\044\uff8e\047\uff8e\050\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\066\uff8e" +
    "\001\002\000\004\004\u012c\001\002\000\004\004\u012b\001" +
    "\002\000\046\012\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\044\uff8f\047\uff8f\050\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\066\uff8f" +
    "\001\002\000\046\012\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\044\uff8d\047\uff8d\050\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\066" +
    "\uff8d\001\002\000\046\012\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\044\uff96\047\uff96\050\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\066\uff96\001\002\000\024\002\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\046\uffc3\056\uffc3\066\uffc3\001\002" +
    "\000\030\006\125\015\134\033\127\041\132\042\133\063" +
    "\135\064\131\065\126\066\140\067\136\070\130\001\002" +
    "\000\004\007\u0131\001\002\000\004\004\u0132\001\002\000" +
    "\046\012\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\044\uff95\047\uff95\050\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\066\uff95\001\002" +
    "\000\012\003\u0134\004\uff92\005\053\010\uff92\001\002\000" +
    "\004\004\u0135\001\002\000\006\004\uff90\010\uff90\001\002" +
    "\000\046\012\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\044\uff97\047\uff97\050\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\057\uff97\060\uff97\061\uff97\062\uff97\066\uff97\001" +
    "\002\000\004\066\u0138\001\002\000\006\007\uffd0\010\uffd0" +
    "\001\002\000\046\012\u013b\034\030\035\023\036\123\037" +
    "\025\040\034\044\106\047\122\050\101\052\102\053\075" +
    "\054\065\055\070\057\112\060\105\061\104\062\120\066" +
    "\100\001\002\000\046\012\u013c\034\030\035\023\036\123" +
    "\037\025\040\034\044\106\047\122\050\101\052\102\053" +
    "\075\054\065\055\070\057\112\060\105\061\104\062\120" +
    "\066\100\001\002\000\024\002\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\046\uffc6\056\uffc6\066\uffc6\001\002" +
    "\000\024\002\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\046\uffc4\056\uffc4\066\uffc4\001\002\000\006\007\uffcf" +
    "\010\uffcf\001\002\000\024\002\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\046\uffc2\056\uffc2\066\uffc2\001\002" +
    "\000\006\004\uff91\010\uff91\001\002\000\054\002\uff9e\012" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\044\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\066\uff9e" +
    "\001\002\000\004\066\u0143\001\002\000\054\002\uff9f\012" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\044\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\066\uff9f" +
    "\001\002\000\010\004\uff94\005\u0144\010\uff94\001\002\000" +
    "\030\006\125\015\134\033\127\041\132\042\133\063\135" +
    "\064\131\065\126\066\140\067\136\070\130\001\002\000" +
    "\006\004\uff93\010\uff93\001\002\000\004\067\u0147\001\002" +
    "\000\004\007\u0148\001\002\000\004\004\u0149\001\002\000" +
    "\024\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\043\ufffc" +
    "\046\ufffc\056\ufffc\066\ufffc\001\002\000\006\003\u0154\006" +
    "\u0155\001\002\000\006\003\u014c\006\u014d\001\002\000\004" +
    "\012\u0153\001\002\000\004\007\u014e\001\002\000\004\011" +
    "\u014f\001\002\000\046\012\u0151\034\030\035\023\036\123" +
    "\037\025\040\034\044\106\047\122\050\101\052\102\053" +
    "\075\054\065\055\070\057\112\060\105\061\104\062\120" +
    "\066\100\001\002\000\046\012\u0152\034\030\035\023\036" +
    "\123\037\025\040\034\044\106\047\122\050\101\052\102" +
    "\053\075\054\065\055\070\057\112\060\105\061\104\062" +
    "\120\066\100\001\002\000\024\002\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\046\uffce\056\uffce\066\uffce\001" +
    "\002\000\024\002\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\046\uffcd\056\uffcd\066\uffcd\001\002\000\024\002" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\046\uffcc" +
    "\056\uffcc\066\uffcc\001\002\000\004\012\u0161\001\002\000" +
    "\020\007\u0156\034\030\035\023\036\021\037\025\040\034" +
    "\066\035\001\002\000\004\011\u015d\001\002\000\006\007" +
    "\u0158\010\061\001\002\000\004\011\u0159\001\002\000\046" +
    "\012\u015b\034\030\035\023\036\123\037\025\040\034\044" +
    "\106\047\122\050\101\052\102\053\075\054\065\055\070" +
    "\057\112\060\105\061\104\062\120\066\100\001\002\000" +
    "\046\012\u015c\034\030\035\023\036\123\037\025\040\034" +
    "\044\106\047\122\050\101\052\102\053\075\054\065\055" +
    "\070\057\112\060\105\061\104\062\120\066\100\001\002" +
    "\000\024\002\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\046\uffca\056\uffca\066\uffca\001\002\000\024\002\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\046\uffc8\056" +
    "\uffc8\066\uffc8\001\002\000\046\012\u015f\034\030\035\023" +
    "\036\123\037\025\040\034\044\106\047\122\050\101\052" +
    "\102\053\075\054\065\055\070\057\112\060\105\061\104" +
    "\062\120\066\100\001\002\000\046\012\u0160\034\030\035" +
    "\023\036\123\037\025\040\034\044\106\047\122\050\101" +
    "\052\102\053\075\054\065\055\070\057\112\060\105\061" +
    "\104\062\120\066\100\001\002\000\024\002\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\046\uffcb\056\uffcb\066" +
    "\uffcb\001\002\000\024\002\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\046\uffc9\056\uffc9\066\uffc9\001\002\000" +
    "\024\002\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\046\uffc7\056\uffc7\066\uffc7\001\002\000\024\002\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\046\ufff9\056\ufff9" +
    "\066\ufff9\001\002\000\024\002\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\046\ufff7\056\ufff7\066\ufff7\001\002" +
    "\000\024\002\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\046\ufff6\056\ufff6\066\ufff6\001\002\000\024\002\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\046\ufffa\056" +
    "\ufffa\066\ufffa\001\002\000\024\002\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\046\ufff8\056\ufff8\066\ufff8\001" +
    "\002\000\024\002\ufffd\034\030\035\023\036\021\037\025" +
    "\040\034\046\026\056\033\066\035\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\010\011\005\045\004\046\003\001\001\000" +
    "\020\004\031\007\017\012\u0166\013\021\017\015\020\026" +
    "\021\016\001\001\000\004\006\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\031\007\017\012\023" +
    "\013\021\017\015\020\026\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\031\007\u0163\013\u0164\017\u0161\020" +
    "\u0165\021\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\040\010" +
    "\037\001\001\000\004\004\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\u013e\003\140\001\001\000\002\001\001\000\006\004\055" +
    "\022\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0136\001\001\000\002\001\001" +
    "\000\046\004\065\013\116\014\120\016\106\023\073\024" +
    "\112\027\066\032\114\033\071\034\072\035\075\036\107" +
    "\037\070\040\102\041\063\042\076\043\110\044\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\065" +
    "\013\315\014\277\016\311\024\304\027\313\032\316\033" +
    "\303\034\306\035\300\036\310\037\312\040\305\041\301" +
    "\042\314\043\302\044\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\223\003\140\001\001\000\002" +
    "\001\001\000\006\002\136\003\140\001\001\000\004\003" +
    "\220\001\001\000\002\001\001\000\004\003\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\173\001\001\000\004\003" +
    "\172\001\001\000\004\003\171\001\001\000\004\003\170" +
    "\001\001\000\004\003\167\001\001\000\004\003\166\001" +
    "\001\000\004\003\165\001\001\000\004\003\164\001\001" +
    "\000\004\003\163\001\001\000\004\003\162\001\001\000" +
    "\004\003\161\001\001\000\004\003\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\201\003\140\015\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\204\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\207\003\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\213\003\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\226\003" +
    "\140\001\001\000\002\001\001\000\006\002\230\003\140" +
    "\001\001\000\002\001\001\000\006\002\232\003\140\001" +
    "\001\000\002\001\001\000\006\002\234\003\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\240\003\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\244\003\140\001" +
    "\001\000\002\001\001\000\006\002\246\003\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\252\003\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\263\003\140\001\001\000\002\001" +
    "\001\000\006\002\265\003\140\001\001\000\002\001\001" +
    "\000\006\002\267\003\140\001\001\000\002\001\001\000" +
    "\004\026\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\065\013\116\014\120\016\106\023\274\024" +
    "\112\027\066\032\114\033\071\034\072\035\075\036\107" +
    "\037\070\040\102\041\063\042\076\043\110\044\113\001" +
    "\001\000\044\004\065\013\315\014\277\016\311\024\304" +
    "\027\313\032\316\033\303\034\306\035\300\036\310\037" +
    "\312\040\305\041\301\042\314\043\302\044\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\324\003\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\327\003\140\001\001\000\002\001\001\000" +
    "\006\002\331\003\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\335\003\140\001" +
    "\001\000\002\001\001\000\006\002\337\003\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\343\003\140\001\001\000\002\001\001\000\006" +
    "\002\345\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\351\003\140\001\001" +
    "\000\002\001\001\000\006\002\353\003\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\357\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\065\013\116\014\120\016\106\023\362" +
    "\024\112\027\066\032\114\033\071\034\072\035\075\036" +
    "\107\037\070\040\102\041\063\042\076\043\110\044\113" +
    "\001\001\000\044\004\065\013\315\014\277\016\311\024" +
    "\304\027\313\032\316\033\303\034\306\035\300\036\310" +
    "\037\312\040\305\041\301\042\314\043\302\044\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\366" +
    "\003\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\065\013\116\014\120\016\106\023\371\024\112" +
    "\027\066\032\114\033\071\034\072\035\075\036\107\037" +
    "\070\040\102\041\063\042\076\043\110\044\113\001\001" +
    "\000\044\004\065\013\315\014\277\016\311\024\304\027" +
    "\313\032\316\033\303\034\306\035\300\036\310\037\312" +
    "\040\305\041\301\042\314\043\302\044\307\001\001\000" +
    "\006\030\375\031\374\001\001\000\002\001\001\000\004" +
    "\030\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\065\013\116" +
    "\014\120\016\106\023\u0102\024\112\027\066\032\114\033" +
    "\071\034\072\035\075\036\107\037\070\040\102\041\063" +
    "\042\076\043\110\044\113\001\001\000\044\004\065\013" +
    "\315\014\277\016\311\024\304\027\313\032\316\033\303" +
    "\034\306\035\300\036\310\037\312\040\305\041\301\042" +
    "\314\043\302\044\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\u0106\003\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\065\013\116\014\120" +
    "\016\106\023\u0109\024\112\027\066\032\114\033\071\034" +
    "\072\035\075\036\107\037\070\040\102\041\063\042\076" +
    "\043\110\044\113\001\001\000\044\004\065\013\315\014" +
    "\277\016\311\024\304\027\313\032\316\033\303\034\306" +
    "\035\300\036\310\037\312\040\305\041\301\042\314\043" +
    "\302\044\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u010e\003\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\065\013\116" +
    "\014\120\016\106\023\u0111\024\112\027\066\032\114\033" +
    "\071\034\072\035\075\036\107\037\070\040\102\041\063" +
    "\042\076\043\110\044\113\001\001\000\044\004\065\013" +
    "\315\014\277\016\311\024\304\027\313\032\316\033\303" +
    "\034\306\035\300\036\310\037\312\040\305\041\301\042" +
    "\314\043\302\044\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\u0116\031\u0115\001\001\000\004\030" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u0129\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\201\003\140\015\u011e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\u0126\003" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\u012f" +
    "\003\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\065\013\116\014\120\016\106\023\u0139" +
    "\024\112\027\066\032\114\033\071\034\072\035\075\036" +
    "\107\037\070\040\102\041\063\042\076\043\110\044\113" +
    "\001\001\000\044\004\065\013\315\014\277\016\311\024" +
    "\304\027\313\032\316\033\303\034\306\035\300\036\310" +
    "\037\312\040\305\041\301\042\314\043\302\044\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u0144\003\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\065\013\116" +
    "\014\120\016\106\023\u014f\024\112\027\066\032\114\033" +
    "\071\034\072\035\075\036\107\037\070\040\102\041\063" +
    "\042\076\043\110\044\113\001\001\000\044\004\065\013" +
    "\315\014\277\016\311\024\304\027\313\032\316\033\303" +
    "\034\306\035\300\036\310\037\312\040\305\041\301\042" +
    "\314\043\302\044\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\055\022\u0156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\065\013\116\014\120\016" +
    "\106\023\u0159\024\112\027\066\032\114\033\071\034\072" +
    "\035\075\036\107\037\070\040\102\041\063\042\076\043" +
    "\110\044\113\001\001\000\044\004\065\013\315\014\277" +
    "\016\311\024\304\027\313\032\316\033\303\034\306\035" +
    "\300\036\310\037\312\040\305\041\301\042\314\043\302" +
    "\044\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\065\013\116\014\120\016\106\023\u015d\024\112" +
    "\027\066\032\114\033\071\034\072\035\075\036\107\037" +
    "\070\040\102\041\063\042\076\043\110\044\113\001\001" +
    "\000\044\004\065\013\315\014\277\016\311\024\304\027" +
    "\313\032\316\033\303\034\306\035\300\036\310\037\312" +
    "\040\305\041\301\042\314\043\302\044\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\031\007\u0163\013\u0164" +
    "\017\u0161\020\u0165\021\u0162\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= nulo 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ValorNulo i = new ValorNulo(auxright, auxleft, ArchivoOrigen);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= identificador punto identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        AccesoMiembroSimple i = new AccesoMiembroSimple(idright, idleft, ArchivoOrigen, id, id2);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= identificador oParent cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
        ArrayList<Expresion> parametros = new ArrayList<>();
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= identificador oParent L_EXPRE cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        ArrayList<Expresion> parametros = (ArrayList<Expresion>)lista;
        if(parametros == null) {parametros = new ArrayList<>();}
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //

        Character real = val.charAt(1);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e; 
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.NOT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUN_LINEA ::= linea oParent EXP coma EXP coma EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posxf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posyf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int grosorleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int grosorright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object grosor = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                Expresion xf = (Expresion)posxf;
                Expresion yf = (Expresion)posyf;
                String color = (String)col;
                Expresion g = (Expresion)grosor;
                Linea i = new Linea(auxright, auxleft, ArchivoOrigen, x, y, xf, yf, color, g);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_LINEA",33, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUN_CADENA ::= cadena oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion cad = (Expresion)str;
                Cadena i = new Cadena(auxright, auxleft, ArchivoOrigen, x, y, color, cad);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CADENA",34, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUN_OVALO ::= ovalo oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Ovalo i = new Ovalo(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_OVALO",32, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUN_CUADRADO ::= cuadrado oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Cuadrado i = new Cuadrado(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CUADRADO",31, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUN_PUNTO ::= point oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int diametroleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int diametroright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object diametro = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion d = (Expresion)diametro;
                Punto i = new Punto(auxright, auxleft, ArchivoOrigen, x, y, color, d);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_PUNTO",30, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIGNACION_VAR ::= identificador asigna error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'= Expresion'");
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNACION_VAR ::= identificador punto identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionMiembroSimple i = new AsignacionMiembroSimple(idright, idleft, ArchivoOrigen, id, id2, e);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F_IMPRIMIR ::= imprimir oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion exp = (Expresion)nodo;
                Imprimir i = new Imprimir(auxright, auxleft, ArchivoOrigen, exp);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("F_IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BREAK ::= detener ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Detener i = new Detener(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BREAK",28, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTINUE ::= continuar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Continuar i = new Continuar(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",27, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            RESULT = id;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= booleano 
            {
              Object RESULT =null;
		
            RESULT = "BOOLEAN";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO ::= caracter 
            {
              Object RESULT =null;
		
            RESULT = "CARACTER";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= cadena 
            {
              Object RESULT =null;
		
            RESULT = "CADENA";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= decimal 
            {
              Object RESULT =null;
		
            RESULT = "DECIMAL";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= entero 
            {
              Object RESULT =null;
		
            RESULT = "ENTERO";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // L_EXPRE ::= EXP 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = new ArrayList<>();
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // L_EXPRE ::= L_EXPRE coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null){exp = new ArrayList<>();}
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAMADA ::= identificador oParent L_EXPRE cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null) { exp = new ArrayList<>();}
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLAMADA ::= identificador oParent cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Expresion> exp = new ArrayList<>();
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR_ACTUALIZACION ::= identificador dec cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                    SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR_ACTUALIZACION ::= identificador inc cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                   SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                   RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR_ACTUALIZACION ::= identificador asigna EXP cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)nodo;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR_INIT ::= oParent identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion e = (Expresion)nodo;
                AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                RESULT = a;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR_INIT ::= oParent TIPO identificador asigna EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                String tipo = (String)t;
                DeclaracionVar d = new DeclaracionVar(idright, idleft, ArchivoOrigen, nodos,tipo);
                RESULT = d;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = new ArrayList<>();
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                if(sentencias==null){sentencias = new ArrayList<>();}
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENT_AUM_DEC ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENT_AUM_DEC ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                    if(sentencias == null){sentencias = new ArrayList<>();}
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = new ArrayList<>();
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SINO ::= sino oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SINO ::= sino oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SINO_SI ::= sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SINO_SI ::= sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENT_SI ::= si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RETORNA ::= retornar EXP ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETORNA ::= retornar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, null);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MIEMBROS ::= TIPO identificador ptComa 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen,t, id, 1);
                ArrayList<NodoMiembro> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MIEMBROS ::= MIEMBROS TIPO identificador ptComa 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
                if(nodos == null){nodos = new ArrayList<>();}
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, nodos.size()+1);
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRUCT ::= estructura identificador oKey MIEMBROS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
            if(nodos==null){nodos = new ArrayList<>();}
            DeclaracionStruct n = new DeclaracionStruct(idright, idleft, ArchivoOrigen, nodos, id);
            RESULT = n;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("STRUCT",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCIONES ::= TIPO identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCIONES ::= TIPO identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCIONES ::= TIPO identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODOS ::= vacio identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODOS ::= vacio identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METODOS ::= vacio identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MAIN ::= vacio principal error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MAIN ::= vacio principal oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MAIN ::= vacio principal oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= F_IMPRIMIR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= CONTINUE 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= BREAK 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= SENT_FOR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= SENT_AUM_DEC 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= SENT_MIENTRAS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= SENT_SI 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= RETORNA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= LLAMADA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= FUN_LINEA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= FUN_CADENA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= FUN_OVALO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= FUN_CUADRADO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= FUN_PUNTO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS FUN_LINEA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENTENCIAS FUN_CADENA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS FUN_OVALO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS FUN_CUADRADO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS FUN_PUNTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS F_IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS CONTINUE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS BREAK 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS SENT_AUM_DEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS SENT_MIENTRAS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS SENT_SI 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS RETORNA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS LLAMADA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES ::= FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES ::= METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACIONES STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORTAR ::= importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORTAR ::= L_IMPORTAR importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= NT$1 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 L_IMPORTAR DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

