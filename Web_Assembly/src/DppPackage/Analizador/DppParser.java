
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 08 23:55:34 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 08 23:55:34 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\011\002\000\002\006" +
    "\004\000\002\007\004\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\005\000\002\005\007\000\002\005\003\000\002\005" +
    "\005\000\002\005\005\000\002\002\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\014\033\000\034\000\035\000\036\000\037" +
    "\000\001\002\000\014\033\013\034\010\035\012\036\016" +
    "\037\011\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\016\002\uffff\033\013\034\010\035\012" +
    "\036\016\037\011\001\002\000\006\003\ufff9\045\ufff9\001" +
    "\002\000\006\003\ufff6\045\ufff6\001\002\000\006\003\ufff8" +
    "\045\ufff8\001\002\000\006\003\ufffa\045\ufffa\001\002\000" +
    "\006\003\020\045\021\001\002\000\016\002\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\001\002\000\006\003" +
    "\ufff7\045\ufff7\001\002\000\006\004\102\010\103\001\002" +
    "\000\004\004\101\001\002\000\012\003\023\004\ufff3\005" +
    "\022\010\ufff3\001\002\000\026\006\025\014\033\032\027" +
    "\034\031\040\034\041\032\042\036\043\030\044\026\046" +
    "\035\001\002\000\004\004\024\001\002\000\006\004\ufff1" +
    "\010\ufff1\001\002\000\026\006\025\014\033\032\027\034" +
    "\031\040\034\041\032\042\036\043\030\044\026\046\035" +
    "\001\002\000\046\004\uffda\007\uffda\010\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\001\002\000\026\006\025\014\033\032\027\034\031" +
    "\040\034\041\032\042\036\043\030\044\026\046\035\001" +
    "\002\000\046\004\uffdb\007\uffdb\010\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\001\002\000\046\004\uffdc\007\uffdc\010\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\001\002\000\046\004\uffd7\007\uffd7\010\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\001\002\000\026\006\025\014\033\032\027\034" +
    "\031\040\034\041\032\042\036\043\030\044\026\046\035" +
    "\001\002\000\046\004\uffd8\007\uffd8\010\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\001\002\000\046\004\uffd9\007\uffd9\010\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\001\002\000\046\004\uffdd\007\uffdd\010\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\001\002\000\006\004\ufff2\010\ufff2\001\002" +
    "\000\044\004\ufff0\010\ufff0\013\056\014\050\015\045\016" +
    "\041\017\052\020\042\021\043\022\057\023\053\024\051" +
    "\025\055\026\054\027\044\030\047\031\046\001\002\000" +
    "\026\006\025\014\033\032\027\034\031\040\034\041\032" +
    "\042\036\043\030\044\026\046\035\001\002\000\046\004" +
    "\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\001\002\000\046" +
    "\004\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000" +
    "\026\006\025\014\033\032\027\034\031\040\034\041\032" +
    "\042\036\043\030\044\026\046\035\001\002\000\026\006" +
    "\025\014\033\032\027\034\031\040\034\041\032\042\036" +
    "\043\030\044\026\046\035\001\002\000\026\006\025\014" +
    "\033\032\027\034\031\040\034\041\032\042\036\043\030" +
    "\044\026\046\035\001\002\000\026\006\025\014\033\032" +
    "\027\034\031\040\034\041\032\042\036\043\030\044\026" +
    "\046\035\001\002\000\026\006\025\014\033\032\027\034" +
    "\031\040\034\041\032\042\036\043\030\044\026\046\035" +
    "\001\002\000\026\006\025\014\033\032\027\034\031\040" +
    "\034\041\032\042\036\043\030\044\026\046\035\001\002" +
    "\000\026\006\025\014\033\032\027\034\031\040\034\041" +
    "\032\042\036\043\030\044\026\046\035\001\002\000\026" +
    "\006\025\014\033\032\027\034\031\040\034\041\032\042" +
    "\036\043\030\044\026\046\035\001\002\000\026\006\025" +
    "\014\033\032\027\034\031\040\034\041\032\042\036\043" +
    "\030\044\026\046\035\001\002\000\026\006\025\014\033" +
    "\032\027\034\031\040\034\041\032\042\036\043\030\044" +
    "\026\046\035\001\002\000\026\006\025\014\033\032\027" +
    "\034\031\040\034\041\032\042\036\043\030\044\026\046" +
    "\035\001\002\000\026\006\025\014\033\032\027\034\031" +
    "\040\034\041\032\042\036\043\030\044\026\046\035\001" +
    "\002\000\046\004\uffea\007\uffea\010\uffea\013\056\014\050" +
    "\015\045\016\041\017\052\020\042\021\043\022\uffea\023" +
    "\uffea\024\051\025\055\026\054\027\044\030\uffea\031\uffea" +
    "\001\002\000\046\004\uffef\007\uffef\010\uffef\013\uffef\014" +
    "\uffef\015\045\016\041\017\052\020\042\021\043\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\001\002\000\046\004\uffe7\007\uffe7\010\uffe7\013\056" +
    "\014\050\015\045\016\041\017\052\020\042\021\043\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\001\002\000\046\004\uffe5\007\uffe5\010\uffe5\013" +
    "\056\014\050\015\045\016\041\017\052\020\042\021\043" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\001\002\000\046\004\uffe9\007\uffe9\010\uffe9" +
    "\013\056\014\050\015\045\016\041\017\052\020\042\021" +
    "\043\022\uffe9\023\uffe9\024\051\025\055\026\054\027\044" +
    "\030\uffe9\031\uffe9\001\002\000\046\004\uffeb\007\uffeb\010" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\042" +
    "\021\043\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\001\002\000\046\004\uffe8\007\uffe8" +
    "\010\uffe8\013\056\014\050\015\045\016\041\017\052\020" +
    "\042\021\043\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\001\002\000\046\004\uffee\007" +
    "\uffee\010\uffee\013\uffee\014\uffee\015\045\016\041\017\052" +
    "\020\042\021\043\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\001\002\000\046\004\uffe4" +
    "\007\uffe4\010\uffe4\013\056\014\050\015\045\016\041\017" +
    "\052\020\042\021\043\022\057\023\053\024\051\025\055" +
    "\026\054\027\044\030\uffe4\031\uffe4\001\002\000\046\004" +
    "\uffe3\007\uffe3\010\uffe3\013\056\014\050\015\045\016\041" +
    "\017\052\020\042\021\043\022\057\023\053\024\051\025" +
    "\055\026\054\027\044\030\047\031\uffe3\001\002\000\046" +
    "\004\uffed\007\uffed\010\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\052\020\042\021\043\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\001\002\000" +
    "\046\004\uffe6\007\uffe6\010\uffe6\013\056\014\050\015\045" +
    "\016\041\017\052\020\042\021\043\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\001\002" +
    "\000\046\004\uffec\007\uffec\010\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\052\020\042\021\043\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\001" +
    "\002\000\046\004\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1" +
    "\015\045\016\041\017\052\020\042\021\043\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\001\002\000\046\004\uffe2\007\uffe2\010\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\042\021\043\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\001\002\000\042\007\100\013\056\014\050\015\045" +
    "\016\041\017\052\020\042\021\043\022\057\023\053\024" +
    "\051\025\055\026\054\027\044\030\047\031\046\001\002" +
    "\000\046\004\uffde\007\uffde\010\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\001" +
    "\002\000\016\002\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\001\002\000\016\002\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\001\002\000\004\045\104\001\002" +
    "\000\010\004\ufff5\005\105\010\ufff5\001\002\000\026\006" +
    "\025\014\033\032\027\034\031\040\034\041\032\042\036" +
    "\043\030\044\026\046\035\001\002\000\006\004\ufff4\010" +
    "\ufff4\001\002\000\016\002\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\006\004\011\003\001\001\000\010\004" +
    "\013\007\006\010\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\013\010\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\036\003\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\076\001\001\000\002\001\001" +
    "\000\004\003\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\072\001\001\000" +
    "\004\003\071\001\001\000\004\003\070\001\001\000\004" +
    "\003\067\001\001\000\004\003\066\001\001\000\004\003" +
    "\065\001\001\000\004\003\064\001\001\000\004\003\063" +
    "\001\001\000\004\003\062\001\001\000\004\003\061\001" +
    "\001\000\004\003\060\001\001\000\004\003\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\105\003\037\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;


    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= booleano 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= caracter 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= cadena 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= decimal 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= entero 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>();
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

