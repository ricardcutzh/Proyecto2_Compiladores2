
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 24 19:45:56 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;
import DppPackage.DppAST.Sentencias.IF.*;
import DppPackage.DppAST.Sentencias.While.*;
import DppPackage.DppAST.Sentencias.For.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 24 19:45:56 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\036\002\000\002\007" +
    "\005\000\002\037\002\000\002\007\004\000\002\006\010" +
    "\000\002\006\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\020\006\000\002" +
    "\020\004\000\002\015\010\000\002\015\011\000\002\015" +
    "\006\000\002\016\010\000\002\016\011\000\002\016\011" +
    "\000\002\016\012\000\002\016\006\000\002\017\010\000" +
    "\002\017\011\000\002\017\011\000\002\017\012\000\002" +
    "\017\006\000\002\014\004\000\002\014\005\000\002\025" +
    "\010\000\002\025\011\000\002\025\012\000\002\025\013" +
    "\000\002\025\011\000\002\025\012\000\002\025\011\000" +
    "\002\025\012\000\002\027\012\000\002\027\013\000\002" +
    "\027\011\000\002\027\012\000\002\026\005\000\002\026" +
    "\006\000\002\030\010\000\002\030\011\000\002\031\005" +
    "\000\002\031\005\000\002\032\013\000\002\032\012\000" +
    "\002\023\007\000\002\023\006\000\002\024\006\000\002" +
    "\024\005\000\002\024\005\000\002\012\006\000\002\012" +
    "\007\000\002\013\005\000\002\013\003\000\002\011\005" +
    "\000\002\011\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\033\004\000\002\034\004\000\002\035" +
    "\007\000\002\005\005\000\002\005\007\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\022\006\000" +
    "\002\022\006\000\002\002\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\006\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\022\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\042\000\045\ufffe\060\ufffe\001\002\000\020\033\027" +
    "\034\022\035\020\036\024\037\032\045\025\060\033\001" +
    "\002\000\004\042\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\022\033\027\034\022\035" +
    "\020\036\024\037\032\042\030\045\025\060\033\001\002" +
    "\000\004\006\012\001\002\000\004\061\013\001\002\000" +
    "\004\007\014\001\002\000\004\004\015\001\002\000\022" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\045" +
    "\ufffb\060\ufffb\001\002\000\022\002\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\045\ufff5\060\ufff5\001\002\000" +
    "\022\002\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\045\ufff3\060\ufff3\001\002\000\006\003\uffaa\060\uffaa\001" +
    "\002\000\022\002\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\045\ufff6\060\ufff6\001\002\000\006\003\uffab\060" +
    "\uffab\001\002\000\022\002\uffff\033\027\034\022\035\020" +
    "\036\024\037\032\045\025\060\033\001\002\000\006\003" +
    "\uffa9\060\uffa9\001\002\000\006\044\356\060\355\001\002" +
    "\000\022\002\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\045\ufff4\060\ufff4\001\002\000\006\003\uffac\060\uffac" +
    "\001\002\000\004\006\351\001\002\000\006\003\035\060" +
    "\036\001\002\000\006\003\uffa8\060\uffa8\001\002\000\006" +
    "\003\uffa7\060\uffa7\001\002\000\006\004\344\010\345\001" +
    "\002\000\004\004\343\001\002\000\014\003\040\004\uffa1" +
    "\005\037\006\041\010\uffa1\001\002\000\026\006\103\014" +
    "\110\032\106\040\112\041\111\055\114\056\107\057\104" +
    "\060\117\061\113\001\002\000\006\004\264\012\341\001" +
    "\002\000\020\007\043\033\027\034\022\035\020\036\024" +
    "\037\032\060\033\001\002\000\004\060\340\001\002\000" +
    "\004\011\334\001\002\000\006\007\046\010\045\001\002" +
    "\000\016\033\027\034\022\035\020\036\024\037\032\060" +
    "\033\001\002\000\004\011\047\001\002\000\036\012\050" +
    "\033\027\034\022\035\020\036\024\037\032\043\053\046" +
    "\063\047\072\051\057\052\071\053\067\054\056\060\075" +
    "\001\002\000\022\002\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\045\uffd1\060\uffd1\001\002\000\036\012\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\043\uffe5\046" +
    "\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\060\uffe5" +
    "\001\002\000\036\012\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\043\uffde\046\uffde\047\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\060\uffde\001\002\000\004\006\302\001" +
    "\002\000\036\012\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\043\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\060\uffe1\001\002\000\036\012\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\043\uffe6\046\uffe6\047" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\060\uffe6\001\002" +
    "\000\004\006\275\001\002\000\004\006\266\001\002\000" +
    "\036\012\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\043\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\060\uffe0\001\002\000\036\012\265\033\027\034\022" +
    "\035\020\036\024\037\032\043\053\046\063\047\072\051" +
    "\057\052\071\053\067\054\056\060\075\001\002\000\006" +
    "\003\035\060\262\001\002\000\030\004\257\006\103\014" +
    "\110\032\106\040\112\041\111\055\114\056\107\057\104" +
    "\060\117\061\113\001\002\000\036\012\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\043\uffdf\046\uffdf\047\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\060\uffdf\001\002\000" +
    "\036\012\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\043\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\060\uffe4\001\002\000\036\012\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\043\uffdd\046\uffdd\047\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\060\uffdd\001\002\000\004" +
    "\004\256\001\002\000\036\012\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\060\uffe3\001\002\000\004\004" +
    "\255\001\002\000\004\006\177\001\002\000\036\012\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\043\uffe7\046" +
    "\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\060\uffe7" +
    "\001\002\000\036\012\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\043\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\060\uffe2\001\002\000\016\003\uffa7\005" +
    "\076\006\100\020\077\021\101\060\uffa7\001\002\000\030" +
    "\003\173\006\103\014\110\032\106\040\112\041\111\055" +
    "\114\056\107\057\104\060\117\061\113\001\002\000\004" +
    "\004\172\001\002\000\030\006\103\007\115\014\110\032" +
    "\106\040\112\041\111\055\114\056\107\057\104\060\117" +
    "\061\113\001\002\000\004\004\102\001\002\000\036\012" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\043\uffba" +
    "\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba\060" +
    "\uffba\001\002\000\026\006\103\014\110\032\106\040\112" +
    "\041\111\055\114\056\107\057\104\060\117\061\113\001" +
    "\002\000\046\004\uff87\007\uff87\010\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\001\002\000\006\007\166\010\160\001\002\000\026\006" +
    "\103\014\110\032\106\040\112\041\111\055\114\056\107" +
    "\057\104\060\117\061\113\001\002\000\046\004\uff88\007" +
    "\uff88\010\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\001\002\000\026\006\103" +
    "\014\110\032\106\040\112\041\111\055\114\056\107\057" +
    "\104\060\117\061\113\001\002\000\046\004\uff84\007\uff84" +
    "\010\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\001\002\000\046\004\uff85\007" +
    "\uff85\010\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\001\002\000\046\004\uff86" +
    "\007\uff86\010\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\001\002\000\046\004" +
    "\uff89\007\uff89\010\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\001\002\000\004" +
    "\004\163\001\002\000\006\007\uffaf\010\uffaf\001\002\000" +
    "\050\004\uff83\006\155\007\uff83\010\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\001\002\000\046\004\uff9c\007\uff9c\010\uff9c\013\136\014" +
    "\130\015\125\016\121\017\132\020\122\021\123\022\137" +
    "\023\133\024\131\025\135\026\134\027\124\030\127\031" +
    "\126\001\002\000\026\006\103\014\110\032\106\040\112" +
    "\041\111\055\114\056\107\057\104\060\117\061\113\001" +
    "\002\000\046\004\uff8c\007\uff8c\010\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\001\002\000\046\004\uff8b\007\uff8b\010\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\001\002\000\026\006\103\014\110\032\106\040\112" +
    "\041\111\055\114\056\107\057\104\060\117\061\113\001" +
    "\002\000\026\006\103\014\110\032\106\040\112\041\111" +
    "\055\114\056\107\057\104\060\117\061\113\001\002\000" +
    "\026\006\103\014\110\032\106\040\112\041\111\055\114" +
    "\056\107\057\104\060\117\061\113\001\002\000\026\006" +
    "\103\014\110\032\106\040\112\041\111\055\114\056\107" +
    "\057\104\060\117\061\113\001\002\000\026\006\103\014" +
    "\110\032\106\040\112\041\111\055\114\056\107\057\104" +
    "\060\117\061\113\001\002\000\026\006\103\014\110\032" +
    "\106\040\112\041\111\055\114\056\107\057\104\060\117" +
    "\061\113\001\002\000\026\006\103\014\110\032\106\040" +
    "\112\041\111\055\114\056\107\057\104\060\117\061\113" +
    "\001\002\000\026\006\103\014\110\032\106\040\112\041" +
    "\111\055\114\056\107\057\104\060\117\061\113\001\002" +
    "\000\026\006\103\014\110\032\106\040\112\041\111\055" +
    "\114\056\107\057\104\060\117\061\113\001\002\000\026" +
    "\006\103\014\110\032\106\040\112\041\111\055\114\056" +
    "\107\057\104\060\117\061\113\001\002\000\026\006\103" +
    "\014\110\032\106\040\112\041\111\055\114\056\107\057" +
    "\104\060\117\061\113\001\002\000\026\006\103\014\110" +
    "\032\106\040\112\041\111\055\114\056\107\057\104\060" +
    "\117\061\113\001\002\000\046\004\uff96\007\uff96\010\uff96" +
    "\013\136\014\130\015\125\016\121\017\132\020\122\021" +
    "\123\022\uff96\023\uff96\024\131\025\135\026\134\027\124" +
    "\030\uff96\031\uff96\001\002\000\046\004\uff9b\007\uff9b\010" +
    "\uff9b\013\uff9b\014\uff9b\015\125\016\121\017\132\020\122" +
    "\021\123\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\001\002\000\046\004\uff93\007\uff93" +
    "\010\uff93\013\136\014\130\015\125\016\121\017\132\020" +
    "\122\021\123\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\uff93\001\002\000\046\004\uff91\007" +
    "\uff91\010\uff91\013\136\014\130\015\125\016\121\017\132" +
    "\020\122\021\123\022\uff91\023\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\001\002\000\046\004\uff95" +
    "\007\uff95\010\uff95\013\136\014\130\015\125\016\121\017" +
    "\132\020\122\021\123\022\uff95\023\uff95\024\131\025\135" +
    "\026\134\027\124\030\uff95\031\uff95\001\002\000\046\004" +
    "\uff97\007\uff97\010\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\020\122\021\123\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\001\002\000\046" +
    "\004\uff94\007\uff94\010\uff94\013\136\014\130\015\125\016" +
    "\121\017\132\020\122\021\123\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\001\002\000" +
    "\046\004\uff9a\007\uff9a\010\uff9a\013\uff9a\014\uff9a\015\125" +
    "\016\121\017\132\020\122\021\123\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\001\002" +
    "\000\046\004\uff90\007\uff90\010\uff90\013\136\014\130\015" +
    "\125\016\121\017\132\020\122\021\123\022\137\023\133" +
    "\024\131\025\135\026\134\027\124\030\uff90\031\uff90\001" +
    "\002\000\046\004\uff8f\007\uff8f\010\uff8f\013\136\014\130" +
    "\015\125\016\121\017\132\020\122\021\123\022\137\023" +
    "\133\024\131\025\135\026\134\027\124\030\127\031\uff8f" +
    "\001\002\000\046\004\uff99\007\uff99\010\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\132\020\122\021\123\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\001\002\000\046\004\uff92\007\uff92\010\uff92\013\136" +
    "\014\130\015\125\016\121\017\132\020\122\021\123\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\001\002\000\046\004\uff98\007\uff98\010\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\132\020\122\021\123" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\001\002\000\030\006\103\007\157\014\110" +
    "\032\106\040\112\041\111\055\114\056\107\057\104\060" +
    "\117\061\113\001\002\000\006\007\161\010\160\001\002" +
    "\000\046\004\uff81\007\uff81\010\uff81\013\uff81\014\uff81\015" +
    "\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\001" +
    "\002\000\026\006\103\014\110\032\106\040\112\041\111" +
    "\055\114\056\107\057\104\060\117\061\113\001\002\000" +
    "\046\004\uff82\007\uff82\010\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024" +
    "\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\001\002" +
    "\000\006\007\uffb0\010\uffb0\001\002\000\036\012\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\043\uffb2\046\uffb2" +
    "\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\060\uffb2\001" +
    "\002\000\046\004\uff8d\007\uff8d\010\uff8d\013\uff8d\014\uff8d" +
    "\015\125\016\121\017\132\020\122\021\123\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\001\002\000\046\004\uff8e\007\uff8e\010\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\122\021\123\022\uff8e" +
    "\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\001\002\000\004\004\167\001\002\000\036\012\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1\046" +
    "\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\060\uffb1" +
    "\001\002\000\042\007\171\013\136\014\130\015\125\016" +
    "\121\017\132\020\122\021\123\022\137\023\133\024\131" +
    "\025\135\026\134\027\124\030\127\031\126\001\002\000" +
    "\046\004\uff8a\007\uff8a\010\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\001\002" +
    "\000\036\012\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\043\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\060\uffbb\001\002\000\004\004\176\001\002\000" +
    "\004\004\175\001\002\000\036\012\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\043\uff9e\046\uff9e\047\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\060\uff9e\001\002\000\036" +
    "\012\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\043" +
    "\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\060\uff9d\001\002\000\026\006\103\014\110\032\106\040" +
    "\112\041\111\055\114\056\107\057\104\060\117\061\113" +
    "\001\002\000\004\007\201\001\002\000\004\011\202\001" +
    "\002\000\036\012\203\033\027\034\022\035\020\036\024" +
    "\037\032\043\053\046\063\047\072\051\057\052\071\053" +
    "\067\054\056\060\075\001\002\000\040\012\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\043\uffcb\046\uffcb\047" +
    "\uffcb\050\221\051\uffcb\052\uffcb\053\uffcb\054\uffcb\060\uffcb" +
    "\001\002\000\036\012\205\033\027\034\022\035\020\036" +
    "\024\037\032\043\053\046\063\047\072\051\057\052\071" +
    "\053\067\054\056\060\075\001\002\000\040\012\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\043\uffca\046\uffca" +
    "\047\uffca\050\221\051\uffca\052\uffca\053\uffca\054\uffca\060" +
    "\uffca\001\002\000\036\012\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\043\ufff0\046\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\060\ufff0\001\002\000\036\012\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\043\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\060\uffe9" +
    "\001\002\000\036\012\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\043\uffec\046\uffec\047\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\060\uffec\001\002\000\036\012\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\043\ufff1\046\ufff1" +
    "\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\060\ufff1\001" +
    "\002\000\036\012\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\043\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\060\uffeb\001\002\000\036\012\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\043\uffef\046\uffef\047" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\060\uffef\001\002" +
    "\000\036\012\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\043\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\060\uffea\001\002\000\036\012\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\043\uffe8\046\uffe8\047\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\060\uffe8\001\002\000" +
    "\036\012\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\043\uffee\046\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\060\uffee\001\002\000\036\012\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\043\ufff2\046\ufff2\047\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\060\ufff2\001\002\000\036" +
    "\012\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\043" +
    "\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\060\uffed\001\002\000\006\011\227\047\242\001\002\000" +
    "\040\012\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\043\uffc6\046\uffc6\047\uffc6\050\224\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\060\uffc6\001\002\000\036\012\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\043\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\060\uffc4\001\002" +
    "\000\006\011\227\047\226\001\002\000\036\012\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\043\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\060\uffc8\001" +
    "\002\000\004\006\233\001\002\000\036\012\230\033\027" +
    "\034\022\035\020\036\024\037\032\043\053\046\063\047" +
    "\072\051\057\052\071\053\067\054\056\060\075\001\002" +
    "\000\036\012\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\043\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\060\uffbf\001\002\000\036\012\232\033\027\034" +
    "\022\035\020\036\024\037\032\043\053\046\063\047\072" +
    "\051\057\052\071\053\067\054\056\060\075\001\002\000" +
    "\036\012\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\043\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\060\uffbe\001\002\000\026\006\103\014\110\032\106" +
    "\040\112\041\111\055\114\056\107\057\104\060\117\061" +
    "\113\001\002\000\004\007\235\001\002\000\004\011\236" +
    "\001\002\000\036\012\237\033\027\034\022\035\020\036" +
    "\024\037\032\043\053\046\063\047\072\051\057\052\071" +
    "\053\067\054\056\060\075\001\002\000\040\012\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\043\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\060" +
    "\uffc3\001\002\000\036\012\241\033\027\034\022\035\020" +
    "\036\024\037\032\043\053\046\063\047\072\051\057\052" +
    "\071\053\067\054\056\060\075\001\002\000\040\012\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\043\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\060\uffc2\001\002\000\004\006\243\001\002\000\026\006" +
    "\103\014\110\032\106\040\112\041\111\055\114\056\107" +
    "\057\104\060\117\061\113\001\002\000\004\007\245\001" +
    "\002\000\004\011\246\001\002\000\036\012\247\033\027" +
    "\034\022\035\020\036\024\037\032\043\053\046\063\047" +
    "\072\051\057\052\071\053\067\054\056\060\075\001\002" +
    "\000\040\012\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\043\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\060\uffc1\001\002\000\036\012\251\033" +
    "\027\034\022\035\020\036\024\037\032\043\053\046\063" +
    "\047\072\051\057\052\071\053\067\054\056\060\075\001" +
    "\002\000\040\012\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\043\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\060\uffc0\001\002\000\040\012\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\043\uffc7\046" +
    "\uffc7\047\uffc7\050\224\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\060\uffc7\001\002\000\036\012\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\043\uffc5\046\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\060\uffc5\001\002\000\036\012" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\043\uffc9" +
    "\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\060" +
    "\uffc9\001\002\000\036\012\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\043\uffa5\046\uffa5\047\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\060\uffa5\001\002\000\036\012\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\043\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\060\uffa6" +
    "\001\002\000\036\012\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\043\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\060\uffcd\001\002\000\004\004\261\001" +
    "\002\000\036\012\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\043\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\060\uffcc\001\002\000\012\003\263\004\uffa1" +
    "\005\037\010\uffa1\001\002\000\004\004\264\001\002\000" +
    "\006\004\uff9f\010\uff9f\001\002\000\022\002\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\045\uffcf\060\uffcf\001" +
    "\002\000\026\006\103\014\110\032\106\040\112\041\111" +
    "\055\114\056\107\057\104\060\117\061\113\001\002\000" +
    "\004\007\270\001\002\000\004\011\271\001\002\000\036" +
    "\012\272\033\027\034\022\035\020\036\024\037\032\043" +
    "\053\046\063\047\072\051\057\052\071\053\067\054\056" +
    "\060\075\001\002\000\036\012\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\043\uffbd\046\uffbd\047\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\060\uffbd\001\002\000\036\012" +
    "\274\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\036\012\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\043\uffbc\046\uffbc\047\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\060\uffbc\001\002\000\026\006\103" +
    "\014\110\032\106\040\112\041\111\055\114\056\107\057" +
    "\104\060\117\061\113\001\002\000\004\007\277\001\002" +
    "\000\004\004\300\001\002\000\036\012\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\043\uffa4\046\uffa4\047\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\060\uffa4\001\002\000" +
    "\004\004\312\001\002\000\016\033\027\034\022\035\020" +
    "\036\024\037\032\060\303\001\002\000\006\005\310\060" +
    "\uffa7\001\002\000\004\060\305\001\002\000\004\005\306" +
    "\001\002\000\026\006\103\014\110\032\106\040\112\041" +
    "\111\055\114\056\107\057\104\060\117\061\113\001\002" +
    "\000\004\004\uffb7\001\002\000\026\006\103\014\110\032" +
    "\106\040\112\041\111\055\114\056\107\057\104\060\117" +
    "\061\113\001\002\000\004\004\uffb6\001\002\000\026\006" +
    "\103\014\110\032\106\040\112\041\111\055\114\056\107" +
    "\057\104\060\117\061\113\001\002\000\004\004\314\001" +
    "\002\000\004\060\315\001\002\000\010\005\323\020\324" +
    "\021\325\001\002\000\004\011\317\001\002\000\036\012" +
    "\320\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\036\012\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\043\uffb8\046\uffb8\047\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\060\uffb8\001\002\000\036\012\322" +
    "\033\027\034\022\035\020\036\024\037\032\043\053\046" +
    "\063\047\072\051\057\052\071\053\067\054\056\060\075" +
    "\001\002\000\036\012\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\043\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\060\uffb9\001\002\000\026\006\103\014" +
    "\110\032\106\040\112\041\111\055\114\056\107\057\104" +
    "\060\117\061\113\001\002\000\004\007\327\001\002\000" +
    "\004\007\326\001\002\000\004\011\uffb3\001\002\000\004" +
    "\011\uffb4\001\002\000\004\007\331\001\002\000\004\011" +
    "\uffb5\001\002\000\004\060\333\001\002\000\006\007\uffdc" +
    "\010\uffdc\001\002\000\036\012\335\033\027\034\022\035" +
    "\020\036\024\037\032\043\053\046\063\047\072\051\057" +
    "\052\071\053\067\054\056\060\075\001\002\000\022\002" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\045\uffd2" +
    "\060\uffd2\001\002\000\036\012\337\033\027\034\022\035" +
    "\020\036\024\037\032\043\053\046\063\047\072\051\057" +
    "\052\071\053\067\054\056\060\075\001\002\000\022\002" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\045\uffd0" +
    "\060\uffd0\001\002\000\006\007\uffdb\010\uffdb\001\002\000" +
    "\022\002\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\045\uffce\060\uffce\001\002\000\006\004\uffa0\010\uffa0\001" +
    "\002\000\042\002\uffad\012\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\043\uffad\045\uffad\046\uffad\047\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\060\uffad\001\002\000\042" +
    "\002\uffae\012\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\043\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\060\uffae\001\002\000\004\060\346\001" +
    "\002\000\010\004\uffa3\005\347\010\uffa3\001\002\000\026" +
    "\006\103\014\110\032\106\040\112\041\111\055\114\056" +
    "\107\057\104\060\117\061\113\001\002\000\006\004\uffa2" +
    "\010\uffa2\001\002\000\004\061\352\001\002\000\004\007" +
    "\353\001\002\000\004\004\354\001\002\000\022\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\042\ufffc\045\ufffc\060" +
    "\ufffc\001\002\000\006\003\367\006\370\001\002\000\006" +
    "\003\357\006\360\001\002\000\004\012\366\001\002\000" +
    "\004\007\361\001\002\000\004\011\362\001\002\000\036" +
    "\012\363\033\027\034\022\035\020\036\024\037\032\043" +
    "\053\046\063\047\072\051\057\052\071\053\067\054\056" +
    "\060\075\001\002\000\022\002\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\045\uffda\060\uffda\001\002\000\036" +
    "\012\365\033\027\034\022\035\020\036\024\037\032\043" +
    "\053\046\063\047\072\051\057\052\071\053\067\054\056" +
    "\060\075\001\002\000\022\002\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\045\uffd9\060\uffd9\001\002\000\022" +
    "\002\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\045" +
    "\uffd8\060\uffd8\001\002\000\004\012\u0104\001\002\000\020" +
    "\007\371\033\027\034\022\035\020\036\024\037\032\060" +
    "\033\001\002\000\004\011\u0100\001\002\000\006\007\373" +
    "\010\045\001\002\000\004\011\374\001\002\000\036\012" +
    "\375\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\022\002\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\045\uffd6\060\uffd6\001\002\000\036\012" +
    "\377\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\022\002\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\045\uffd4\060\uffd4\001\002\000\036\012" +
    "\u0101\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\022\002\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\045\uffd7\060\uffd7\001\002\000\036\012" +
    "\u0103\033\027\034\022\035\020\036\024\037\032\043\053" +
    "\046\063\047\072\051\057\052\071\053\067\054\056\060" +
    "\075\001\002\000\022\002\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\045\uffd5\060\uffd5\001\002\000\022\002" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\045\uffd3" +
    "\060\uffd3\001\002\000\022\002\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\045\ufff9\060\ufff9\001\002\000\022" +
    "\002\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\045" +
    "\ufff7\060\ufff7\001\002\000\022\002\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\045\ufffa\060\ufffa\001\002\000" +
    "\022\002\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\045\ufff8\060\ufff8\001\002\000\022\002\ufffd\033\027\034" +
    "\022\035\020\036\024\037\032\045\025\060\033\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\010\007\005\036\004\037\003\001\001\000" +
    "\016\004\030\010\u0108\011\020\015\015\016\025\017\016" +
    "\001\001\000\004\006\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\030\010\022\011\020\015\015" +
    "\016\025\017\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\030\011\u0106" +
    "\015\u0104\016\u0107\017\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\341\003\117\001\001\000\002\001" +
    "\001\000\006\004\041\020\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\331\001" +
    "\001\000\002\001\001\000\034\004\061\011\072\012\050" +
    "\014\064\021\060\022\054\025\067\030\073\031\053\032" +
    "\057\033\051\034\063\035\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\061\011" +
    "\216\012\205\014\212\022\210\025\215\030\217\031\207" +
    "\032\211\033\206\034\213\035\214\001\001\000\004\005" +
    "\033\001\001\000\006\002\257\003\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\173\003\117\001\001\000\002\001\001\000\010" +
    "\002\115\003\117\013\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\164\001\001\000\002\001" +
    "\001\000\004\003\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\152\001\001\000\004\003\151\001\001" +
    "\000\004\003\150\001\001\000\004\003\147\001\001\000" +
    "\004\003\146\001\001\000\004\003\145\001\001\000\004" +
    "\003\144\001\001\000\004\003\143\001\001\000\004\003" +
    "\142\001\001\000\004\003\141\001\001\000\004\003\140" +
    "\001\001\000\004\003\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\115\003" +
    "\117\013\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\161\003\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\177\003\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\061\011\072\012\050\014\064\021" +
    "\203\022\054\025\067\030\073\031\053\032\057\033\051" +
    "\034\063\035\065\001\001\000\006\026\252\027\251\001" +
    "\001\000\032\004\061\011\216\012\205\014\212\022\210" +
    "\025\215\030\217\031\207\032\211\033\206\034\213\035" +
    "\214\001\001\000\006\026\222\027\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\061\011\072\012\050\014\064" +
    "\021\230\022\054\025\067\030\073\031\053\032\057\033" +
    "\051\034\063\035\065\001\001\000\002\001\001\000\032" +
    "\004\061\011\216\012\205\014\212\022\210\025\215\030" +
    "\217\031\207\032\211\033\206\034\213\035\214\001\001" +
    "\000\002\001\001\000\006\002\233\003\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\061\011\072" +
    "\012\050\014\064\021\237\022\054\025\067\030\073\031" +
    "\053\032\057\033\051\034\063\035\065\001\001\000\002" +
    "\001\001\000\032\004\061\011\216\012\205\014\212\022" +
    "\210\025\215\030\217\031\207\032\211\033\206\034\213" +
    "\035\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\243\003\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\061\011\072\012\050\014\064\021" +
    "\247\022\054\025\067\030\073\031\053\032\057\033\051" +
    "\034\063\035\065\001\001\000\002\001\001\000\032\004" +
    "\061\011\216\012\205\014\212\022\210\025\215\030\217" +
    "\031\207\032\211\033\206\034\213\035\214\001\001\000" +
    "\002\001\001\000\004\026\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\266\003\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\061\011\072\012\050\014" +
    "\064\021\272\022\054\025\067\030\073\031\053\032\057" +
    "\033\051\034\063\035\065\001\001\000\002\001\001\000" +
    "\032\004\061\011\216\012\205\014\212\022\210\025\215" +
    "\030\217\031\207\032\211\033\206\034\213\035\214\001" +
    "\001\000\002\001\001\000\006\002\275\003\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\306\003" +
    "\117\001\001\000\002\001\001\000\006\002\310\003\117" +
    "\001\001\000\002\001\001\000\006\002\312\003\117\001" +
    "\001\000\002\001\001\000\004\024\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\061\011\072\012" +
    "\050\014\064\021\320\022\054\025\067\030\073\031\053" +
    "\032\057\033\051\034\063\035\065\001\001\000\002\001" +
    "\001\000\032\004\061\011\216\012\205\014\212\022\210" +
    "\025\215\030\217\031\207\032\211\033\206\034\213\035" +
    "\214\001\001\000\002\001\001\000\006\002\327\003\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\061\011" +
    "\072\012\050\014\064\021\335\022\054\025\067\030\073" +
    "\031\053\032\057\033\051\034\063\035\065\001\001\000" +
    "\002\001\001\000\032\004\061\011\216\012\205\014\212" +
    "\022\210\025\215\030\217\031\207\032\211\033\206\034" +
    "\213\035\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\347\003\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\061\011\072" +
    "\012\050\014\064\021\363\022\054\025\067\030\073\031" +
    "\053\032\057\033\051\034\063\035\065\001\001\000\002" +
    "\001\001\000\032\004\061\011\216\012\205\014\212\022" +
    "\210\025\215\030\217\031\207\032\211\033\206\034\213" +
    "\035\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\041\020\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\061\011\072\012\050\014\064\021\375\022\054\025\067" +
    "\030\073\031\053\032\057\033\051\034\063\035\065\001" +
    "\001\000\002\001\001\000\032\004\061\011\216\012\205" +
    "\014\212\022\210\025\215\030\217\031\207\032\211\033" +
    "\206\034\213\035\214\001\001\000\002\001\001\000\034" +
    "\004\061\011\072\012\050\014\064\021\u0101\022\054\025" +
    "\067\030\073\031\053\032\057\033\051\034\063\035\065" +
    "\001\001\000\002\001\001\000\032\004\061\011\216\012" +
    "\205\014\212\022\210\025\215\030\217\031\207\032\211" +
    "\033\206\034\213\035\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\030\011\u0106\015" +
    "\u0104\016\u0107\017\u0105\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= identificador oParent cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
        ArrayList<Expresion> parametros = new ArrayList<>();
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= identificador oParent L_EXPRE cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        ArrayList<Expresion> parametros = (ArrayList<Expresion>)lista;
        if(parametros == null) {parametros = new ArrayList<>();}
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //

        Character real = val.charAt(1);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION_VAR ::= identificador asigna error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'= Expresion'");
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F_IMPRIMIR ::= imprimir oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion exp = (Expresion)nodo;
                Imprimir i = new Imprimir(auxright, auxleft, ArchivoOrigen, exp);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("F_IMPRIMIR",27, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BREAK ::= detener ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Detener i = new Detener(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BREAK",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTINUE ::= continuar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Continuar i = new Continuar(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            RESULT = id.toUpperCase();
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= booleano 
            {
              Object RESULT =null;
		
            RESULT = "BOOLEAN";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= caracter 
            {
              Object RESULT =null;
		
            RESULT = "CARACTER";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= cadena 
            {
              Object RESULT =null;
		
            RESULT = "CADENA";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= decimal 
            {
              Object RESULT =null;
		
            RESULT = "DECIMAL";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= entero 
            {
              Object RESULT =null;
		
            RESULT = "ENTERO";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L_EXPRE ::= EXP 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = new ArrayList<>();
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L_EXPRE ::= L_EXPRE coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null){exp = new ArrayList<>();}
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LLAMADA ::= identificador oParent L_EXPRE cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null) { exp = new ArrayList<>();}
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMADA ::= identificador oParent cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Expresion> exp = new ArrayList<>();
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR_ACTUALIZACION ::= identificador dec cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                    SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR_ACTUALIZACION ::= identificador inc cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                   SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                   RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR_ACTUALIZACION ::= identificador asigna EXP cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)nodo;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR_INIT ::= oParent identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion e = (Expresion)nodo;
                AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                RESULT = a;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR_INIT ::= oParent TIPO identificador asigna EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                String tipo = (String)t;
                DeclaracionVar d = new DeclaracionVar(idright, idleft, ArchivoOrigen, nodos,tipo);
                RESULT = d;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = new ArrayList<>();
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                if(sentencias==null){sentencias = new ArrayList<>();}
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT_AUM_DEC ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENT_AUM_DEC ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                    if(sentencias == null){sentencias = new ArrayList<>();}
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = new ArrayList<>();
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SINO ::= sino oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SINO ::= sino oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SINO_SI ::= sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SINO_SI ::= sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT_SI ::= si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNA ::= retornar EXP ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNA ::= retornar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, null);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCIONES ::= TIPO identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONES ::= TIPO identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES ::= TIPO identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODOS ::= vacio identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODOS ::= vacio identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOS ::= vacio identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAIN ::= vacio principal error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MAIN ::= vacio principal oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MAIN ::= vacio principal oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= F_IMPRIMIR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= CONTINUE 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= BREAK 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENT_FOR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENT_AUM_DEC 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENT_MIENTRAS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENT_SI 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= RETORNA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= LLAMADA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS F_IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS CONTINUE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS BREAK 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS SENT_AUM_DEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS SENT_MIENTRAS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS SENT_SI 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS RETORNA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS LLAMADA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= SENTENCIAS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORTAR ::= importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORTAR ::= L_IMPORTAR importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= NT$1 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 L_IMPORTAR DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

