
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 07 17:37:43 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;
import DppPackage.DppAST.Sentencias.IF.*;
import DppPackage.DppAST.Sentencias.While.*;
import DppPackage.DppAST.Sentencias.For.*;
import DppPackage.DppAST.Sentencias.Nativas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 07 17:37:43 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\052\002\000\002\011" +
    "\005\000\002\053\002\000\002\011\004\000\002\006\010" +
    "\000\002\006\007\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\022\006\000\002\022\004\000\002\017\010" +
    "\000\002\017\011\000\002\017\006\000\002\020\010\000" +
    "\002\020\011\000\002\020\011\000\002\020\012\000\002" +
    "\020\006\000\002\021\010\000\002\021\011\000\002\021" +
    "\011\000\002\021\012\000\002\021\006\000\002\007\007" +
    "\000\002\010\006\000\002\010\007\000\002\010\005\000" +
    "\002\010\006\000\002\016\004\000\002\016\005\000\002" +
    "\027\010\000\002\027\011\000\002\027\012\000\002\027" +
    "\013\000\002\027\011\000\002\027\012\000\002\027\011" +
    "\000\002\027\012\000\002\031\012\000\002\031\013\000" +
    "\002\031\011\000\002\031\012\000\002\030\005\000\002" +
    "\030\006\000\002\032\010\000\002\032\011\000\002\033" +
    "\005\000\002\033\005\000\002\034\013\000\002\034\012" +
    "\000\002\025\007\000\002\025\006\000\002\026\006\000" +
    "\002\026\005\000\002\026\005\000\002\014\006\000\002" +
    "\014\007\000\002\015\005\000\002\015\003\000\002\013" +
    "\005\000\002\013\005\000\002\045\006\000\002\045\010" +
    "\000\002\047\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\050\003\000\002\046\006\000\002" +
    "\046\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\035\004\000\002\036\004\000\002\037\007\000" +
    "\002\005\005\000\002\005\007\000\002\005\003\000\002" +
    "\005\005\000\002\005\005\000\002\024\006\000\002\024" +
    "\010\000\002\024\006\000\002\051\007\000\002\051\011" +
    "\000\002\040\015\000\002\041\017\000\002\042\017\000" +
    "\002\044\015\000\002\043\021\000\002\002\003\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\006\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\004\000\002\003\006\000\002\003\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\024\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\047\000\052\ufffe\062\ufffe\072\ufffe\001\002\000\022" +
    "\040\030\041\023\042\021\043\025\044\034\052\027\062" +
    "\033\072\036\001\002\000\004\047\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\024\040" +
    "\030\041\023\042\021\043\025\044\034\047\032\052\027" +
    "\062\033\072\036\001\002\000\004\006\012\001\002\000" +
    "\004\073\013\001\002\000\004\007\014\001\002\000\004" +
    "\004\015\001\002\000\024\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\047\ufffb\052\ufffb\062\ufffb\072\ufffb\001\002" +
    "\000\024\002\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\052\ufff1\062\ufff1\072\ufff1\001\002\000\024\002\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\052\uffef\062" +
    "\uffef\072\uffef\001\002\000\024\002\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\052\ufff3\062\ufff3\072\ufff3\001" +
    "\002\000\006\003\uff8a\072\uff8a\001\002\000\024\002\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\052\ufff2\062" +
    "\ufff2\072\ufff2\001\002\000\006\003\uff8b\072\uff8b\001\002" +
    "\000\024\002\uffff\040\030\041\023\042\021\043\025\044" +
    "\034\052\027\062\033\072\036\001\002\000\006\003\uff89" +
    "\072\uff89\001\002\000\024\002\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\052\ufff0\062\ufff0\072\ufff0\001\002" +
    "\000\006\051\u0175\072\u0174\001\002\000\006\003\uff8c\072" +
    "\uff8c\001\002\000\006\003\163\072\164\001\002\000\004" +
    "\006\156\001\002\000\004\072\037\001\002\000\006\003" +
    "\uff88\072\uff88\001\002\000\024\002\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\052\ufff4\062\ufff4\072\ufff4\001" +
    "\002\000\006\003\uff87\072\uff87\001\002\000\004\011\040" +
    "\001\002\000\016\040\030\041\023\042\021\043\025\044" +
    "\034\072\036\001\002\000\020\012\150\040\030\041\023" +
    "\042\021\043\025\044\034\072\036\001\002\000\004\072" +
    "\043\001\002\000\006\004\045\014\046\001\002\000\006" +
    "\004\147\014\135\001\002\000\020\012\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\072\uffb8\001\002\000\030" +
    "\006\047\021\055\037\051\045\056\046\054\067\060\070" +
    "\053\071\050\072\062\073\057\074\052\001\002\000\030" +
    "\006\047\021\055\037\051\045\056\046\054\067\060\070" +
    "\053\071\050\072\062\073\057\074\052\001\002\000\056" +
    "\004\uff5f\007\uff5f\010\uff5f\012\uff5f\015\uff5f\016\uff5f\017" +
    "\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f" +
    "\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034" +
    "\uff5f\035\uff5f\036\uff5f\001\002\000\030\006\047\021\055" +
    "\037\051\045\056\046\054\067\060\070\053\071\050\072" +
    "\062\073\057\074\052\001\002\000\056\004\uff57\007\uff57" +
    "\010\uff57\012\uff57\015\uff57\016\uff57\017\uff57\020\uff57\021" +
    "\uff57\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57" +
    "\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036" +
    "\uff57\001\002\000\056\004\uff60\007\uff60\010\uff60\012\uff60" +
    "\015\uff60\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023" +
    "\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60" +
    "\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\001\002\000" +
    "\056\004\uff5c\007\uff5c\010\uff5c\012\uff5c\015\uff5c\016\uff5c" +
    "\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\034\uff5c\035\uff5c\036\uff5c\001\002\000\030\006\047\021" +
    "\055\037\051\045\056\046\054\067\060\070\053\071\050" +
    "\072\062\073\057\074\052\001\002\000\056\004\uff5d\007" +
    "\uff5d\010\uff5d\012\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d" +
    "\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027" +
    "\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d" +
    "\036\uff5d\001\002\000\056\004\uff5e\007\uff5e\010\uff5e\012" +
    "\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031" +
    "\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\001\002" +
    "\000\056\004\uff61\007\uff61\010\uff61\012\uff61\015\uff61\016" +
    "\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61" +
    "\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033" +
    "\uff61\034\uff61\035\uff61\036\uff61\001\002\000\004\015\142" +
    "\001\002\000\064\004\uff5b\006\126\007\uff5b\010\uff5b\012" +
    "\uff5b\013\124\014\046\015\uff5b\016\uff5b\017\uff5b\020\uff5b" +
    "\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027" +
    "\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\036\uff5b\001\002\000\054\004\uff74\007\uff74\010\uff74\012" +
    "\uff74\015\uff74\016\077\020\102\021\073\022\070\023\064" +
    "\024\075\025\065\026\066\027\103\030\076\031\074\032" +
    "\101\033\100\034\067\035\072\036\071\001\002\000\030" +
    "\006\047\021\055\037\051\045\056\046\054\067\060\070" +
    "\053\071\050\072\062\073\057\074\052\001\002\000\056" +
    "\004\uff64\007\uff64\010\uff64\012\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\001\002\000\056\004\uff63\007\uff63" +
    "\010\uff63\012\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63" +
    "\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036" +
    "\uff63\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\056\004\uff6e\007\uff6e\010\uff6e\012\uff6e" +
    "\015\uff6e\016\077\017\uff6e\020\102\021\073\022\070\023" +
    "\064\024\075\025\065\026\066\027\uff6e\030\uff6e\031\074" +
    "\032\101\033\100\034\067\035\uff6e\036\uff6e\001\002\000" +
    "\056\004\uff73\007\uff73\010\uff73\012\uff73\015\uff73\016\077" +
    "\017\uff73\020\uff73\021\uff73\022\070\023\064\024\075\025" +
    "\065\026\066\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73" +
    "\034\uff73\035\uff73\036\uff73\001\002\000\056\004\uff6b\007" +
    "\uff6b\010\uff6b\012\uff6b\015\uff6b\016\077\017\uff6b\020\102" +
    "\021\073\022\070\023\064\024\075\025\065\026\066\027" +
    "\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b" +
    "\036\uff6b\001\002\000\056\004\uff69\007\uff69\010\uff69\012" +
    "\uff69\015\uff69\016\077\017\uff69\020\102\021\073\022\070" +
    "\023\064\024\075\025\065\026\066\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\001\002" +
    "\000\044\016\077\017\111\020\102\021\073\022\070\023" +
    "\064\024\075\025\065\026\066\027\103\030\076\031\074" +
    "\032\101\033\100\034\067\035\072\036\071\001\002\000" +
    "\030\006\047\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\056\004\uff54\007\uff54\010\uff54\012\uff54\015\uff54\016\077" +
    "\017\uff54\020\102\021\073\022\070\023\064\024\075\025" +
    "\065\026\066\027\103\030\076\031\074\032\101\033\100" +
    "\034\067\035\072\036\071\001\002\000\056\004\uff6d\007" +
    "\uff6d\010\uff6d\012\uff6d\015\uff6d\016\077\017\uff6d\020\102" +
    "\021\073\022\070\023\064\024\075\025\065\026\066\027" +
    "\uff6d\030\uff6d\031\074\032\101\033\100\034\067\035\uff6d" +
    "\036\uff6d\001\002\000\056\004\uff6f\007\uff6f\010\uff6f\012" +
    "\uff6f\015\uff6f\016\077\017\uff6f\020\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\025\065\026\066\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\001\002" +
    "\000\056\004\uff6c\007\uff6c\010\uff6c\012\uff6c\015\uff6c\016" +
    "\077\017\uff6c\020\102\021\073\022\070\023\064\024\075" +
    "\025\065\026\066\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\001\002\000\056\004\uff72" +
    "\007\uff72\010\uff72\012\uff72\015\uff72\016\077\017\uff72\020" +
    "\uff72\021\uff72\022\070\023\064\024\075\025\065\026\066" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\001\002\000\056\004\uff68\007\uff68\010\uff68" +
    "\012\uff68\015\uff68\016\077\017\uff68\020\102\021\073\022" +
    "\070\023\064\024\075\025\065\026\066\027\103\030\076" +
    "\031\074\032\101\033\100\034\067\035\uff68\036\uff68\001" +
    "\002\000\056\004\uff67\007\uff67\010\uff67\012\uff67\015\uff67" +
    "\016\077\017\uff67\020\102\021\073\022\070\023\064\024" +
    "\075\025\065\026\066\027\103\030\076\031\074\032\101" +
    "\033\100\034\067\035\072\036\uff67\001\002\000\056\004" +
    "\uff71\007\uff71\010\uff71\012\uff71\015\uff71\016\077\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\023\uff71\024\075\025\065\026" +
    "\066\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\036\uff71\001\002\000\056\004\uff6a\007\uff6a\010" +
    "\uff6a\012\uff6a\015\uff6a\016\077\017\uff6a\020\102\021\073" +
    "\022\070\023\064\024\075\025\065\026\066\027\uff6a\030" +
    "\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a" +
    "\001\002\000\056\004\uff70\007\uff70\010\uff70\012\uff70\015" +
    "\uff70\016\077\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70" +
    "\024\075\025\065\026\066\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\035\uff70\036\uff70\001\002\000\004" +
    "\072\140\001\002\000\060\004\uff56\007\uff56\010\uff56\012" +
    "\uff56\014\135\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56" +
    "\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030" +
    "\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56" +
    "\001\002\000\032\006\047\007\130\021\055\037\051\045" +
    "\056\046\054\067\060\070\053\071\050\072\062\073\057" +
    "\074\052\001\002\000\006\007\133\010\132\001\002\000" +
    "\056\004\uff59\007\uff59\010\uff59\012\uff59\015\uff59\016\uff59" +
    "\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024\uff59\025" +
    "\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59" +
    "\034\uff59\035\uff59\036\uff59\001\002\000\006\007\uff98\010" +
    "\uff98\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\056\004\uff5a\007\uff5a\010\uff5a\012\uff5a" +
    "\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\001\002\000" +
    "\006\007\uff99\010\uff99\001\002\000\030\006\047\021\055" +
    "\037\051\045\056\046\054\067\060\070\053\071\050\072" +
    "\062\073\057\074\052\001\002\000\004\015\137\001\002" +
    "\000\062\004\uff8e\005\uff8e\007\uff8e\010\uff8e\012\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\001\002" +
    "\000\060\004\uff58\007\uff58\010\uff58\012\uff58\014\046\015" +
    "\uff58\016\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58" +
    "\024\uff58\025\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032" +
    "\uff58\033\uff58\034\uff58\035\uff58\036\uff58\001\002\000\060" +
    "\004\uff55\007\uff55\010\uff55\012\uff55\014\135\015\uff55\016" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55" +
    "\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\035\uff55\036\uff55\001\002\000\062\004\uff8d" +
    "\005\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\001\002\000\056\004\uff65" +
    "\007\uff65\010\uff65\012\uff65\015\uff65\016\077\017\uff65\020" +
    "\uff65\021\uff65\022\070\023\064\024\075\025\065\026\066" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035" +
    "\uff65\036\uff65\001\002\000\056\004\uff66\007\uff66\010\uff66" +
    "\012\uff66\015\uff66\016\077\017\uff66\020\uff66\021\uff66\022" +
    "\uff66\023\uff66\024\uff66\025\065\026\066\027\uff66\030\uff66" +
    "\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\001" +
    "\002\000\044\007\146\016\077\020\102\021\073\022\070" +
    "\023\064\024\075\025\065\026\066\027\103\030\076\031" +
    "\074\032\101\033\100\034\067\035\072\036\071\001\002" +
    "\000\056\004\uff62\007\uff62\010\uff62\012\uff62\015\uff62\016" +
    "\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033" +
    "\uff62\034\uff62\035\uff62\036\uff62\001\002\000\020\012\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\072\uffb7\001" +
    "\002\000\024\002\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\052\uffbb\062\uffbb\072\uffbb\001\002\000\004\072" +
    "\152\001\002\000\006\004\154\014\046\001\002\000\006" +
    "\004\155\014\135\001\002\000\020\012\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\072\uffba\001\002\000\020" +
    "\012\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\072" +
    "\uffb9\001\002\000\004\073\157\001\002\000\004\007\160" +
    "\001\002\000\004\004\161\001\002\000\024\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\047\ufffc\052\ufffc\062\ufffc" +
    "\072\ufffc\001\002\000\006\004\u016f\010\u0170\001\002\000" +
    "\004\004\u016e\001\002\000\016\003\167\004\uff81\005\165" +
    "\006\170\010\uff81\014\046\001\002\000\030\006\047\021" +
    "\055\037\051\045\056\046\054\067\060\070\053\071\050" +
    "\072\062\073\057\074\052\001\002\000\010\004\u0162\005" +
    "\u0161\014\135\001\002\000\006\004\u0157\012\u0160\001\002" +
    "\000\020\007\172\040\030\041\023\042\021\043\025\044" +
    "\034\072\036\001\002\000\004\072\u015f\001\002\000\004" +
    "\011\u015b\001\002\000\006\007\175\010\174\001\002\000" +
    "\016\040\030\041\023\042\021\043\025\044\034\072\036" +
    "\001\002\000\004\011\176\001\002\000\046\012\233\040" +
    "\030\041\023\042\240\043\025\044\034\050\222\053\237" +
    "\054\215\056\216\057\211\060\200\061\204\063\227\064" +
    "\221\065\220\066\235\072\214\001\002\000\046\012\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\050\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\072\uffd9\001\002\000\004\004" +
    "\u0158\001\002\000\046\012\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\050\uffdc\053\uffdc\054\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\072\uffdc\001\002\000\006\003\163\072\u0155\001\002\000" +
    "\046\012\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\050\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\072\uffd1\001\002" +
    "\000\004\006\u0151\001\002\000\046\012\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\050\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\072\uffcb\001\002\000\046\012\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\050\uffcf\053\uffcf\054" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\072\uffcf\001\002\000\046\012\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\050\uffce\053\uffce" +
    "\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\072\uffce\001\002\000\046\012\u0150" +
    "\040\030\041\023\042\240\043\025\044\034\050\222\053" +
    "\237\054\215\056\216\057\211\060\200\061\204\063\227" +
    "\064\221\065\220\066\235\072\214\001\002\000\004\004" +
    "\u014f\001\002\000\046\012\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\050\uffcc\053\uffcc\054\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\072\uffcc\001\002\000\046\012\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\050\uffd8\053\uffd8\054\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\072\uffd8\001\002\000\022\003\uff87\005\u0133\006\u0137" +
    "\013\u0134\014\046\025\u0136\026\u0138\072\uff87\001\002\000" +
    "\004\006\u0110\001\002\000\004\006\u0109\001\002\000\046" +
    "\012\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\050" +
    "\uffda\053\uffda\054\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\072\uffda\001\002\000" +
    "\004\006\375\001\002\000\004\006\361\001\002\000\004" +
    "\006\307\001\002\000\046\012\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\050\uffcd\053\uffcd\054\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\072\uffcd\001\002\000\046\012\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\050\uffd2\053\uffd2\054\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\072\uffd2\001\002\000\046\012\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\050\uffdb\053\uffdb\054\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\072\uffdb\001\002\000\046\012\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\050\uffd6\053\uffd6\054" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\072\uffd6\001\002\000\004\006\274\001" +
    "\002\000\046\012\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\050\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4" +
    "\001\002\000\046\012\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\050\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\072" +
    "\uffd7\001\002\000\046\012\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\050\uffd0\053\uffd0\054\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\072\uffd0\001\002\000\024\002\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\052\uffbf\062\uffbf\072\uffbf\001\002" +
    "\000\046\012\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\050\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\001" +
    "\002\000\004\006\256\001\002\000\046\012\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\050\uffd3\053\uffd3\054" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\072\uffd3\001\002\000\032\004\253\006" +
    "\047\021\055\037\051\045\056\046\054\067\060\070\053" +
    "\071\050\072\062\073\057\074\052\001\002\000\010\003" +
    "\uff8a\006\241\072\uff8a\001\002\000\030\006\047\021\055" +
    "\037\051\045\056\046\054\067\060\070\053\071\050\072" +
    "\062\073\057\074\052\001\002\000\004\010\243\001\002" +
    "\000\030\006\047\021\055\037\051\045\056\046\054\067" +
    "\060\070\053\071\050\072\062\073\057\074\052\001\002" +
    "\000\004\010\245\001\002\000\004\073\246\001\002\000" +
    "\004\010\247\001\002\000\030\006\047\021\055\037\051" +
    "\045\056\046\054\067\060\070\053\071\050\072\062\073" +
    "\057\074\052\001\002\000\004\007\251\001\002\000\004" +
    "\004\252\001\002\000\046\012\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\050\uff76\053\uff76\054\uff76\056\uff76" +
    "\057\uff76\060\uff76\061\uff76\063\uff76\064\uff76\065\uff76\066" +
    "\uff76\072\uff76\001\002\000\046\012\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\050\uffb6\053\uffb6\054\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\072\uffb6\001\002\000\004\004\255\001\002\000" +
    "\046\012\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\050\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\072\uffb5\001\002" +
    "\000\030\006\047\021\055\037\051\045\056\046\054\067" +
    "\060\070\053\071\050\072\062\073\057\074\052\001\002" +
    "\000\004\010\260\001\002\000\030\006\047\021\055\037" +
    "\051\045\056\046\054\067\060\070\053\071\050\072\062" +
    "\073\057\074\052\001\002\000\004\010\262\001\002\000" +
    "\030\006\047\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\004\010\264\001\002\000\030\006\047\021\055\037\051" +
    "\045\056\046\054\067\060\070\053\071\050\072\062\073" +
    "\057\074\052\001\002\000\004\010\266\001\002\000\004" +
    "\073\267\001\002\000\004\010\270\001\002\000\030\006" +
    "\047\021\055\037\051\045\056\046\054\067\060\070\053" +
    "\071\050\072\062\073\057\074\052\001\002\000\004\007" +
    "\272\001\002\000\004\004\273\001\002\000\046\012\uff75" +
    "\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\050\uff75\053" +
    "\uff75\054\uff75\056\uff75\057\uff75\060\uff75\061\uff75\063\uff75" +
    "\064\uff75\065\uff75\066\uff75\072\uff75\001\002\000\030\006" +
    "\047\021\055\037\051\045\056\046\054\067\060\070\053" +
    "\071\050\072\062\073\057\074\052\001\002\000\004\010" +
    "\276\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\004\010\300\001\002\000\004\073\301" +
    "\001\002\000\004\010\302\001\002\000\030\006\047\021" +
    "\055\037\051\045\056\046\054\067\060\070\053\071\050" +
    "\072\062\073\057\074\052\001\002\000\004\007\304\001" +
    "\002\000\004\004\305\001\002\000\046\012\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\050\uff79\053\uff79\054" +
    "\uff79\056\uff79\057\uff79\060\uff79\061\uff79\063\uff79\064\uff79" +
    "\065\uff79\066\uff79\072\uff79\001\002\000\004\004\317\001" +
    "\002\000\016\040\030\041\023\042\021\043\025\044\034" +
    "\072\310\001\002\000\006\005\315\072\uff87\001\002\000" +
    "\004\072\312\001\002\000\004\005\313\001\002\000\030" +
    "\006\047\021\055\037\051\045\056\046\054\067\060\070" +
    "\053\071\050\072\062\073\057\074\052\001\002\000\004" +
    "\004\uffa0\001\002\000\030\006\047\021\055\037\051\045" +
    "\056\046\054\067\060\070\053\071\050\072\062\073\057" +
    "\074\052\001\002\000\004\004\uff9f\001\002\000\030\006" +
    "\047\021\055\037\051\045\056\046\054\067\060\070\053" +
    "\071\050\072\062\073\057\074\052\001\002\000\004\004" +
    "\321\001\002\000\004\072\322\001\002\000\010\005\352" +
    "\025\353\026\354\001\002\000\004\011\324\001\002\000" +
    "\046\012\326\040\030\041\023\042\240\043\025\044\034" +
    "\050\222\053\237\054\215\056\216\057\211\060\200\061" +
    "\204\063\227\064\221\065\220\066\235\072\214\001\002" +
    "\000\046\012\347\040\030\041\023\042\240\043\025\044" +
    "\034\050\222\053\237\054\215\056\216\057\211\060\200" +
    "\061\204\063\227\064\221\065\220\066\235\072\214\001" +
    "\002\000\046\012\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\050\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\072\uffa1" +
    "\001\002\000\046\012\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\050\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\072" +
    "\uffe2\001\002\000\046\012\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\050\uffdd\053\uffdd\054\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\072\uffdd\001\002\000\046\012\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\050\uffea\053\uffea\054\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\072\uffea\001\002\000\046\012\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\050\uffe4\053\uffe4\054\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\072\uffe4\001\002\000\046\012\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\050\uffe8\053\uffe8\054\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\072\uffe8\001\002\000\046\012\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\050\uffe7\053\uffe7\054" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\072\uffe7\001\002\000\046\012\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\050\uffe5\053\uffe5" +
    "\054\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\072\uffe5\001\002\000\046\012\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\050\uffe1\053" +
    "\uffe1\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\072\uffe1\001\002\000\046\012" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\050\uffe3" +
    "\053\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\072\uffe3\001\002\000\046" +
    "\012\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\050" +
    "\uffe6\053\uffe6\054\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\066\uffe6\072\uffe6\001\002\000" +
    "\046\012\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\050\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\072\uffeb\001\002" +
    "\000\046\012\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\050\uffde\053\uffde\054\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\072\uffde\001" +
    "\002\000\046\012\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\050\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\072\uffdf" +
    "\001\002\000\046\012\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\050\uffed\053\uffed\054\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066\uffed\072" +
    "\uffed\001\002\000\046\012\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\050\uffe0\053\uffe0\054\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\072\uffe0\001\002\000\046\012\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\050\uffe9\053\uffe9\054\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\072\uffe9\001\002\000\046\012\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\050\uffa2\053\uffa2\054\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\072\uffa2\001\002\000\046\012\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\050\uffee\053\uffee\054\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\072\uffee\001\002\000\046\012\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\050\uffec\053\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\072\uffec\001\002\000\030\006\047\021" +
    "\055\037\051\045\056\046\054\067\060\070\053\071\050" +
    "\072\062\073\057\074\052\001\002\000\004\007\356\001" +
    "\002\000\004\007\355\001\002\000\004\011\uff9c\001\002" +
    "\000\004\011\uff9d\001\002\000\004\007\360\001\002\000" +
    "\004\011\uff9e\001\002\000\030\006\047\021\055\037\051" +
    "\045\056\046\054\067\060\070\053\071\050\072\062\073" +
    "\057\074\052\001\002\000\004\010\363\001\002\000\030" +
    "\006\047\021\055\037\051\045\056\046\054\067\060\070" +
    "\053\071\050\072\062\073\057\074\052\001\002\000\004" +
    "\010\365\001\002\000\004\073\366\001\002\000\004\010" +
    "\367\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\004\010\371\001\002\000\030\006\047" +
    "\021\055\037\051\045\056\046\054\067\060\070\053\071" +
    "\050\072\062\073\057\074\052\001\002\000\004\007\373" +
    "\001\002\000\004\004\374\001\002\000\046\012\uff78\040" +
    "\uff78\041\uff78\042\uff78\043\uff78\044\uff78\050\uff78\053\uff78" +
    "\054\uff78\056\uff78\057\uff78\060\uff78\061\uff78\063\uff78\064" +
    "\uff78\065\uff78\066\uff78\072\uff78\001\002\000\030\006\047" +
    "\021\055\037\051\045\056\046\054\067\060\070\053\071" +
    "\050\072\062\073\057\074\052\001\002\000\004\010\377" +
    "\001\002\000\030\006\047\021\055\037\051\045\056\046" +
    "\054\067\060\070\053\071\050\072\062\073\057\074\052" +
    "\001\002\000\004\010\u0101\001\002\000\004\073\u0102\001" +
    "\002\000\004\010\u0103\001\002\000\030\006\047\021\055" +
    "\037\051\045\056\046\054\067\060\070\053\071\050\072" +
    "\062\073\057\074\052\001\002\000\004\010\u0105\001\002" +
    "\000\030\006\047\021\055\037\051\045\056\046\054\067" +
    "\060\070\053\071\050\072\062\073\057\074\052\001\002" +
    "\000\004\007\u0107\001\002\000\004\004\u0108\001\002\000" +
    "\046\012\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\050\uff77\053\uff77\054\uff77\056\uff77\057\uff77\060\uff77\061" +
    "\uff77\063\uff77\064\uff77\065\uff77\066\uff77\072\uff77\001\002" +
    "\000\030\006\047\021\055\037\051\045\056\046\054\067" +
    "\060\070\053\071\050\072\062\073\057\074\052\001\002" +
    "\000\004\007\u010b\001\002\000\004\011\u010c\001\002\000" +
    "\046\012\u010e\040\030\041\023\042\240\043\025\044\034" +
    "\050\222\053\237\054\215\056\216\057\211\060\200\061" +
    "\204\063\227\064\221\065\220\066\235\072\214\001\002" +
    "\000\046\012\u010f\040\030\041\023\042\240\043\025\044" +
    "\034\050\222\053\237\054\215\056\216\057\211\060\200" +
    "\061\204\063\227\064\221\065\220\066\235\072\214\001" +
    "\002\000\046\012\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\050\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\072\uffa6" +
    "\001\002\000\046\012\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\050\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\072" +
    "\uffa5\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\004\007\u0112\001\002\000\004\011\u0113" +
    "\001\002\000\046\012\u0115\040\030\041\023\042\240\043" +
    "\025\044\034\050\222\053\237\054\215\056\216\057\211" +
    "\060\200\061\204\063\227\064\221\065\220\066\235\072" +
    "\214\001\002\000\046\012\u012f\040\030\041\023\042\240" +
    "\043\025\044\034\050\222\053\237\054\215\056\216\057" +
    "\211\060\200\061\204\063\227\064\221\065\220\066\235" +
    "\072\214\001\002\000\050\012\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\050\uffb4\053\uffb4\054\uffb4\055\u0116" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\072\uffb4\001\002\000\006\011\u011c\054\u0127" +
    "\001\002\000\050\012\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\050\uffb0\053\uffb0\054\uffb0\055\u0119\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\072\uffb0\001\002\000\046\012\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\050\uffae\053\uffae\054\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\063\uffae\064\uffae\065\uffae" +
    "\066\uffae\072\uffae\001\002\000\006\011\u011c\054\u011b\001" +
    "\002\000\046\012\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\050\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\072\uffb2" +
    "\001\002\000\004\006\u0120\001\002\000\046\012\u011e\040" +
    "\030\041\023\042\240\043\025\044\034\050\222\053\237" +
    "\054\215\056\216\057\211\060\200\061\204\063\227\064" +
    "\221\065\220\066\235\072\214\001\002\000\046\012\u011f" +
    "\040\030\041\023\042\240\043\025\044\034\050\222\053" +
    "\237\054\215\056\216\057\211\060\200\061\204\063\227" +
    "\064\221\065\220\066\235\072\214\001\002\000\046\012" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\050\uffa8" +
    "\053\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\072\uffa8\001\002\000\046" +
    "\012\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\050" +
    "\uffa7\053\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\072\uffa7\001\002\000" +
    "\030\006\047\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\004\007\u0122\001\002\000\004\011\u0123\001\002\000\046" +
    "\012\u0125\040\030\041\023\042\240\043\025\044\034\050" +
    "\222\053\237\054\215\056\216\057\211\060\200\061\204" +
    "\063\227\064\221\065\220\066\235\072\214\001\002\000" +
    "\046\012\u0126\040\030\041\023\042\240\043\025\044\034" +
    "\050\222\053\237\054\215\056\216\057\211\060\200\061" +
    "\204\063\227\064\221\065\220\066\235\072\214\001\002" +
    "\000\050\012\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\050\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\063\uffac\064\uffac\065\uffac\066\uffac\072" +
    "\uffac\001\002\000\050\012\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\050\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\072\uffab\001\002\000\004\006\u0128\001\002\000" +
    "\030\006\047\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\004\007\u012a\001\002\000\004\011\u012b\001\002\000\046" +
    "\012\u012d\040\030\041\023\042\240\043\025\044\034\050" +
    "\222\053\237\054\215\056\216\057\211\060\200\061\204" +
    "\063\227\064\221\065\220\066\235\072\214\001\002\000" +
    "\046\012\u012e\040\030\041\023\042\240\043\025\044\034" +
    "\050\222\053\237\054\215\056\216\057\211\060\200\061" +
    "\204\063\227\064\221\065\220\066\235\072\214\001\002" +
    "\000\050\012\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\050\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\072" +
    "\uffaa\001\002\000\050\012\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\050\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\072\uffa9\001\002\000\050\012\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\050\uffb3\053\uffb3\054\uffb3" +
    "\055\u0116\056\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\072\uffb3\001\002\000\050\012\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\050\uffaf\053" +
    "\uffaf\054\uffaf\055\u0119\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\072\uffaf\001\002\000" +
    "\046\012\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\050\uffad\053\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\072\uffad\001\002" +
    "\000\046\012\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\050\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\072\uffb1\001" +
    "\002\000\032\003\u014b\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\004\072\u0143\001\002\000\006\005\u0140" +
    "\014\135\001\002\000\004\004\u013f\001\002\000\032\006" +
    "\047\007\u013b\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\004\004\u0139\001\002\000\046\012\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\050\uffa3\053\uffa3\054\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\072\uffa3\001\002\000\006\007\u013d\010\132\001" +
    "\002\000\004\004\u013c\001\002\000\046\012\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\050\uff9b\053\uff9b\054" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\072\uff9b\001\002\000\004\004\u013e\001" +
    "\002\000\046\012\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\050\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\072\uff9a" +
    "\001\002\000\046\012\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\050\uffa4\053\uffa4\054\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\072" +
    "\uffa4\001\002\000\030\006\047\021\055\037\051\045\056" +
    "\046\054\067\060\070\053\071\050\072\062\073\057\074" +
    "\052\001\002\000\004\004\u0142\001\002\000\046\012\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\050\uff7b\053" +
    "\uff7b\054\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\072\uff7b\001\002\000\006\005" +
    "\u0144\014\046\001\002\000\030\006\047\021\055\037\051" +
    "\045\056\046\054\067\060\070\053\071\050\072\062\073" +
    "\057\074\052\001\002\000\006\005\u0146\014\135\001\002" +
    "\000\030\006\047\021\055\037\051\045\056\046\054\067" +
    "\060\070\053\071\050\072\062\073\057\074\052\001\002" +
    "\000\004\004\u0148\001\002\000\046\012\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\050\uff7a\053\uff7a\054\uff7a" +
    "\056\uff7a\057\uff7a\060\uff7a\061\uff7a\063\uff7a\064\uff7a\065" +
    "\uff7a\066\uff7a\072\uff7a\001\002\000\004\004\u014a\001\002" +
    "\000\046\012\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\050\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\072\uff7d\001" +
    "\002\000\004\004\u014e\001\002\000\004\004\u014d\001\002" +
    "\000\046\012\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044" +
    "\uff7e\050\uff7e\053\uff7e\054\uff7e\056\uff7e\057\uff7e\060\uff7e" +
    "\061\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\072\uff7e\001" +
    "\002\000\046\012\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\050\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c\060" +
    "\uff7c\061\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\072\uff7c" +
    "\001\002\000\046\012\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\050\uff85\053\uff85\054\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\063\uff85\064\uff85\065\uff85\066\uff85\072" +
    "\uff85\001\002\000\024\002\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\052\uffbd\062\uffbd\072\uffbd\001\002\000" +
    "\030\006\047\021\055\037\051\045\056\046\054\067\060" +
    "\070\053\071\050\072\062\073\057\074\052\001\002\000" +
    "\004\007\u0153\001\002\000\004\004\u0154\001\002\000\046" +
    "\012\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\050" +
    "\uff84\053\uff84\054\uff84\056\uff84\057\uff84\060\uff84\061\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\072\uff84\001\002\000" +
    "\014\003\u0156\004\uff81\005\165\010\uff81\014\046\001\002" +
    "\000\004\004\u0157\001\002\000\006\004\uff7f\010\uff7f\001" +
    "\002\000\046\012\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\044\uff86\050\uff86\053\uff86\054\uff86\056\uff86\057\uff86\060" +
    "\uff86\061\uff86\063\uff86\064\uff86\065\uff86\066\uff86\072\uff86" +
    "\001\002\000\004\072\u015a\001\002\000\006\007\uffca\010" +
    "\uffca\001\002\000\046\012\u015d\040\030\041\023\042\240" +
    "\043\025\044\034\050\222\053\237\054\215\056\216\057" +
    "\211\060\200\061\204\063\227\064\221\065\220\066\235" +
    "\072\214\001\002\000\046\012\u015e\040\030\041\023\042" +
    "\240\043\025\044\034\050\222\053\237\054\215\056\216" +
    "\057\211\060\200\061\204\063\227\064\221\065\220\066" +
    "\235\072\214\001\002\000\024\002\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\052\uffc0\062\uffc0\072\uffc0\001" +
    "\002\000\024\002\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\052\uffbe\062\uffbe\072\uffbe\001\002\000\006\007" +
    "\uffc9\010\uffc9\001\002\000\024\002\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\052\uffbc\062\uffbc\072\uffbc\001" +
    "\002\000\004\011\u0164\001\002\000\054\002\uff95\012\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\050\uff95\052" +
    "\uff95\053\uff95\054\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\072\uff95\001" +
    "\002\000\004\004\u016c\001\002\000\032\006\047\011\u0164" +
    "\021\055\037\051\045\056\046\054\067\060\070\053\071" +
    "\050\072\062\073\057\074\052\001\002\000\006\010\u0169" +
    "\012\u0168\001\002\000\006\010\uff8f\012\uff8f\001\002\000" +
    "\006\010\uff90\012\uff90\001\002\000\010\004\uff93\010\uff93" +
    "\012\uff93\001\002\000\032\006\047\011\u0164\021\055\037" +
    "\051\045\056\046\054\067\060\070\053\071\050\072\062" +
    "\073\057\074\052\001\002\000\006\010\uff91\012\uff91\001" +
    "\002\000\006\010\uff92\012\uff92\001\002\000\054\002\uff94" +
    "\012\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\050" +
    "\uff94\052\uff94\053\uff94\054\uff94\056\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\072" +
    "\uff94\001\002\000\006\004\uff80\010\uff80\001\002\000\054" +
    "\002\uff96\012\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\050\uff96\052\uff96\053\uff96\054\uff96\056\uff96\057\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\072\uff96\001\002\000\054\002\uff97\012\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\050\uff97\052\uff97\053" +
    "\uff97\054\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\065\uff97\066\uff97\072\uff97\001\002\000" +
    "\004\072\u0171\001\002\000\010\004\uff83\005\u0172\010\uff83" +
    "\001\002\000\030\006\047\021\055\037\051\045\056\046" +
    "\054\067\060\070\053\071\050\072\062\073\057\074\052" +
    "\001\002\000\006\004\uff82\010\uff82\001\002\000\006\003" +
    "\u017e\006\u017f\001\002\000\006\003\u0176\006\u0177\001\002" +
    "\000\004\012\u017d\001\002\000\004\007\u0178\001\002\000" +
    "\004\011\u0179\001\002\000\046\012\u017b\040\030\041\023" +
    "\042\240\043\025\044\034\050\222\053\237\054\215\056" +
    "\216\057\211\060\200\061\204\063\227\064\221\065\220" +
    "\066\235\072\214\001\002\000\046\012\u017c\040\030\041" +
    "\023\042\240\043\025\044\034\050\222\053\237\054\215" +
    "\056\216\057\211\060\200\061\204\063\227\064\221\065" +
    "\220\066\235\072\214\001\002\000\024\002\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\052\uffc8\062\uffc8\072" +
    "\uffc8\001\002\000\024\002\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\052\uffc7\062\uffc7\072\uffc7\001\002\000" +
    "\024\002\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\052\uffc6\062\uffc6\072\uffc6\001\002\000\004\012\u018b\001" +
    "\002\000\020\007\u0180\040\030\041\023\042\021\043\025" +
    "\044\034\072\036\001\002\000\004\011\u0187\001\002\000" +
    "\006\007\u0182\010\174\001\002\000\004\011\u0183\001\002" +
    "\000\046\012\u0185\040\030\041\023\042\240\043\025\044" +
    "\034\050\222\053\237\054\215\056\216\057\211\060\200" +
    "\061\204\063\227\064\221\065\220\066\235\072\214\001" +
    "\002\000\046\012\u0186\040\030\041\023\042\240\043\025" +
    "\044\034\050\222\053\237\054\215\056\216\057\211\060" +
    "\200\061\204\063\227\064\221\065\220\066\235\072\214" +
    "\001\002\000\024\002\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\052\uffc4\062\uffc4\072\uffc4\001\002\000\024" +
    "\002\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\052" +
    "\uffc2\062\uffc2\072\uffc2\001\002\000\046\012\u0189\040\030" +
    "\041\023\042\240\043\025\044\034\050\222\053\237\054" +
    "\215\056\216\057\211\060\200\061\204\063\227\064\221" +
    "\065\220\066\235\072\214\001\002\000\046\012\u018a\040" +
    "\030\041\023\042\240\043\025\044\034\050\222\053\237" +
    "\054\215\056\216\057\211\060\200\061\204\063\227\064" +
    "\221\065\220\066\235\072\214\001\002\000\024\002\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\052\uffc5\062" +
    "\uffc5\072\uffc5\001\002\000\024\002\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\052\uffc3\062\uffc3\072\uffc3\001" +
    "\002\000\024\002\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\052\uffc1\062\uffc1\072\uffc1\001\002\000\024\002" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\052\ufff9" +
    "\062\ufff9\072\ufff9\001\002\000\024\002\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\052\ufff7\062\ufff7\072\ufff7" +
    "\001\002\000\024\002\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\052\ufff6\062\ufff6\072\ufff6\001\002\000\024" +
    "\002\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\052" +
    "\ufffa\062\ufffa\072\ufffa\001\002\000\024\002\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\052\ufff8\062\ufff8\072" +
    "\ufff8\001\002\000\024\002\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\052\ufff5\062\ufff5\072\ufff5\001\002\000" +
    "\024\002\ufffd\040\030\041\023\042\021\043\025\044\034" +
    "\052\027\062\033\072\036\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\010\011\005\052\004\053\003\001\001\000" +
    "\022\004\030\007\017\012\u0191\013\021\017\015\020\025" +
    "\021\016\045\034\001\001\000\004\006\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\030\007\017" +
    "\012\023\013\021\017\015\020\025\021\016\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\030\007\u018d\013" +
    "\u018e\017\u018b\020\u018f\021\u018c\045\u0190\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\041\010\040\001\001" +
    "\000\004\004\150\001\001\000\002\001\001\000\004\046" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\060\003\062\001\001\000\004\003\144\001\001\000" +
    "\002\001\001\000\004\003\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\124\001\001\000\002\001" +
    "\001\000\004\003\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\121\001\001\000\004\003\120\001" +
    "\001\000\004\003\117\001\001\000\004\003\116\001\001" +
    "\000\004\003\115\001\001\000\004\003\114\001\001\000" +
    "\004\003\113\001\001\000\004\003\112\001\001\000\004" +
    "\003\107\001\001\000\004\003\106\001\001\000\004\003" +
    "\105\001\001\000\004\003\104\001\001\000\004\003\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\130\003\062\015\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\133\003\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\135\003\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\165\001\001\000" +
    "\006\002\u016c\003\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\170\022\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0158" +
    "\001\001\000\002\001\001\000\052\004\201\013\233\014" +
    "\235\016\223\023\207\024\227\027\202\032\231\033\205" +
    "\034\206\035\211\036\222\037\204\040\216\041\176\042" +
    "\212\043\225\044\230\045\224\051\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\201\013\347\014\350\016\340\024\343\027\330\032\345" +
    "\033\332\034\333\035\334\036\337\037\331\040\336\041" +
    "\326\042\335\043\342\044\344\045\341\051\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\253\003\062\001\001\000\002\001\001" +
    "\000\006\002\241\003\062\001\001\000\002\001\001\000" +
    "\006\002\243\003\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\247\003\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\256\003\062\001\001\000\002\001\001\000\006" +
    "\002\260\003\062\001\001\000\002\001\001\000\006\002" +
    "\262\003\062\001\001\000\002\001\001\000\006\002\264" +
    "\003\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\270\003\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\274\003\062\001\001\000\002\001\001\000\006\002\276" +
    "\003\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\302\003\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\313\003\062\001" +
    "\001\000\002\001\001\000\006\002\315\003\062\001\001" +
    "\000\002\001\001\000\006\002\317\003\062\001\001\000" +
    "\002\001\001\000\004\026\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\004\201\013\233\014\235\016" +
    "\223\023\324\024\227\027\202\032\231\033\205\034\206" +
    "\035\211\036\222\037\204\040\216\041\176\042\212\043" +
    "\225\044\230\045\224\051\200\001\001\000\050\004\201" +
    "\013\347\014\350\016\340\024\343\027\330\032\345\033" +
    "\332\034\333\035\334\036\337\037\331\040\336\041\326" +
    "\042\335\043\342\044\344\045\341\051\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\356\003\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\361\003\062" +
    "\001\001\000\002\001\001\000\006\002\363\003\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\367\003\062\001\001\000\002\001\001\000" +
    "\006\002\371\003\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\375\003\062\001" +
    "\001\000\002\001\001\000\006\002\377\003\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\u0103\003\062\001\001\000\002\001\001\000\006" +
    "\002\u0105\003\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u0109\003\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\201\013" +
    "\233\014\235\016\223\023\u010c\024\227\027\202\032\231" +
    "\033\205\034\206\035\211\036\222\037\204\040\216\041" +
    "\176\042\212\043\225\044\230\045\224\051\200\001\001" +
    "\000\050\004\201\013\347\014\350\016\340\024\343\027" +
    "\330\032\345\033\332\034\333\035\334\036\337\037\331" +
    "\040\336\041\326\042\335\043\342\044\344\045\341\051" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\u0110\003\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\201\013\233\014\235\016\223\023\u0113" +
    "\024\227\027\202\032\231\033\205\034\206\035\211\036" +
    "\222\037\204\040\216\041\176\042\212\043\225\044\230" +
    "\045\224\051\200\001\001\000\050\004\201\013\347\014" +
    "\350\016\340\024\343\027\330\032\345\033\332\034\333" +
    "\035\334\036\337\037\331\040\336\041\326\042\335\043" +
    "\342\044\344\045\341\051\327\001\001\000\006\030\u0117" +
    "\031\u0116\001\001\000\002\001\001\000\004\030\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\004\201\013\233\014\235\016" +
    "\223\023\u011c\024\227\027\202\032\231\033\205\034\206" +
    "\035\211\036\222\037\204\040\216\041\176\042\212\043" +
    "\225\044\230\045\224\051\200\001\001\000\050\004\201" +
    "\013\347\014\350\016\340\024\343\027\330\032\345\033" +
    "\332\034\333\035\334\036\337\037\331\040\336\041\326" +
    "\042\335\043\342\044\344\045\341\051\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\u0120\003\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\201\013\233\014\235\016\223\023\u0123\024\227\027\202" +
    "\032\231\033\205\034\206\035\211\036\222\037\204\040" +
    "\216\041\176\042\212\043\225\044\230\045\224\051\200" +
    "\001\001\000\050\004\201\013\347\014\350\016\340\024" +
    "\343\027\330\032\345\033\332\034\333\035\334\036\337" +
    "\037\331\040\336\041\326\042\335\043\342\044\344\045" +
    "\341\051\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\u0128\003\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\201\013\233" +
    "\014\235\016\223\023\u012b\024\227\027\202\032\231\033" +
    "\205\034\206\035\211\036\222\037\204\040\216\041\176" +
    "\042\212\043\225\044\230\045\224\051\200\001\001\000" +
    "\050\004\201\013\347\014\350\016\340\024\343\027\330" +
    "\032\345\033\332\034\333\035\334\036\337\037\331\040" +
    "\336\041\326\042\335\043\342\044\344\045\341\051\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u0130\031\u012f\001\001\000\004\030\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u014b\003\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\130\003\062\015\u0139\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\u0140\003\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0144\001\001\000" +
    "\006\002\u0148\003\062\001\001\000\002\001\001\000\006" +
    "\002\u0146\003\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\u0151\003\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\201\013\233\014\235\016\223\023\u015b" +
    "\024\227\027\202\032\231\033\205\034\206\035\211\036" +
    "\222\037\204\040\216\041\176\042\212\043\225\044\230" +
    "\045\224\051\200\001\001\000\050\004\201\013\347\014" +
    "\350\016\340\024\343\027\330\032\345\033\332\034\333" +
    "\035\334\036\337\037\331\040\336\041\326\042\335\043" +
    "\342\044\344\045\341\051\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\u0166\003\062\047\u0165\050\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u016a\003\062\047\u0169\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u0172\003\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\201\013\233\014\235\016\223\023\u0179\024\227\027" +
    "\202\032\231\033\205\034\206\035\211\036\222\037\204" +
    "\040\216\041\176\042\212\043\225\044\230\045\224\051" +
    "\200\001\001\000\050\004\201\013\347\014\350\016\340" +
    "\024\343\027\330\032\345\033\332\034\333\035\334\036" +
    "\337\037\331\040\336\041\326\042\335\043\342\044\344" +
    "\045\341\051\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\170" +
    "\022\u0180\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\201\013\233\014\235\016\223" +
    "\023\u0183\024\227\027\202\032\231\033\205\034\206\035" +
    "\211\036\222\037\204\040\216\041\176\042\212\043\225" +
    "\044\230\045\224\051\200\001\001\000\050\004\201\013" +
    "\347\014\350\016\340\024\343\027\330\032\345\033\332" +
    "\034\333\035\334\036\337\037\331\040\336\041\326\042" +
    "\335\043\342\044\344\045\341\051\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\201\013\233\014" +
    "\235\016\223\023\u0187\024\227\027\202\032\231\033\205" +
    "\034\206\035\211\036\222\037\204\040\216\041\176\042" +
    "\212\043\225\044\230\045\224\051\200\001\001\000\050" +
    "\004\201\013\347\014\350\016\340\024\343\027\330\032" +
    "\345\033\332\034\333\035\334\036\337\037\331\040\336" +
    "\041\326\042\335\043\342\044\344\045\341\051\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\030\007\u018d\013\u018e\017\u018b\020\u018f\021\u018c\045" +
    "\u0190\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // E ::= E qMark E dPuntos E 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Expresion cond = (Expresion)c;
        Expresion verd = (Expresion)v;
        Expresion fals = (Expresion)f;
        Ternario t = new Ternario(cright, cleft, ArchivoOrigen, cond, verd, fals);
        RESULT = t;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // E ::= identificador punto identificador DIMENSIONES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
        AccesoMiembroArreglo i = new AccesoMiembroArreglo(idright, idleft, ArchivoOrigen, id, id2, dimensiones);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // E ::= identificador DIMENSIONES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
        AccesoArreglo i = new AccesoArreglo(idright, idleft, ArchivoOrigen, id, exp);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // E ::= nulo 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        ValorNulo i = new ValorNulo(auxright, auxleft, ArchivoOrigen);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // E ::= identificador punto identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        AccesoMiembroSimple i = new AccesoMiembroSimple(idright, idleft, ArchivoOrigen, id, id2);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // E ::= identificador oParent cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
        ArrayList<Expresion> parametros = new ArrayList<>();
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // E ::= identificador oParent L_EXPRE cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        ArrayList<Expresion> parametros = (ArrayList<Expresion>)lista;
        if(parametros == null) {parametros = new ArrayList<>();}
        LlamadoFuncion f = new LlamadoFuncion(idright, idleft, ArchivoOrigen, id, parametros);
        RESULT = f;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // E ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //

        Character real = val.charAt(1);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e; 
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.NOT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUN_LINEA ::= linea oParent EXP coma EXP coma EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posxf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyfleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyfright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posyf = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int grosorleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int grosorright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object grosor = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                Expresion xf = (Expresion)posxf;
                Expresion yf = (Expresion)posyf;
                String color = (String)col;
                Expresion g = (Expresion)grosor;
                Linea i = new Linea(auxright, auxleft, ArchivoOrigen, x, y, xf, yf, color, g);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_LINEA",33, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-14)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FUN_CADENA ::= cadena oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion cad = (Expresion)str;
                Cadena i = new Cadena(auxright, auxleft, ArchivoOrigen, x, y, color, cad);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CADENA",34, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FUN_OVALO ::= ovalo oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Ovalo i = new Ovalo(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_OVALO",32, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FUN_CUADRADO ::= cuadrado oParent EXP coma EXP coma dataString coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object alto = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion width = (Expresion)ancho;
                Expresion height = (Expresion)alto;
                Cuadrado i = new Cuadrado(auxright, auxleft, ArchivoOrigen, x, y, color, width, height);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_CUADRADO",31, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-12)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FUN_PUNTO ::= point oParent EXP coma EXP coma dataString coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object posx = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object posy = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int diametroleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int diametroright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object diametro = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion x = (Expresion)posx;
                Expresion y = (Expresion)posy;
                String color = (String)col;
                Expresion d = (Expresion)diametro;
                Punto i = new Punto(auxright, auxleft, ArchivoOrigen, x, y, color, d);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUN_PUNTO",30, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-10)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNA_ARR ::= identificador punto identificador DIMENSIONES asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                Expresion e = (Expresion)exp;
                AsignacionMiembroArreglo i = new AsignacionMiembroArreglo(idright, idleft, ArchivoOrigen, id, id2, dimensiones, e);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",39, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNA_ARR ::= identificador DIMENSIONES asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                Expresion e = (Expresion)exp;
                AsignaArr i = new AsignaArr(idright, idleft, ArchivoOrigen, id, dimensiones, e);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",39, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNACION_VAR ::= identificador asigna error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'= Expresion'");
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION_VAR ::= identificador punto identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionMiembroSimple i = new AsignacionMiembroSimple(idright, idleft, ArchivoOrigen, id, id2, e);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",18, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // F_IMPRIMIR ::= imprimir oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                Expresion exp = (Expresion)nodo;
                Imprimir i = new Imprimir(auxright, auxleft, ArchivoOrigen, exp);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("F_IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BREAK ::= detener ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Detener i = new Detener(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("BREAK",28, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTINUE ::= continuar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Continuar i = new Continuar(auxright, auxleft, ArchivoOrigen);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",27, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            RESULT = id;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO ::= booleano 
            {
              Object RESULT =null;
		
            RESULT = "BOOLEAN";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPO ::= caracter 
            {
              Object RESULT =null;
		
            RESULT = "CARACTER";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= cadena 
            {
              Object RESULT =null;
		
            RESULT = "CADENA";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= decimal 
            {
              Object RESULT =null;
		
            RESULT = "DECIMAL";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO ::= entero 
            {
              Object RESULT =null;
		
            RESULT = "ENTERO";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DIMENSIONES ::= oBracket EXP cBracket 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = new ArrayList<>();
                Expresion exp = (Expresion)e;
                if(exp != null){dimensiones.add(exp);}
                RESULT = dimensiones;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",36, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DIMENSIONES ::= DIMENSIONES oBracket EXP cBracket 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                if(dimensiones==null){dimensiones = new ArrayList<>();}
                Expresion exp = (Expresion)e;
                dimensiones.add(exp);
                RESULT = dimensiones;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",36, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LISTA_ARR ::= VALORES_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LISTA_ARR ::= EXP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = new ArrayList<>();
                Expresion exp = (Expresion)e;
                if(exp!=null)
                {
                    valores.add(exp);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LISTA_ARR ::= LISTA_ARR coma VALORES_ARR 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista1;
                if(valores == null){valores = new ArrayList<>();}
                ArrayList<Expresion> aux = (ArrayList<Expresion>)lista2;
                if(aux == null){aux = new ArrayList<>();}
                for(Expresion e:aux)
                {
                    valores.add(e);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_ARR ::= LISTA_ARR coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                Expresion exp = (Expresion)e;
                if(exp!=null)
                {
                    valores.add(exp);
                }
                RESULT = valores;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LISTA_ARR",38, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORES_ARR ::= oKey LISTA_ARR cKey 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                ArrayList<Expresion> valores = (ArrayList<Expresion>)lista;
                if(valores == null){valores = new ArrayList<>();}
                RESULT = valores;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("VALORES_ARR",37, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_ARR ::= TIPO identificador DIMENSIONES asigna VALORES_ARR ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String t = (String)aux;
                    ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                    if(dimensiones==null){dimensiones = new ArrayList<>();}
                    ArrayList<Expresion> valores = (ArrayList<Expresion>)lista2;
                    if(valores == null){valores = new ArrayList<>();}
                    DeclaracionArrCA i = new DeclaracionArrCA(auxright, auxleft, ArchivoOrigen, id, t, dimensiones, valores);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_ARR ::= TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String t = (String)aux;
                    ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                    if(dimensiones==null){dimensiones = new ArrayList<>();}
                    DeclaracionArrSA i = new DeclaracionArrSA(idright, idleft, ArchivoOrigen, id, t, dimensiones);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARR",35, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // L_EXPRE ::= EXP 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = new ArrayList<>();
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // L_EXPRE ::= L_EXPRE coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion e = (Expresion)nodo;
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null){exp = new ArrayList<>();}
            exp.add(e);
            RESULT = exp;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADA ::= identificador oParent L_EXPRE cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Expresion> exp = (ArrayList<Expresion>)lista;
            if(exp==null) { exp = new ArrayList<>();}
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA ::= identificador oParent cParent ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Expresion> exp = new ArrayList<>();
            LlamadoMetodo m = new LlamadoMetodo(idright, idleft, ArchivoOrigen, id, exp);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("LLAMADA",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FOR_ACTUALIZACION ::= identificador dec cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                    SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                    RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FOR_ACTUALIZACION ::= identificador inc cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                   SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                   RESULT = i;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FOR_ACTUALIZACION ::= identificador asigna EXP cParent 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)nodo;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR_INIT ::= oParent identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion e = (Expresion)nodo;
                AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                RESULT = a;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR_INIT ::= oParent TIPO identificador asigna EXP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                String tipo = (String)t;
                DeclaracionVar d = new DeclaracionVar(idright, idleft, ArchivoOrigen, nodos,tipo);
                RESULT = d;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",19, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = new ArrayList<>();
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENT_FOR ::= para FOR_INIT ptComa EXP ptComa FOR_ACTUALIZACION oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodo1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int nodo1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object nodo1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodo2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodo2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodo3left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodo3right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo3 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                NodoAST inicializacion = (NodoAST)nodo1;
                Expresion condicion = (Expresion)nodo2;
                NodoAST actualizacion = (NodoAST)nodo3;
                ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                if(sentencias==null){sentencias = new ArrayList<>();}
                Para p = new Para(auxright, auxleft, ArchivoOrigen, inicializacion, condicion, actualizacion, sentencias);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",26, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENT_AUM_DEC ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentDec i = new SentDec(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENT_AUM_DEC ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                SentInc i = new SentInc(idright, idleft, ArchivoOrigen, id);
                RESULT = i;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_AUM_DEC",25, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = (ArrayList<Object>)lista;
                    if(sentencias == null){sentencias = new ArrayList<>();}
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENT_MIENTRAS ::= mientras oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
                    Expresion exp = (Expresion)nodo;
                    ArrayList<Object> sentencias = new ArrayList<>();
                    Mientras i = new Mientras(auxright, auxleft, ArchivoOrigen, exp, sentencias);
                    RESULT = i;
              
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",24, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SINO ::= sino oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SINO ::= sino oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            Sino i = new Sino(auxright, auxleft, ArchivoOrigen, sentencias);
            RESULT = i;
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO",22, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SINO_SI ::= sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SINO_SI ::= sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = new ArrayList<>();
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null) {sentencias = new ArrayList<>();}
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SINO_SI ::= SINO_SI sino si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null) {sinos = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            SinoSi i = new SinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            sinos.add(i);
            RESULT = sinos;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SINO_SI",23, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            ArrayList<NodoAST> sinos = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, null);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-8)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENT_SI ::= si oParent EXP cParent oKey cKey SINO_SI SINO 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int lista1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoSinoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoSinoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodoSino = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<NodoAST> sinos = (ArrayList<NodoAST>)lista1;
            if(sinos == null){sinos = new ArrayList<>();}
            NodoAST sino = (NodoAST)nodoSino;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSinoSi i = new IfSinoSi(auxright, auxleft, ArchivoOrigen, exp, sentencias, sinos, sino);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENT_SI ::= si oParent EXP cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias == null){sentencias = new ArrayList<>();}
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENT_SI ::= si oParent EXP cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Object> sentencias = new ArrayList<>();
            IfSimple i = new IfSimple(auxright, auxleft, ArchivoOrigen, exp, sentencias);
            RESULT = i;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENT_SI",21, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETORNA ::= retornar EXP ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNA ::= retornar ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            Retornar r = new Retornar(auxright, auxleft, ArchivoOrigen, null);
            RESULT = r;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("RETORNA",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MIEMBROS ::= TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista;
                if(dimensiones == null){dimensiones = new ArrayList<>();}
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, 1, dimensiones);
                ArrayList<NodoMiembro> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MIEMBROS ::= TIPO identificador ptComa 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen,t, id, 1);
                ArrayList<NodoMiembro> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MIEMBROS ::= MIEMBROS TIPO identificador DIMENSIONES ptComa 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
                ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)lista2;
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, nodos.size()+1, dimensiones);
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MIEMBROS ::= MIEMBROS TIPO identificador ptComa 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                String t = (String)tipo;
                ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
                if(nodos == null){nodos = new ArrayList<>();}
                NodoMiembro n = new NodoMiembro(idright, idleft, ArchivoOrigen, t, id, nodos.size()+1);
                nodos.add(n);
                RESULT = nodos;
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MIEMBROS",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRUCT ::= estructura identificador oKey MIEMBROS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<NodoMiembro> nodos = (ArrayList<NodoMiembro>)lista;
            if(nodos==null){nodos = new ArrayList<>();}
            DeclaracionStruct n = new DeclaracionStruct(idright, idleft, ArchivoOrigen, nodos, id);
            RESULT = n;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("STRUCT",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCIONES ::= TIPO identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCIONES ::= TIPO identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCIONES ::= TIPO identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METODOS ::= vacio identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODOS ::= vacio identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODOS ::= vacio identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MAIN ::= vacio principal error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MAIN ::= vacio principal oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MAIN ::= vacio principal oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS ::= PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= F_IMPRIMIR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= CONTINUE 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= BREAK 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= SENT_FOR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= SENT_AUM_DEC 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= SENT_MIENTRAS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= SENT_SI 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= RETORNA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= LLAMADA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= FUN_LINEA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= FUN_CADENA 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= FUN_OVALO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= FUN_CUADRADO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS ::= FUN_PUNTO 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS ::= DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= ASIGNA_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= SENTENCIAS ASIGNA_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= SENTENCIAS DECLARACION_ARR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= SENTENCIAS FUN_LINEA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIAS FUN_CADENA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS FUN_OVALO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENTENCIAS FUN_CUADRADO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS FUN_PUNTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS F_IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS CONTINUE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS BREAK 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS SENT_AUM_DEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS SENT_MIENTRAS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS SENT_SI 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS RETORNA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS LLAMADA 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES ::= MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACIONES STRUCT 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORTAR ::= importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORTAR ::= L_IMPORTAR importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= NT$1 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 L_IMPORTAR DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

