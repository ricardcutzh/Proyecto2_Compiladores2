
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 13 23:22:31 CST 2018
//----------------------------------------------------

package DppPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;
import DppPackage.DppAST.Valores.*;
import DppPackage.DppAST.Declaraciones.*;
import DppPackage.DppAST.Importaciones.*;
import DppPackage.DppAST.Sentencias.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 13 23:22:31 CST 2018
  */
public class DppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DppParser() {super();}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DppParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\020\002\000\002\007" +
    "\005\000\002\021\002\000\002\007\004\000\002\006\010" +
    "\000\002\006\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\015\006\000\002\015\004\000\002\012\010\000" +
    "\002\012\011\000\002\012\006\000\002\013\010\000\002" +
    "\013\011\000\002\013\011\000\002\013\012\000\002\013" +
    "\006\000\002\014\010\000\002\014\011\000\002\014\011" +
    "\000\002\014\012\000\002\014\006\000\002\011\005\000" +
    "\002\011\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\005\000\002\005\007\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\017\006\000" +
    "\002\017\006\000\002\002\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\022\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\042\000\044\ufffe\050\ufffe\001\002\000\020\033\027" +
    "\034\022\035\020\036\024\037\032\044\025\050\033\001" +
    "\002\000\004\042\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\022\033\027\034\022\035" +
    "\020\036\024\037\032\042\030\044\025\050\033\001\002" +
    "\000\004\006\012\001\002\000\004\051\013\001\002\000" +
    "\004\007\014\001\002\000\004\004\015\001\002\000\022" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\044" +
    "\ufffb\050\ufffb\001\002\000\022\002\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\044\ufff5\050\ufff5\001\002\000" +
    "\022\002\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\044\ufff3\050\ufff3\001\002\000\006\003\uffdb\050\uffdb\001" +
    "\002\000\022\002\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\044\ufff6\050\ufff6\001\002\000\006\003\uffdc\050" +
    "\uffdc\001\002\000\022\002\uffff\033\027\034\022\035\020" +
    "\036\024\037\032\044\025\050\033\001\002\000\006\003" +
    "\uffda\050\uffda\001\002\000\006\043\170\050\167\001\002" +
    "\000\022\002\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\044\ufff4\050\ufff4\001\002\000\006\003\uffdd\050\uffdd" +
    "\001\002\000\004\006\163\001\002\000\006\003\035\050" +
    "\036\001\002\000\006\003\uffd9\050\uffd9\001\002\000\006" +
    "\003\uffd8\050\uffd8\001\002\000\006\004\156\010\157\001" +
    "\002\000\004\004\155\001\002\000\014\003\040\004\uffd5" +
    "\005\037\006\041\010\uffd5\001\002\000\026\006\057\014" +
    "\063\032\061\040\065\041\064\045\067\046\062\047\060" +
    "\050\072\051\066\001\002\000\006\004\140\012\153\001" +
    "\002\000\020\007\043\033\027\034\022\035\020\036\024" +
    "\037\032\050\033\001\002\000\004\050\152\001\002\000" +
    "\004\011\146\001\002\000\006\007\046\010\045\001\002" +
    "\000\016\033\027\034\022\035\020\036\024\037\032\050" +
    "\033\001\002\000\004\011\047\001\002\000\020\012\051" +
    "\033\027\034\022\035\020\036\024\037\032\050\055\001" +
    "\002\000\020\012\141\033\027\034\022\035\020\036\024" +
    "\037\032\050\055\001\002\000\022\002\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\044\uffe3\050\uffe3\001\002" +
    "\000\020\012\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\050\ufff0\001\002\000\020\012\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\050\uffef\001\002\000\006\003" +
    "\035\050\136\001\002\000\010\003\uffd8\005\056\050\uffd8" +
    "\001\002\000\030\003\070\006\057\014\063\032\061\040" +
    "\065\041\064\045\067\046\062\047\060\050\072\051\066" +
    "\001\002\000\026\006\057\014\063\032\061\040\065\041" +
    "\064\045\067\046\062\047\060\050\072\051\066\001\002" +
    "\000\046\004\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\001" +
    "\002\000\026\006\057\014\063\032\061\040\065\041\064" +
    "\045\067\046\062\047\060\050\072\051\066\001\002\000" +
    "\046\004\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\001\002" +
    "\000\026\006\057\014\063\032\061\040\065\041\064\045" +
    "\067\046\062\047\060\050\072\051\066\001\002\000\046" +
    "\004\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\001\002\000" +
    "\046\004\uffb9\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\001\002" +
    "\000\046\004\uffba\007\uffba\010\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\001" +
    "\002\000\046\004\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\001\002\000\004\004\131\001\002\000\004\004\130\001" +
    "\002\000\046\004\uffb7\007\uffb7\010\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\001\002\000\044\004\uffd0\010\uffd0\013\111\014\103\015" +
    "\100\016\074\017\105\020\075\021\076\022\112\023\106" +
    "\024\104\025\110\026\107\027\077\030\102\031\101\001" +
    "\002\000\026\006\057\014\063\032\061\040\065\041\064" +
    "\045\067\046\062\047\060\050\072\051\066\001\002\000" +
    "\046\004\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\001\002" +
    "\000\046\004\uffbf\007\uffbf\010\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\001" +
    "\002\000\026\006\057\014\063\032\061\040\065\041\064" +
    "\045\067\046\062\047\060\050\072\051\066\001\002\000" +
    "\026\006\057\014\063\032\061\040\065\041\064\045\067" +
    "\046\062\047\060\050\072\051\066\001\002\000\026\006" +
    "\057\014\063\032\061\040\065\041\064\045\067\046\062" +
    "\047\060\050\072\051\066\001\002\000\026\006\057\014" +
    "\063\032\061\040\065\041\064\045\067\046\062\047\060" +
    "\050\072\051\066\001\002\000\026\006\057\014\063\032" +
    "\061\040\065\041\064\045\067\046\062\047\060\050\072" +
    "\051\066\001\002\000\026\006\057\014\063\032\061\040" +
    "\065\041\064\045\067\046\062\047\060\050\072\051\066" +
    "\001\002\000\026\006\057\014\063\032\061\040\065\041" +
    "\064\045\067\046\062\047\060\050\072\051\066\001\002" +
    "\000\026\006\057\014\063\032\061\040\065\041\064\045" +
    "\067\046\062\047\060\050\072\051\066\001\002\000\026" +
    "\006\057\014\063\032\061\040\065\041\064\045\067\046" +
    "\062\047\060\050\072\051\066\001\002\000\026\006\057" +
    "\014\063\032\061\040\065\041\064\045\067\046\062\047" +
    "\060\050\072\051\066\001\002\000\026\006\057\014\063" +
    "\032\061\040\065\041\064\045\067\046\062\047\060\050" +
    "\072\051\066\001\002\000\026\006\057\014\063\032\061" +
    "\040\065\041\064\045\067\046\062\047\060\050\072\051" +
    "\066\001\002\000\046\004\uffca\007\uffca\010\uffca\013\111" +
    "\014\103\015\100\016\074\017\105\020\075\021\076\022" +
    "\uffca\023\uffca\024\104\025\110\026\107\027\077\030\uffca" +
    "\031\uffca\001\002\000\046\004\uffcf\007\uffcf\010\uffcf\013" +
    "\uffcf\014\uffcf\015\100\016\074\017\105\020\075\021\076" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\001\002\000\046\004\uffc7\007\uffc7\010\uffc7" +
    "\013\111\014\103\015\100\016\074\017\105\020\075\021" +
    "\076\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\001\002\000\046\004\uffc5\007\uffc5\010" +
    "\uffc5\013\111\014\103\015\100\016\074\017\105\020\075" +
    "\021\076\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\001\002\000\046\004\uffc9\007\uffc9" +
    "\010\uffc9\013\111\014\103\015\100\016\074\017\105\020" +
    "\075\021\076\022\uffc9\023\uffc9\024\104\025\110\026\107" +
    "\027\077\030\uffc9\031\uffc9\001\002\000\046\004\uffcb\007" +
    "\uffcb\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\075\021\076\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002\000\046\004\uffc8" +
    "\007\uffc8\010\uffc8\013\111\014\103\015\100\016\074\017" +
    "\105\020\075\021\076\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\001\002\000\046\004" +
    "\uffce\007\uffce\010\uffce\013\uffce\014\uffce\015\100\016\074" +
    "\017\105\020\075\021\076\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\001\002\000\046" +
    "\004\uffc4\007\uffc4\010\uffc4\013\111\014\103\015\100\016" +
    "\074\017\105\020\075\021\076\022\112\023\106\024\104" +
    "\025\110\026\107\027\077\030\uffc4\031\uffc4\001\002\000" +
    "\046\004\uffc3\007\uffc3\010\uffc3\013\111\014\103\015\100" +
    "\016\074\017\105\020\075\021\076\022\112\023\106\024" +
    "\104\025\110\026\107\027\077\030\102\031\uffc3\001\002" +
    "\000\046\004\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\105\020\075\021\076\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\046\004\uffc6\007\uffc6\010\uffc6\013\111\014\103" +
    "\015\100\016\074\017\105\020\075\021\076\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\001\002\000\046\004\uffcc\007\uffcc\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\105\020\075\021\076\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\001\002\000\020\012\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\050\uffd2\001\002\000\020\012\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\050\uffd1\001\002" +
    "\000\046\004\uffc1\007\uffc1\010\uffc1\013\uffc1\014\uffc1\015" +
    "\100\016\074\017\105\020\075\021\076\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\001" +
    "\002\000\046\004\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\075\021\076\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\001\002\000\042\007\135\013\111\014\103\015\100\016" +
    "\074\017\105\020\075\021\076\022\112\023\106\024\104" +
    "\025\110\026\107\027\077\030\102\031\101\001\002\000" +
    "\046\004\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\001\002" +
    "\000\012\003\137\004\uffd5\005\037\010\uffd5\001\002\000" +
    "\004\004\140\001\002\000\006\004\uffd3\010\uffd3\001\002" +
    "\000\022\002\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\044\uffe1\050\uffe1\001\002\000\020\012\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\050\ufff2\001\002\000" +
    "\020\012\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\050\ufff1\001\002\000\004\050\145\001\002\000\006\007" +
    "\uffee\010\uffee\001\002\000\020\012\147\033\027\034\022" +
    "\035\020\036\024\037\032\050\055\001\002\000\022\002" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\044\uffe4" +
    "\050\uffe4\001\002\000\020\012\151\033\027\034\022\035" +
    "\020\036\024\037\032\050\055\001\002\000\022\002\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\044\uffe2\050" +
    "\uffe2\001\002\000\006\007\uffed\010\uffed\001\002\000\022" +
    "\002\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\044" +
    "\uffe0\050\uffe0\001\002\000\006\004\uffd4\010\uffd4\001\002" +
    "\000\024\002\uffde\012\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\044\uffde\050\uffde\001\002\000\024\002\uffdf" +
    "\012\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\044" +
    "\uffdf\050\uffdf\001\002\000\004\050\160\001\002\000\010" +
    "\004\uffd7\005\161\010\uffd7\001\002\000\026\006\057\014" +
    "\063\032\061\040\065\041\064\045\067\046\062\047\060" +
    "\050\072\051\066\001\002\000\006\004\uffd6\010\uffd6\001" +
    "\002\000\004\051\164\001\002\000\004\007\165\001\002" +
    "\000\004\004\166\001\002\000\022\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\042\ufffc\044\ufffc\050\ufffc\001\002" +
    "\000\006\003\201\006\202\001\002\000\006\003\171\006" +
    "\172\001\002\000\004\012\200\001\002\000\004\007\173" +
    "\001\002\000\004\011\174\001\002\000\020\012\175\033" +
    "\027\034\022\035\020\036\024\037\032\050\055\001\002" +
    "\000\022\002\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\044\uffec\050\uffec\001\002\000\020\012\177\033\027" +
    "\034\022\035\020\036\024\037\032\050\055\001\002\000" +
    "\022\002\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\044\uffeb\050\uffeb\001\002\000\022\002\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\044\uffea\050\uffea\001\002" +
    "\000\004\012\216\001\002\000\020\007\203\033\027\034" +
    "\022\035\020\036\024\037\032\050\033\001\002\000\004" +
    "\011\212\001\002\000\006\007\205\010\045\001\002\000" +
    "\004\011\206\001\002\000\020\012\210\033\027\034\022" +
    "\035\020\036\024\037\032\050\055\001\002\000\020\012" +
    "\211\033\027\034\022\035\020\036\024\037\032\050\055" +
    "\001\002\000\022\002\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\044\uffe8\050\uffe8\001\002\000\022\002\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\044\uffe6\050" +
    "\uffe6\001\002\000\020\012\214\033\027\034\022\035\020" +
    "\036\024\037\032\050\055\001\002\000\020\012\215\033" +
    "\027\034\022\035\020\036\024\037\032\050\055\001\002" +
    "\000\022\002\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\044\uffe9\050\uffe9\001\002\000\022\002\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\044\uffe7\050\uffe7\001" +
    "\002\000\022\002\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\044\uffe5\050\uffe5\001\002\000\022\002\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\044\ufff9\050\ufff9" +
    "\001\002\000\022\002\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\044\ufff7\050\ufff7\001\002\000\022\002\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\044\ufffa\050" +
    "\ufffa\001\002\000\022\002\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\044\ufff8\050\ufff8\001\002\000\022\002" +
    "\ufffd\033\027\034\022\035\020\036\024\037\032\044\025" +
    "\050\033\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\007\005\020\004\021\003\001\001\000" +
    "\016\004\030\010\222\011\020\012\015\013\025\014\016" +
    "\001\001\000\004\006\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\030\010\022\011\020\012\015" +
    "\013\025\014\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\030\011\220" +
    "\012\216\013\221\014\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\153\003\072\001\001\000\002\001" +
    "\001\000\006\004\041\015\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\143\001" +
    "\001\000\002\001\001\000\012\004\053\011\051\016\047" +
    "\017\052\001\001\000\010\004\053\011\141\017\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\033\001\001\000\002\001\001\000\006\002" +
    "\070\003\072\001\001\000\004\003\133\001\001\000\002" +
    "\001\001\000\004\003\132\001\001\000\002\001\001\000" +
    "\004\003\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\125\001\001\000\004\003\124\001\001\000\004" +
    "\003\123\001\001\000\004\003\122\001\001\000\004\003" +
    "\121\001\001\000\004\003\120\001\001\000\004\003\117" +
    "\001\001\000\004\003\116\001\001\000\004\003\115\001" +
    "\001\000\004\003\114\001\001\000\004\003\113\001\001" +
    "\000\004\003\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\053\011\051\016\147\017\052\001\001\000\002\001\001" +
    "\000\010\004\053\011\141\017\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\161\003\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\053\011\051\016\175\017\052\001\001\000\002" +
    "\001\001\000\010\004\053\011\141\017\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\041\015\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\053\011\051\016\206" +
    "\017\052\001\001\000\010\004\053\011\141\017\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\053" +
    "\011\051\016\212\017\052\001\001\000\010\004\053\011" +
    "\141\017\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\030\011\220" +
    "\012\216\013\221\014\217\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;

    public static String PathProyecto;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public static DppASTTree inicial;

    public void syntax_error(Symbol s)
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      //System.err.println("hubo un error: "+s.value.toString());
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));*/
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DppParser$actions {


    String ArchivoOrigen;

    String PathProyecto;

    public void SetArchivo(String nombre)
    {
        ArchivoOrigen = nombre;
    }

    public void SetPathProyecto(String path)
    {
        PathProyecto = path;
    }

  private final DppParser parser;

  /** Constructor */
  CUP$DppParser$actions(DppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DppParser$do_action(
    int                        CUP$DppParser$act_num,
    java_cup.runtime.lr_parser CUP$DppParser$parser,
    java.util.Stack            CUP$DppParser$stack,
    int                        CUP$DppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DppParser$result;

      /* select the action based on the action number */
      switch (CUP$DppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        Identificador i = new Identificador(idright, idleft, ArchivoOrigen, id);
        RESULT = i;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= falso 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= verdadero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= dataString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= dataChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //

        Character real = val.charAt(0);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= numDecimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        double real = Double.parseDouble(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= numEntero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        int real = Integer.parseInt(val);
        ValorPrimitivo v = new ValorPrimitivo(valright, valleft, ArchivoOrigen, real);
        RESULT = v;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= oParent E cParent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
        //
        RESULT = e;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E dec 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E inc 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.INC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= menos E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= not E 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp = (Expresion)val;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp, InfoEstatica.Estatico.OPERADORES.DEC);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E or E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.OR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E and E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.AND);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYORIGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E mayor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAYOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E menor E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOR);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E diff E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIFERENTE);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E igual E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.IGUAL);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E pot E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.POT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E div E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.DIV);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E mult E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MULT);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E menos E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MENOS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E mas E 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        //
        Expresion exp1 = (Expresion)val1;
        Expresion exp2 = (Expresion)val2;
        Operacion o = new Operacion(auxright, auxleft, ArchivoOrigen, exp1, exp2, InfoEstatica.Estatico.OPERADORES.MAS);
        RESULT = o;
    
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
        RESULT = e;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION_VAR ::= identificador asigna error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'= Expresion'");
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    Expresion e = (Expresion)exp;
                    AsignacionVar a = new AsignacionVar(idright, idleft, ArchivoOrigen, e, id);
                    RESULT = a;
                
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",13, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_DECLARACION ::= identificador error ptComa 
            {
              Object RESULT =null;
		
                parser.expected.add("'= Expresion'");
                parser.expected.add("';'");
                parser.expected.add("','");
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L_DECLARACION ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_DECLARACION ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                ArrayList<NodoIDValor> nodos = new ArrayList<>();
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_DECLARACION ::= L_DECLARACION coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                Expresion exp = (Expresion)nodo;
                NodoIDValor n = new NodoIDValor(id, exp, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_DECLARACION ::= L_DECLARACION coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                if(nodos==null){nodos = new ArrayList<>();}
                NodoIDValor n = new NodoIDValor(id, null, idright, idleft, ArchivoOrigen);
                nodos.add(n);
                RESULT = nodos;
             
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            RESULT = id.toUpperCase();
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= booleano 
            {
              Object RESULT =null;
		
            RESULT = "BOOLEAN";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= caracter 
            {
              Object RESULT =null;
		
            RESULT = "CARACTER";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= cadena 
            {
              Object RESULT =null;
		
            RESULT = "CADENA";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= decimal 
            {
              Object RESULT =null;
		
            RESULT = "DECIMAL";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= entero 
            {
              Object RESULT =null;
		
            RESULT = "ENTERO";
       
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_VAR ::= TIPO error ptComa 
            {
              Object RESULT =null;
		
                    parser.expected.add("'identificador'");
                    parser.expected.add("'identificador = Expresion'");
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_VAR ::= TIPO L_DECLARACION ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
                    String tipo = (String)aux;
                    ArrayList<NodoIDValor> nodos = (ArrayList<NodoIDValor>)lista;
                    if(nodos==null){nodos = new ArrayList<>();}
                    DeclaracionVar d = new DeclaracionVar(auxright, auxleft, ArchivoOrigen, nodos,tipo);
                    RESULT = d;
                 
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",7, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES ::= TIPO identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'()'");
            parser.expected.add("'(PARAMETROS)'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES ::= TIPO identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null){s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES ::= TIPO identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES ::= TIPO identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            String t = (String)tipo;
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionFuncion f = new DeclaracionFuncion(idright, idleft, ArchivoOrigen, t, id, p, s);
            RESULT = f;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",10, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOS ::= vacio identificador error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
            parser.expected.add("'( PARAMETROS )'");
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)).value;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista2;
            if(p==null){p = new ArrayList<>();}
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-7)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOS ::= vacio identificador oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) { s = new ArrayList<>();}
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOS ::= vacio identificador oParent PARAMETROS cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOS ::= vacio identificador oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            ArrayList<NodoParametro> p = new ArrayList<>();
            DeclaracionMetodo m = new DeclaracionMetodo(idright, idleft, ArchivoOrigen, id, p, s);
            RESULT = m;
        
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAIN ::= vacio principal error cKey 
            {
              Object RESULT =null;
		
            parser.expected.add("'('");
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MAIN ::= vacio principal oParent cParent oKey SENTENCIAS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		
            ArrayList<Object> s = (ArrayList<Object>)lista;
            if(s==null) {s = new ArrayList<>();}
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-6)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MAIN ::= vacio principal oParent cParent oKey cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		
            ArrayList<Object> s = new ArrayList<>();
            DeclaracionMain m = new DeclaracionMain(auxright, auxleft, ArchivoOrigen,s);
            RESULT = m;
      
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("MAIN",8, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= TIPO identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = new ArrayList<>();
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= PARAMETROS coma TIPO identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                ArrayList<NodoParametro> p = (ArrayList<NodoParametro>)lista;
                if(p==null){p = new ArrayList<>();}
                String t = (String)tipo;
                NodoParametro n = new NodoParametro(id, t, false);
                p.add(n);
                RESULT = p;
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-3)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = new ArrayList<>();
            if(nodo!=null)
            {
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= SENTENCIAS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
            ArrayList<Object> sentencias = (ArrayList<Object>)lista;
            if(sentencias==null){sentencias = new ArrayList<>();}
            if(nodo!=null){
                sentencias.add(nodo);
            }
            RESULT = sentencias;
          
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACIONES MAIN 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null)
                {
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION_VAR 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.peek()).value;
		
                NodoAST n = (NodoAST)nodo;
                if(n!=null){
                    parser.inicial.addNodo(n);
                }
                RESULT = "";
            
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_IMPORTAR ::= importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_IMPORTAR ::= L_IMPORTAR importar oParent dataString cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-4)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;
		
                DppASTTree temporal = parser.inicial;
                Importacion im = new Importacion(auxright, auxleft, ArchivoOrigen,(String)ruta, PathProyecto);
                Object temp = im.generateByteCode(null);
                if(temp!=null)
                {
                    DppASTTree t = (DppASTTree)temp;
                    for(NodoAST n : t.nodos)
                    {
                        temporal.addNodo(n);
                    }
                }
                parser.inicial = temporal;
                RESULT = "";
           
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("L_IMPORTAR",4, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-5)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= NT$1 DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 L_IMPORTAR DECLARACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)).value;

              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-2)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; this.PathProyecto = parser.PathProyecto; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>(); parser.inicial = new DppASTTree(0,0, ArchivoOrigen);
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          return CUP$DppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)).value;
		RESULT = start_val;
              CUP$DppParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DppParser$stack.elementAt(CUP$DppParser$top-1)), ((java_cup.runtime.Symbol)CUP$DppParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DppParser$parser.done_parsing();
          return CUP$DppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

