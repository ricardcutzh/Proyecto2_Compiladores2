/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.FileTree.FileSystemModel;
import GUI.TextEditorPanel.WebAssEditor;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import InfoEstatica.Estatico;
import ObjsComun.BreakPointNode;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author richard
 */
public class IDE extends javax.swing.JFrame {

    int status = 0;
    String directorioProyecto = "";
    String toCreate = "";
    String SelectedFile = "";

    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        ImageIcon img = new ImageIcon(this.getClass().getResource("Iconos/coding.png"));
        this.setIconImage(img.getImage());
        this.ArbolArchivos.setVisible(false);
        ActivaLasOpciones(false);
        
        //INICIALIZO TODO 
        Estatico.setUp(this.Consola, this.TablaError, this.SimbolTable);
        Estatico.pilitaTable = this.PilitaTable;
        Estatico.StackTable = this.StackTable;
        Estatico.HeapTable = this.HeapTable;
        Estatico.colocaTablaBreaks(TablaBreaks);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        BotonCrearArchivo = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        BotonCrearCarpeta = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        DeleteFile = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        openFIle = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BotonAbrirProyecto = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        BotonGuardarActual = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        BotonCerrarActual = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ButtonRun = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        BotonDebug = new javax.swing.JButton();
        NextLine = new javax.swing.JButton();
        NextBreakPoint = new javax.swing.JButton();
        StopDebugger = new javax.swing.JButton();
        ClearHigh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        DirToCreate = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaError = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        SimbolTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaBreaks = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        PilitaTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        StackTable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        HeapTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        ArbolArchivos = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        EditorTab = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        HideTabs = new javax.swing.JMenu();
        opc1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IDE Web Assembly");

        jPanel1.setBackground(new java.awt.Color(79, 79, 79));
        jPanel1.setAutoscrolls(true);

        jToolBar1.setBackground(new java.awt.Color(204, 204, 204));
        jToolBar1.setRollover(true);

        BotonCrearArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/add-file.png"))); // NOI18N
        BotonCrearArchivo.setToolTipText("Nuevo Archivo");
        BotonCrearArchivo.setFocusable(false);
        BotonCrearArchivo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        BotonCrearArchivo.setOpaque(false);
        BotonCrearArchivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCrearArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCrearArchivoActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonCrearArchivo);
        jToolBar1.add(jSeparator1);

        BotonCrearCarpeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/folder.png"))); // NOI18N
        BotonCrearCarpeta.setToolTipText("Nueva Carpeta");
        BotonCrearCarpeta.setFocusable(false);
        BotonCrearCarpeta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCrearCarpeta.setOpaque(false);
        BotonCrearCarpeta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCrearCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCrearCarpetaActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonCrearCarpeta);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/vertical-ellipsis (1).png"))); // NOI18N
        jToolBar1.add(jLabel4);

        DeleteFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/file (1).png"))); // NOI18N
        DeleteFile.setToolTipText("Eliminar Archivo Seleccionado");
        DeleteFile.setFocusable(false);
        DeleteFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DeleteFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        DeleteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFileActionPerformed(evt);
            }
        });
        jToolBar1.add(DeleteFile);
        jToolBar1.add(jSeparator6);

        openFIle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/opnf.png"))); // NOI18N
        openFIle.setToolTipText("Abrir Archivo Seleccionado");
        openFIle.setFocusable(false);
        openFIle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFIle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFIle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFIleActionPerformed(evt);
            }
        });
        jToolBar1.add(openFIle);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/vertical-ellipsis (1).png"))); // NOI18N
        jToolBar1.add(jLabel1);

        BotonAbrirProyecto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/packing.png"))); // NOI18N
        BotonAbrirProyecto.setToolTipText("Abrir Proyecto");
        BotonAbrirProyecto.setFocusable(false);
        BotonAbrirProyecto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonAbrirProyecto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonAbrirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAbrirProyectoActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonAbrirProyecto);
        jToolBar1.add(jSeparator2);

        BotonGuardarActual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/save.png"))); // NOI18N
        BotonGuardarActual.setToolTipText("Guardar Actual");
        BotonGuardarActual.setFocusable(false);
        BotonGuardarActual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonGuardarActual.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonGuardarActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActualActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonGuardarActual);
        jToolBar1.add(jSeparator3);

        BotonCerrarActual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/file.png"))); // NOI18N
        BotonCerrarActual.setToolTipText("Cerrar Pestana Actual");
        BotonCerrarActual.setFocusable(false);
        BotonCerrarActual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCerrarActual.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCerrarActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCerrarActualActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonCerrarActual);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/vertical-ellipsis (1).png"))); // NOI18N
        jToolBar1.add(jLabel2);

        ButtonRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/movie-player-play-button.png"))); // NOI18N
        ButtonRun.setToolTipText("Compilar");
        ButtonRun.setFocusable(false);
        ButtonRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRun.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRunActionPerformed(evt);
            }
        });
        jToolBar1.add(ButtonRun);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/vertical-ellipsis (1).png"))); // NOI18N
        jToolBar1.add(jLabel5);

        BotonDebug.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/debug.png"))); // NOI18N
        BotonDebug.setToolTipText("Debug");
        BotonDebug.setFocusable(false);
        BotonDebug.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDebug.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDebugActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonDebug);

        NextLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/skip.png"))); // NOI18N
        NextLine.setToolTipText("Siguiente Linea");
        NextLine.setFocusable(false);
        NextLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NextLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NextLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextLineActionPerformed(evt);
            }
        });
        jToolBar1.add(NextLine);

        NextBreakPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/next.png"))); // NOI18N
        NextBreakPoint.setToolTipText("Siguiente Punto");
        NextBreakPoint.setFocusable(false);
        NextBreakPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NextBreakPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NextBreakPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextBreakPointActionPerformed(evt);
            }
        });
        jToolBar1.add(NextBreakPoint);

        StopDebugger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/stop.png"))); // NOI18N
        StopDebugger.setToolTipText("Detener Debugger");
        StopDebugger.setFocusable(false);
        StopDebugger.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StopDebugger.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        StopDebugger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopDebuggerActionPerformed(evt);
            }
        });
        jToolBar1.add(StopDebugger);

        ClearHigh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/highlighter.png"))); // NOI18N
        ClearHigh.setToolTipText("Quitar Marcas");
        ClearHigh.setFocusable(false);
        ClearHigh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ClearHigh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ClearHigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearHighActionPerformed(evt);
            }
        });
        jToolBar1.add(ClearHigh);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/vertical-ellipsis (1).png"))); // NOI18N
        jToolBar1.add(jLabel3);

        DirToCreate.setText("Directorio Seleccionado:");
        jToolBar1.add(DirToCreate);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        TablaError.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        TablaError.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo de Error", "Lexema", "Mensaje", "Linea", "Columna", "Archivo Origen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaError.setRowHeight(30);
        TablaError.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TablaError);

        jTabbedPane1.addTab("Errores", new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/cancel.png")), jScrollPane1); // NOI18N

        Consola.setEditable(false);
        Consola.setBackground(new java.awt.Color(0, 0, 0));
        Consola.setColumns(20);
        Consola.setFont(new java.awt.Font("Ubuntu Light", 0, 16)); // NOI18N
        Consola.setForeground(new java.awt.Color(255, 255, 255));
        Consola.setRows(5);
        Consola.setText(">> Web Assembly Console | Compiladores 2 | 2015003476");
        jScrollPane2.setViewportView(Consola);

        jTabbedPane1.addTab("Consola", new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/terminal.png")), jScrollPane2); // NOI18N

        SimbolTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ambito", "Nombre", "Tipo", "Linea", "Columna", "Tamano", "Es Arreglo", "Rol"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(SimbolTable);

        jTabbedPane1.addTab("Tabla de Simbolos", new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/table-grid.png")), jScrollPane3); // NOI18N

        TablaBreaks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TablaBreaks.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        TablaBreaks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero de Linea", "Archivo de Origen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TablaBreaks);

        jTabbedPane1.addTab("BreakPoints", new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/break.png")), jScrollPane5); // NOI18N

        PilitaTable.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        PilitaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor", "Indice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(PilitaTable);

        jTabbedPane2.addTab("Pila Auxiliar", jScrollPane7);

        StackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor", "Indice"
            }
        ));
        jScrollPane8.setViewportView(StackTable);

        jTabbedPane2.addTab("Stack Ambitos", jScrollPane8);

        HeapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor", "Indice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(HeapTable);

        jTabbedPane2.addTab("Heap", jScrollPane9);

        jScrollPane6.setViewportView(jTabbedPane2);

        jTabbedPane1.addTab("Dasm", new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/dasm.png")), jScrollPane6); // NOI18N

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("File Explorer"));

        ArbolArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ArbolArchivosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(ArbolArchivos);

        jPanel2.setForeground(new java.awt.Color(204, 204, 204));
        jPanel2.setOpaque(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1294, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditorTab)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .addComponent(EditorTab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/add-file.png"))); // NOI18N
        jMenuItem1.setText("Nuevo Archivo");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/folder.png"))); // NOI18N
        jMenuItem2.setText("Nueva Carpeta");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        HideTabs.setText("Opciones");

        opc1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/hide.png"))); // NOI18N
        opc1.setText("Ocultar Salidas");
        opc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opc1ActionPerformed(evt);
            }
        });
        HideTabs.add(opc1);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/break.png"))); // NOI18N
        jMenuItem3.setText("Agregar BreakPoint");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        HideTabs.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/eraser.png"))); // NOI18N
        jMenuItem4.setText("Clear BreakPoints");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        HideTabs.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Iconos/refresh-button.png"))); // NOI18N
        jMenuItem5.setText("Refrescar Proyecto");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        HideTabs.add(jMenuItem5);

        jMenuBar1.add(HideTabs);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opc1ActionPerformed
        // TODO add your handling code here:
        if (status == 1) {
            this.jTabbedPane1.setVisible(true);
            ImageIcon img = new ImageIcon(this.getClass().getResource("Iconos/hide.png"));
            opc1.setIcon(img);
            opc1.setText("Ocultar Salidas");
            status = 0;
        } else {
            this.jTabbedPane1.setVisible(false);
            ImageIcon img = new ImageIcon(this.getClass().getResource("Iconos/focus.png"));
            opc1.setIcon(img);
            opc1.setText("Ver Salidas");
            status = 1;
        }
    }//GEN-LAST:event_opc1ActionPerformed

    private void ActivaLasOpciones(boolean bandera) {
        this.BotonCrearArchivo.setEnabled(bandera);
        this.BotonCrearCarpeta.setEnabled(bandera);
        this.BotonCerrarActual.setEnabled(bandera);
        this.BotonDebug.setEnabled(bandera);
        this.BotonGuardarActual.setEnabled(bandera);
        this.ButtonRun.setEnabled(bandera);
        this.DeleteFile.setEnabled(bandera);
        this.openFIle.setEnabled(bandera);
        this.NextBreakPoint.setEnabled(bandera);
        this.NextLine.setEnabled(bandera);
        this.StopDebugger.setEnabled(bandera);
        this.ClearHigh.setEnabled(bandera);
    }
    
    private void BotonCrearArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCrearArchivoActionPerformed
        // TODO add your handling code here:
        if (!this.toCreate.equals("")) {
            String fileName = JOptionPane.showInputDialog(this, "Ingrese Nombre del Archivo", "Nuevo Archivo", JOptionPane.OK_CANCEL_OPTION);
            if (!fileName.equals("")) {
                try {
                    File nuevo = new File(this.toCreate + "/" + fileName);
                    if (!nuevo.exists()) {
                        nuevo.createNewFile();
                        this.ArbolArchivos.setModel(new FileSystemModel(new File(this.directorioProyecto)));
                    } else {
                        JOptionPane.showMessageDialog(this, "Este Archivo ya existe en el directorio seleccionado", "Error: Crear Nuevo Archivo", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ocurrio un Error al crear el archivo en: " + this.toCreate + "/" + fileName + " | Mensaje: " + e.getMessage(), "Error: Crear Nuevo Archivo", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "NO se creo el archivo", "Error: Crear Nuevo Archivo", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Existe una Ruta Seleccionada", "Error: Crear Nuevo Archivo", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonCrearArchivoActionPerformed

    private void BotonCrearCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCrearCarpetaActionPerformed
        // TODO add your handling code here:
        if (!this.toCreate.equals("")) {
            String folderName = JOptionPane.showInputDialog(this, "Ingrese Nombre del Archivo", "Nuevo Archivo", JOptionPane.OK_CANCEL_OPTION);
            if (!folderName.equals("")) {
                try {
                    File f = new File(this.toCreate + "/" + folderName);
                    if (!f.exists()) {
                        f.mkdir();
                        this.ArbolArchivos.setModel(new FileSystemModel(new File(this.directorioProyecto)));
                    } else {
                        JOptionPane.showMessageDialog(this, "Este Folder ya existe en el directorio seleccionado", "Error: Crear Nuevo Folder", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ocurrio un Error al crear el archivo en: " + this.toCreate + "/" + folderName + " | Mensaje: " + e.getMessage(), "Error: Crear Nuevo Folder", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "NO se creo el Directorio", "Error: Crear Nuevo Directorio", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Existe una Ruta Seleccionada", "Error: Crear Nueva Carpeta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonCrearCarpetaActionPerformed

    private void BotonAbrirProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAbrirProyectoActionPerformed
        // TODO add your handling code here:
        JFileChooser seleccionar = new JFileChooser();
        seleccionar.setCurrentDirectory(new File("."));
        seleccionar.setDialogTitle("Selecciona Un Proyecto (Directorio)");
        seleccionar.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        seleccionar.setAcceptAllFileFilterUsed(false);
        if (seleccionar.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.ArbolArchivos.setModel(new FileSystemModel(new File(seleccionar.getSelectedFile().toString())));
            this.directorioProyecto = seleccionar.getSelectedFile().toString();
            this.DirToCreate.setText("Directorio Seleccionado: " + directorioProyecto);
            this.toCreate = directorioProyecto;
            InfoEstatica.Estatico.proyectPath = toCreate;
            this.ArbolArchivos.setVisible(true);
            ActivaLasOpciones(true);
        } else {
            JOptionPane.showMessageDialog(this, "No se selecciono Ningun Proyecto", "Sin Seleccion", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_BotonAbrirProyectoActionPerformed

    private void BotonGuardarActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActualActionPerformed
        // TODO add your handling code here:
        for(int x = 0; x < this.EditorTab.getTabCount(); x++)
        {
            Object o = EditorTab.getComponentAt(x);
            if(o instanceof WebAssEditor)
            {
                WebAssEditor aux = (WebAssEditor)o;
                aux.saveFile();
            }
        }
        JOptionPane.showMessageDialog(this, "Todos los archivos fueron guardados", "Guardado", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BotonGuardarActualActionPerformed

    private void BotonCerrarActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCerrarActualActionPerformed
        // TODO add your handling code here:
        if(EditorTab.getTabCount()>0)
        {
            EditorTab.remove(EditorTab.getSelectedIndex());
        }
        else{
            JOptionPane.showMessageDialog(this, "No hay Tabs Abiertas!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonCerrarActualActionPerformed

    private void ButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRunActionPerformed
        // TODO add your handling code here:
        Estatico.Pestanas = EditorTab; // REFERENCIA A LAS PESTANAS
        Estatico.setUp(Consola, TablaError, SimbolTable);
        Estatico.mod = Estatico.MODALIDAD.RUN_MODE;
        if(EditorTab.getTabCount() > 0)
        {
            int x = EditorTab.getTabCount();
            Object c = EditorTab.getSelectedComponent();
            if(c instanceof WebAssEditor)
            {
                WebAssEditor aux = (WebAssEditor)c;
                aux.EjecutarAnalisis();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "No hay Tabs Para Leer!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ButtonRunActionPerformed

    private void BotonDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDebugActionPerformed
        // TODO add your handling code here:
        Estatico.Pestanas = EditorTab;//REFERENCIA A LAS PESTANAS
        Estatico.setUp(Consola, TablaError, SimbolTable);
        Estatico.mod = Estatico.MODALIDAD.DEBUGG_MODE;
        if(EditorTab.getTabCount() > 0)
        {
            Object c = EditorTab.getSelectedComponent();
            if(c instanceof WebAssEditor)
            {
                WebAssEditor aux = (WebAssEditor)c;
                aux.EjecutarAnalisis();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "No hay Tabs Para Leer!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonDebugActionPerformed

    private void ArbolArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ArbolArchivosMouseClicked
        // TODO add your handling code here:
        try {
            String pr = ArbolArchivos.getSelectionPath().toString().replaceAll("[\\[\\]]", "").replace(", ", "/");
            File f = new File(pr);
            if (f.exists()) {
                if (f.isDirectory()) {
                    this.DirToCreate.setText("Directorio Seleccionado: " + pr);
                    this.toCreate = pr;
                }
                if (f.isFile()) {
                    this.SelectedFile = pr;
                }
            }
        } catch (Exception e) {
            
        }

    }//GEN-LAST:event_ArbolArchivosMouseClicked

    private void DeleteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFileActionPerformed
        // TODO add your handling code here:
        if (!this.SelectedFile.equals("")) {
            
        } else {
            JOptionPane.showMessageDialog(this, "No Existe un Archivo Seleccionado!", "Error: Eliminar Archivo", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteFileActionPerformed

    private void openFIleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFIleActionPerformed
        // TODO add your handling code here:
        if (!this.SelectedFile.equals("")) 
        {
            WebAssEditor txt = new WebAssEditor(this.SelectedFile, this.directorioProyecto);
            this.EditorTab.addTab(txt.getFileName(), txt);
        } else {
            JOptionPane.showMessageDialog(this, "No Existe un Archivo Seleccionado!", "Error: Abrir Archivo", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openFIleActionPerformed

    private void NextLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextLineActionPerformed
        // TODO add your handling code here:
        if(Estatico.suspended)
        {
            try {
                Estatico.esLinea = true;
                Estatico.hilo.resume();
            } catch (Exception e) {
            }
            
        }
    }//GEN-LAST:event_NextLineActionPerformed

    private void NextBreakPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextBreakPointActionPerformed
        // TODO add your handling code here:
        if(Estatico.suspended)
        {
            try {
                Estatico.suspended = false;
                Estatico.esLinea = false;
                Estatico.hilo.resume();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_NextBreakPointActionPerformed

    private void StopDebuggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopDebuggerActionPerformed
        // TODO add your handling code here:
        try {
            Estatico.hilo.stop();
            Estatico.suspended = true;
            JOptionPane.showMessageDialog(this, "Debugger finalizado", "Proceso terminado", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_StopDebuggerActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if(EditorTab.getTabCount()>0)
        {
            Object c = EditorTab.getSelectedComponent();
            if(c instanceof WebAssEditor)
            {
                WebAssEditor aux = (WebAssEditor)c;
                String archivo = aux.getFileName();
                SpinnerModel modelo = new SpinnerNumberModel(1, 1, aux.areaEdicion.getLineCount(), 1);
                JSpinner numLinea = new JSpinner(modelo);
                
                JLabel l = new JLabel(archivo);
                Object[] message = {"Archivo: ", l, "Linea: ", numLinea};
                int option = JOptionPane.showConfirmDialog(this, message, "Agregar BreakPoint", JOptionPane.OK_CANCEL_OPTION);
                if(option == JOptionPane.OK_OPTION)
                {
                    //System.err.println("Linea: "+numLinea.getValue().toString());
                    int line = Integer.parseInt(numLinea.getValue().toString()) - 1;
                    String key = line + "_"+archivo;
                    if(!Estatico.breakPoints.containsKey(key))
                    {
                        Estatico.breakPoints.put(key, new BreakPointNode(archivo, line));
                        Estatico.agregarBreakPoint(archivo, line);
                    }
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "No hay Tabs Abiertas para colocar un BreakPoint", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        Estatico.breakPoints.clear();
        Estatico.resetBreaks();
        JOptionPane.showMessageDialog(this, "Registro de BreakPoints Limpiado", "Clear BreakPoints!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void ClearHighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearHighActionPerformed
        // TODO add your handling code here:
        //Estatico.quitarMarcas();
        Estatico.desmarcarTodo();
    }//GEN-LAST:event_ClearHighActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        try {
            if(!this.directorioProyecto.equals(""))
            {
                this.ArbolArchivos.setModel(new FileSystemModel(new File(this.directorioProyecto)));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree ArbolArchivos;
    private javax.swing.JButton BotonAbrirProyecto;
    private javax.swing.JButton BotonCerrarActual;
    private javax.swing.JButton BotonCrearArchivo;
    private javax.swing.JButton BotonCrearCarpeta;
    private javax.swing.JButton BotonDebug;
    private javax.swing.JButton BotonGuardarActual;
    private javax.swing.JButton ButtonRun;
    private javax.swing.JButton ClearHigh;
    private javax.swing.JTextArea Consola;
    private javax.swing.JButton DeleteFile;
    private javax.swing.JLabel DirToCreate;
    private javax.swing.JTabbedPane EditorTab;
    private javax.swing.JTable HeapTable;
    private javax.swing.JMenu HideTabs;
    private javax.swing.JButton NextBreakPoint;
    private javax.swing.JButton NextLine;
    private javax.swing.JTable PilitaTable;
    private javax.swing.JTable SimbolTable;
    private javax.swing.JTable StackTable;
    private javax.swing.JButton StopDebugger;
    private javax.swing.JTable TablaBreaks;
    private javax.swing.JTable TablaError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem opc1;
    private javax.swing.JButton openFIle;
    // End of variables declaration//GEN-END:variables
}
