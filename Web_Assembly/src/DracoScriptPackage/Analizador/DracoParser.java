
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 27 23:35:48 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import DracoScriptPackage.DracoAST.Valores.*;
import DracoScriptPackage.DracoAST.Declaraciones.*;
import DracoScriptPackage.DracoAST.Sentencias.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 27 23:35:48 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\011\002\000\002\010" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\003\000\002" +
    "\007\005\000\002\006\007\000\002\006\005\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\032\000\033\000\001\002\000\006\032" +
    "\010\033\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\003\106\006\107\001\002\000" +
    "\006\003\016\036\017\001\002\000\010\002\uffff\032\010" +
    "\033\007\001\002\000\010\002\ufffb\032\ufffb\033\ufffb\001" +
    "\002\000\010\002\ufffc\032\ufffc\033\ufffc\001\002\000\010" +
    "\002\ufffd\032\ufffd\033\ufffd\001\002\000\010\002\ufffe\032" +
    "\ufffe\033\ufffe\001\002\000\004\004\105\001\002\000\010" +
    "\004\ufff6\005\103\010\ufff6\001\002\000\006\004\022\010" +
    "\021\001\002\000\004\036\023\001\002\000\010\002\ufffa" +
    "\032\ufffa\033\ufffa\001\002\000\010\004\ufff8\005\024\010" +
    "\ufff8\001\002\000\026\006\025\012\033\030\026\034\035" +
    "\035\031\036\037\037\034\040\030\041\027\042\032\001" +
    "\002\000\026\006\025\012\033\030\026\034\035\035\031" +
    "\036\037\037\034\040\030\041\027\042\032\001\002\000" +
    "\026\006\025\012\033\030\026\034\035\035\031\036\037" +
    "\037\034\040\030\041\027\042\032\001\002\000\050\004" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\001\002" +
    "\000\050\004\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031" +
    "\uffd8\001\002\000\050\004\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\031\uffdb\001\002\000\050\004\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\031\uffdd\001\002\000\026\006\025" +
    "\012\033\030\026\034\035\035\031\036\037\037\034\040" +
    "\030\041\027\042\032\001\002\000\050\004\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\031\uffd9\001\002\000\050\004" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\001\002" +
    "\000\006\004\ufff7\010\ufff7\001\002\000\050\004\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\031\uffda\001\002\000\050" +
    "\004\ufff2\007\ufff2\010\ufff2\011\057\012\047\013\045\014" +
    "\041\015\052\016\042\017\043\020\060\021\054\022\051" +
    "\023\056\024\055\025\044\026\050\027\046\031\053\001" +
    "\002\000\026\006\025\012\033\030\026\034\035\035\031" +
    "\036\037\037\034\040\030\041\027\042\032\001\002\000" +
    "\050\004\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\001\002\000\050\004\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\031\uffe0\001\002\000\026\006\025\012\033\030\026" +
    "\034\035\035\031\036\037\037\034\040\030\041\027\042" +
    "\032\001\002\000\026\006\025\012\033\030\026\034\035" +
    "\035\031\036\037\037\034\040\030\041\027\042\032\001" +
    "\002\000\026\006\025\012\033\030\026\034\035\035\031" +
    "\036\037\037\034\040\030\041\027\042\032\001\002\000" +
    "\026\006\025\012\033\030\026\034\035\035\031\036\037" +
    "\037\034\040\030\041\027\042\032\001\002\000\026\006" +
    "\025\012\033\030\026\034\035\035\031\036\037\037\034" +
    "\040\030\041\027\042\032\001\002\000\026\006\025\012" +
    "\033\030\026\034\035\035\031\036\037\037\034\040\030" +
    "\041\027\042\032\001\002\000\026\006\025\012\033\030" +
    "\026\034\035\035\031\036\037\037\034\040\030\041\027" +
    "\042\032\001\002\000\026\006\025\012\033\030\026\034" +
    "\035\035\031\036\037\037\034\040\030\041\027\042\032" +
    "\001\002\000\026\006\025\012\033\030\026\034\035\035" +
    "\031\036\037\037\034\040\030\041\027\042\032\001\002" +
    "\000\026\006\025\012\033\030\026\034\035\035\031\036" +
    "\037\037\034\040\030\041\027\042\032\001\002\000\026" +
    "\006\025\012\033\030\026\034\035\035\031\036\037\037" +
    "\034\040\030\041\027\042\032\001\002\000\026\006\025" +
    "\012\033\030\026\034\035\035\031\036\037\037\034\040" +
    "\030\041\027\042\032\001\002\000\026\006\025\012\033" +
    "\030\026\034\035\035\031\036\037\037\034\040\030\041" +
    "\027\042\032\001\002\000\050\004\uffeb\007\uffeb\010\uffeb" +
    "\011\057\012\047\013\045\014\041\015\052\016\042\017" +
    "\043\020\uffeb\021\uffeb\022\051\023\056\024\055\025\044" +
    "\026\uffeb\027\uffeb\031\053\001\002\000\050\004\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\045\014\041\015\052" +
    "\016\042\017\043\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\031\053\001\002\000\050" +
    "\004\uffe8\007\uffe8\010\uffe8\011\057\012\047\013\045\014" +
    "\041\015\052\016\042\017\043\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\053\001" +
    "\002\000\050\004\uffe7\007\uffe7\010\uffe7\011\057\012\047" +
    "\013\045\014\041\015\052\016\042\017\043\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\053\001\002\000\050\004\uffea\007\uffea\010\uffea\011" +
    "\057\012\047\013\045\014\041\015\052\016\042\017\043" +
    "\020\uffea\021\uffea\022\051\023\056\024\055\025\044\026" +
    "\uffea\027\uffea\031\053\001\002\000\050\004\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\052\016" +
    "\042\017\043\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\031\uffec\001\002\000\050\004" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\042\017\043\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031\uffed\001\002" +
    "\000\050\004\uffe9\007\uffe9\010\uffe9\011\057\012\047\013" +
    "\045\014\041\015\052\016\042\017\043\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031" +
    "\053\001\002\000\050\004\uffe5\007\uffe5\010\uffe5\011\057" +
    "\012\047\013\045\014\041\015\052\016\042\017\043\020" +
    "\060\021\054\022\051\023\056\024\055\025\044\026\uffe5" +
    "\027\uffe5\031\053\001\002\000\050\004\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\045\014\041\015\052\016\042" +
    "\017\043\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\031\053\001\002\000\050\004\uffe4" +
    "\007\uffe4\010\uffe4\011\057\012\047\013\045\014\041\015" +
    "\052\016\042\017\043\020\060\021\054\022\051\023\056" +
    "\024\055\025\044\026\050\027\uffe4\031\053\001\002\000" +
    "\050\004\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\052\016\042\017\043\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\031\uffef" +
    "\001\002\000\050\004\uffe6\007\uffe6\010\uffe6\011\057\012" +
    "\047\013\045\014\041\015\052\016\042\017\043\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\031\053\001\002\000\050\004\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\052\016\042\017" +
    "\043\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\031\uffee\001\002\000\050\004\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\045\014\041\015\052" +
    "\016\042\017\043\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\031\053\001\002\000\050" +
    "\004\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\042\017\043\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\001" +
    "\002\000\044\007\102\011\057\012\047\013\045\014\041" +
    "\015\052\016\042\017\043\020\060\021\054\022\051\023" +
    "\056\024\055\025\044\026\050\027\046\031\053\001\002" +
    "\000\050\004\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031" +
    "\uffdf\001\002\000\026\006\025\012\033\030\026\034\035" +
    "\035\031\036\037\037\034\040\030\041\027\042\032\001" +
    "\002\000\006\004\ufff5\010\ufff5\001\002\000\010\002\ufff9" +
    "\032\ufff9\033\ufff9\001\002\000\004\004\113\001\002\000" +
    "\026\006\025\012\033\030\026\034\035\035\031\036\037" +
    "\037\034\040\030\041\027\042\032\001\002\000\004\007" +
    "\111\001\002\000\004\004\112\001\002\000\010\002\ufff4" +
    "\032\ufff4\033\ufff4\001\002\000\010\002\ufff3\032\ufff3\033" +
    "\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\010\004\011\003\001\001\000\010\004" +
    "\010\005\012\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\017\001\001\000" +
    "\006\005\014\006\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\035\003" +
    "\037\001\001\000\004\003\100\001\001\000\004\003\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\074\001\001\000" +
    "\004\003\073\001\001\000\004\003\072\001\001\000\004" +
    "\003\071\001\001\000\004\003\070\001\001\000\004\003" +
    "\067\001\001\000\004\003\066\001\001\000\004\003\065" +
    "\001\001\000\004\003\064\001\001\000\004\003\063\001" +
    "\001\000\004\003\062\001\001\000\004\003\061\001\001" +
    "\000\004\003\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\103\003\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\107\003\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static Instruccion root;

    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      System.err.println("Error en :"+ s.value.toString() + " | Linea: "+s.right+1);
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      System.err.println("Error en :"+ s.value.toString() + " | Linea: "+s.right+1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {


  String ArchivoOrigen;

  Instruccion root;

  public void SetArchivo(String nombre)
  {
    ArchivoOrigen = nombre;
  }

  public Instruccion getRoot()
  {
    return root;
  }

  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= cadena 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= caracter 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      char res = val.charAt(1);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= identificador 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Identificador(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= decimal 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      double res = Double.parseDouble(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= entero 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      int res = Integer.parseInt(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= falso 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= verdad 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= oParent E cParent 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E dec 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.DEC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E inc 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
       RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.INC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= not E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.NOT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= menos E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E or E 
            {
              Expresion RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.OR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E and E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.AND);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft,ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E dif E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIFERENTE);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E igual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.IGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E mod E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MOD);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E pot E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.POT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E div E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIV);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E mult E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MULT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= E 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPRIMIR ::= print error ptComa 
            {
              Object RESULT =null;
		

          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPRIMIR ::= print oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            Expresion exp = (Expresion)nodo;
            Print p = new Print(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = p;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_DECLA ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo);
            ArrayList<Instruccion> declaraciones = new ArrayList<>();
            declaraciones.add(v);
            RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_DECLA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id);
          ArrayList<Instruccion> declaraciones = new ArrayList<>();
          declaraciones.add(v);
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_DECLA ::= L_DECLA coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_DECLA ::= L_DECLA coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION_VAR ::= var error ptComa 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		

                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VAR ::= var L_DECLA ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
                  if(declaraciones == null)
                  {
                    declaraciones = new ArrayList<>();
                  }
                  DeclaracionesVar d = new DeclaracionesVar(auxright, auxleft, ArchivoOrigen, declaraciones);
                  RESULT = d;
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= IMPRIMIR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= STATEMENTS IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENTS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int listadoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int listadoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object listado = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)listado;
          if(instrucciones==null)
          {
            instrucciones = new ArrayList<>();
          }
          NodoInicio raiz = new NodoInicio(instrucciones);
          this.root = raiz;
          parser.root = raiz;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

