
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 08 10:16:20 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import DracoScriptPackage.DracoAST.Valores.*;
import DracoScriptPackage.DracoAST.Declaraciones.*;
import DracoScriptPackage.DracoAST.Sentencias.*;
import DracoScriptPackage.DracoAST.FuncionesNativas.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 08 10:16:20 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\031\002\000\002\013" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\005" +
    "\000\002\005\005\000\002\012\005\000\002\012\007\000" +
    "\002\012\003\000\002\012\005\000\002\014\006\000\002" +
    "\006\007\000\002\006\005\000\002\007\013\000\002\007" +
    "\012\000\002\007\011\000\002\007\005\000\002\010\012" +
    "\000\002\010\011\000\002\011\007\000\002\017\011\000" +
    "\002\017\005\000\002\022\014\000\002\023\003\000\002" +
    "\023\003\000\002\024\004\000\002\024\004\000\002\020" +
    "\005\000\002\021\005\000\002\015\004\000\002\016\015" +
    "\000\002\016\005\000\002\025\017\000\002\025\005\000" +
    "\002\026\017\000\002\026\005\000\002\027\021\000\002" +
    "\027\005\000\002\030\015\000\002\030\005\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\032\026\000\027\000\030\000\031\000\032" +
    "\000\033\000\034\000\043\000\046\000\047\000\050\000" +
    "\053\000\001\002\000\032\026\012\027\007\030\017\031" +
    "\033\032\027\033\024\034\034\043\036\046\031\047\035" +
    "\050\010\053\041\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\004\006\340\001\002\000\006" +
    "\003\332\006\333\001\002\000\036\002\uffee\012\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\043\uffee\046\uffee\047\uffee\050\uffee\053\uffee\001\002\000" +
    "\006\003\322\006\323\001\002\000\036\002\uffe4\012\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\043\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4\001\002" +
    "\000\036\002\uffe8\012\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\043\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\053\uffe8\001\002\000\036\002\uffef\012\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\043\uffef\046\uffef\047\uffef\050\uffef\053\uffef\001\002\000" +
    "\036\002\uffe6\012\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\043\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\053\uffe6\001\002\000\006\003\306\006\307\001\002" +
    "\000\036\002\uffe5\012\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\043\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\053\uffe5\001\002\000\036\002\uffec\012\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\043\uffec\046\uffec\047\uffec\050\uffec\053\uffec\001\002\000" +
    "\036\002\uffed\012\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\043\uffed\046\uffed\047\uffed\050" +
    "\uffed\053\uffed\001\002\000\036\002\uffe3\012\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\043" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\053\uffe3\001\002\000\006" +
    "\003\266\006\267\001\002\000\034\002\uffff\026\012\027" +
    "\007\030\017\031\033\032\027\033\024\034\034\043\036" +
    "\046\031\047\035\050\010\053\041\001\002\000\036\002" +
    "\uffe7\012\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\053" +
    "\uffe7\001\002\000\006\003\250\006\251\001\002\000\036" +
    "\002\uffea\012\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\043\uffea\046\uffea\047\uffea\050\uffea" +
    "\053\uffea\001\002\000\004\004\247\001\002\000\036\002" +
    "\uffe9\012\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\043\uffe9\046\uffe9\047\uffe9\050\uffe9\053" +
    "\uffe9\001\002\000\006\003\231\006\232\001\002\000\006" +
    "\003\215\006\216\001\002\000\006\003\202\053\203\001" +
    "\002\000\006\003\126\006\127\001\002\000\036\002\ufff0" +
    "\012\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\043\ufff0\046\ufff0\047\ufff0\050\ufff0\053\ufff0" +
    "\001\002\000\036\002\uffeb\012\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\043\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\053\uffeb\001\002\000\010\005\042\020" +
    "\043\021\044\001\002\000\026\006\047\014\055\041\050" +
    "\051\057\052\053\053\061\054\056\055\052\056\051\057" +
    "\054\001\002\000\004\004\046\001\002\000\004\004\045" +
    "\001\002\000\036\002\uffca\012\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\043\uffca\046\uffca" +
    "\047\uffca\050\uffca\053\uffca\001\002\000\036\002\uffcb\012" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\053\uffcb\001" +
    "\002\000\026\006\047\014\055\041\050\051\057\052\053" +
    "\053\061\054\056\055\052\056\051\057\054\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\050\004" +
    "\uffaa\007\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\001\002" +
    "\000\050\004\uffa4\007\uffa4\010\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\001\002\000\050\004\uffa7\007\uffa7\010\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\042\uffa7\001\002\000\050\004\uffa9\007\uffa9\010" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\042\uffa9\001\002\000\026\006\047" +
    "\014\055\041\050\051\057\052\053\053\061\054\056\055" +
    "\052\056\051\057\054\001\002\000\050\004\uffa5\007\uffa5" +
    "\010\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\042\uffa5\001\002\000\050\004" +
    "\uffa8\007\uffa8\010\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042\uffa8\001\002" +
    "\000\004\004\121\001\002\000\050\004\uffa6\007\uffa6\010" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\042\uffa6\001\002\000\050\004\uffbe" +
    "\007\uffbe\010\uffbe\013\101\014\071\015\067\016\063\017" +
    "\074\020\064\021\065\022\102\023\076\024\073\025\100" +
    "\035\077\036\066\037\072\040\070\042\075\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\050\004" +
    "\uffad\007\uffad\010\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042\uffad\001\002" +
    "\000\050\004\uffac\007\uffac\010\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\uffac\001\002\000\026\006\047\014\055\041\050\051\057" +
    "\052\053\053\061\054\056\055\052\056\051\057\054\001" +
    "\002\000\026\006\047\014\055\041\050\051\057\052\053" +
    "\053\061\054\056\055\052\056\051\057\054\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\026\006" +
    "\047\014\055\041\050\051\057\052\053\053\061\054\056" +
    "\055\052\056\051\057\054\001\002\000\026\006\047\014" +
    "\055\041\050\051\057\052\053\053\061\054\056\055\052" +
    "\056\051\057\054\001\002\000\026\006\047\014\055\041" +
    "\050\051\057\052\053\053\061\054\056\055\052\056\051" +
    "\057\054\001\002\000\026\006\047\014\055\041\050\051" +
    "\057\052\053\053\061\054\056\055\052\056\051\057\054" +
    "\001\002\000\026\006\047\014\055\041\050\051\057\052" +
    "\053\053\061\054\056\055\052\056\051\057\054\001\002" +
    "\000\026\006\047\014\055\041\050\051\057\052\053\053" +
    "\061\054\056\055\052\056\051\057\054\001\002\000\026" +
    "\006\047\014\055\041\050\051\057\052\053\053\061\054" +
    "\056\055\052\056\051\057\054\001\002\000\026\006\047" +
    "\014\055\041\050\051\057\052\053\053\061\054\056\055" +
    "\052\056\051\057\054\001\002\000\026\006\047\014\055" +
    "\041\050\051\057\052\053\053\061\054\056\055\052\056" +
    "\051\057\054\001\002\000\026\006\047\014\055\041\050" +
    "\051\057\052\053\053\061\054\056\055\052\056\051\057" +
    "\054\001\002\000\050\004\uffb7\007\uffb7\010\uffb7\013\101" +
    "\014\071\015\067\016\063\017\074\020\064\021\065\022" +
    "\uffb7\023\uffb7\024\073\025\100\035\077\036\066\037\uffb7" +
    "\040\uffb7\042\075\001\002\000\050\004\uffbd\007\uffbd\010" +
    "\uffbd\013\uffbd\014\uffbd\015\067\016\063\017\074\020\064" +
    "\021\065\022\uffbd\023\uffbd\024\uffbd\025\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\042\075\001\002\000\050\004\uffb4" +
    "\007\uffb4\010\uffb4\013\101\014\071\015\067\016\063\017" +
    "\074\020\064\021\065\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\042\075\001\002\000" +
    "\050\004\uffb3\007\uffb3\010\uffb3\013\101\014\071\015\067" +
    "\016\063\017\074\020\064\021\065\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\075" +
    "\001\002\000\050\004\uffb6\007\uffb6\010\uffb6\013\101\014" +
    "\071\015\067\016\063\017\074\020\064\021\065\022\uffb6" +
    "\023\uffb6\024\073\025\100\035\077\036\066\037\uffb6\040" +
    "\uffb6\042\075\001\002\000\050\004\uffb8\007\uffb8\010\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\074\020\064\021" +
    "\065\022\uffb8\023\uffb8\024\uffb8\025\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\042\uffb8\001\002\000\050\004\uffb9\007" +
    "\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\064\021\065\022\uffb9\023\uffb9\024\uffb9\025\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\001\002\000\050" +
    "\004\uffb5\007\uffb5\010\uffb5\013\101\014\071\015\067\016" +
    "\063\017\074\020\064\021\065\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\075\001" +
    "\002\000\050\004\uffb1\007\uffb1\010\uffb1\013\101\014\071" +
    "\015\067\016\063\017\074\020\064\021\065\022\102\023" +
    "\076\024\073\025\100\035\077\036\066\037\uffb1\040\uffb1" +
    "\042\075\001\002\000\050\004\uffbc\007\uffbc\010\uffbc\013" +
    "\uffbc\014\uffbc\015\067\016\063\017\074\020\064\021\065" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\042\075\001\002\000\050\004\uffb0\007\uffb0" +
    "\010\uffb0\013\101\014\071\015\067\016\063\017\074\020" +
    "\064\021\065\022\102\023\076\024\073\025\100\035\077" +
    "\036\066\037\072\040\uffb0\042\075\001\002\000\050\004" +
    "\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\074\020\064\021\065\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\001\002" +
    "\000\050\004\uffb2\007\uffb2\010\uffb2\013\101\014\071\015" +
    "\067\016\063\017\074\020\064\021\065\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\042" +
    "\075\001\002\000\050\004\uffba\007\uffba\010\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\074\020\064\021\065\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\042\uffba\001\002\000\060\002\uffdc\006\uffdc\012" +
    "\uffdc\014\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\041\uffdc\043\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\001\002\000\050\004\uffaf\007\uffaf\010\uffaf\013" +
    "\uffaf\014\uffaf\015\067\016\063\017\074\020\064\021\065" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\042\075\001\002\000\050\004\uffae\007\uffae" +
    "\010\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\064\021\065\022\uffae\023\uffae\024\uffae\025\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\042\uffae\001\002\000\044\007" +
    "\125\013\101\014\071\015\067\016\063\017\074\020\064" +
    "\021\065\022\102\023\076\024\073\025\100\035\077\036" +
    "\066\037\072\040\070\042\075\001\002\000\050\004\uffab" +
    "\007\uffab\010\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab\001\002\000" +
    "\004\012\201\001\002\000\026\006\047\014\055\041\050" +
    "\051\057\052\053\053\061\054\056\055\052\056\051\057" +
    "\054\001\002\000\004\007\131\001\002\000\004\011\132" +
    "\001\002\000\032\026\012\027\007\030\017\031\033\032" +
    "\027\033\024\034\034\043\036\046\031\047\035\050\010" +
    "\053\041\001\002\000\034\012\134\026\012\027\007\030" +
    "\017\031\033\032\027\033\024\034\034\043\036\046\031" +
    "\047\035\050\010\053\041\001\002\000\040\002\uffd7\012" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\043\156\044\155\046\uffd7\047\uffd7\050\uffd7\053" +
    "\uffd7\001\002\000\036\002\ufffc\012\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\043\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\053\ufffc\001\002\000\036\002\ufff2" +
    "\012\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\043\ufff2\046\ufff2\047\ufff2\050\ufff2\053\ufff2" +
    "\001\002\000\036\002\ufff6\012\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\043\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\053\ufff6\001\002\000\036\002\ufffd\012" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\043\ufffd\046\ufffd\047\ufffd\050\ufffd\053\ufffd\001" +
    "\002\000\036\002\ufff4\012\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\043\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\053\ufff4\001\002\000\036\002\ufff3\012\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\043\ufff3\046\ufff3\047\ufff3\050\ufff3\053\ufff3\001\002" +
    "\000\036\002\ufffa\012\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\043\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\053\ufffa\001\002\000\036\002\ufffb\012\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\043\ufffb\046\ufffb\047\ufffb\050\ufffb\053\ufffb\001\002\000" +
    "\036\002\ufff1\012\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\043\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\053\ufff1\001\002\000\036\002\ufff8\012\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\043" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\053\ufff8\001\002\000\036" +
    "\002\ufff5\012\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\043\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\053\ufff5\001\002\000\036\002\ufff7\012\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\043\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\053\ufff7\001\002\000\036\002" +
    "\ufffe\012\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\043\ufffe\046\ufffe\047\ufffe\050\ufffe\053" +
    "\ufffe\001\002\000\036\002\ufff9\012\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\043\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\053\ufff9\001\002\000\036\002\uffd8" +
    "\012\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\043\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8" +
    "\001\002\000\006\043\156\044\172\001\002\000\004\006" +
    "\163\001\002\000\004\045\157\001\002\000\004\011\160" +
    "\001\002\000\032\026\012\027\007\030\017\031\033\032" +
    "\027\033\024\034\034\043\036\046\031\047\035\050\010" +
    "\053\041\001\002\000\034\012\162\026\012\027\007\030" +
    "\017\031\033\032\027\033\024\034\034\043\036\046\031" +
    "\047\035\050\010\053\041\001\002\000\036\002\uffd3\012" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\043\uffd3\046\uffd3\047\uffd3\050\uffd3\053\uffd3\001" +
    "\002\000\026\006\047\014\055\041\050\051\057\052\053" +
    "\053\061\054\056\055\052\056\051\057\054\001\002\000" +
    "\004\007\165\001\002\000\004\011\166\001\002\000\032" +
    "\026\012\027\007\030\017\031\033\032\027\033\024\034" +
    "\034\043\036\046\031\047\035\050\010\053\041\001\002" +
    "\000\034\012\170\026\012\027\007\030\017\031\033\032" +
    "\027\033\024\034\034\043\036\046\031\047\035\050\010" +
    "\053\041\001\002\000\006\043\uffd4\044\uffd4\001\002\000" +
    "\036\002\uffd9\012\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\043\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\053\uffd9\001\002\000\004\006\173\001\002\000\026" +
    "\006\047\014\055\041\050\051\057\052\053\053\061\054" +
    "\056\055\052\056\051\057\054\001\002\000\004\007\175" +
    "\001\002\000\004\011\176\001\002\000\032\026\012\027" +
    "\007\030\017\031\033\032\027\033\024\034\034\043\036" +
    "\046\031\047\035\050\010\053\041\001\002\000\034\012" +
    "\200\026\012\027\007\030\017\031\033\032\027\033\024" +
    "\034\034\043\036\046\031\047\035\050\010\053\041\001" +
    "\002\000\006\043\uffd5\044\uffd5\001\002\000\036\002\uffd6" +
    "\012\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\043\uffd6\046\uffd6\047\uffd6\050\uffd6\053\uffd6" +
    "\001\002\000\004\004\214\001\002\000\010\004\uffde\005" +
    "\212\010\uffde\001\002\000\006\004\206\010\205\001\002" +
    "\000\004\053\207\001\002\000\060\002\uffe2\006\uffe2\012" +
    "\uffe2\014\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\041\uffe2\043\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\001\002\000\010\004\uffe0\005\210\010\uffe0\001" +
    "\002\000\026\006\047\014\055\041\050\051\057\052\053" +
    "\053\061\054\056\055\052\056\051\057\054\001\002\000" +
    "\006\004\uffdf\010\uffdf\001\002\000\026\006\047\014\055" +
    "\041\050\051\057\052\053\053\061\054\056\055\052\056" +
    "\051\057\054\001\002\000\006\004\uffdd\010\uffdd\001\002" +
    "\000\060\002\uffe1\006\uffe1\012\uffe1\014\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\041\uffe1" +
    "\043\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\004" +
    "\004\230\001\002\000\026\006\047\014\055\041\050\051" +
    "\057\052\053\053\061\054\056\055\052\056\051\057\054" +
    "\001\002\000\004\010\220\001\002\000\026\006\047\014" +
    "\055\041\050\051\057\052\053\053\061\054\056\055\052" +
    "\056\051\057\054\001\002\000\004\010\222\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\004\010" +
    "\224\001\002\000\026\006\047\014\055\041\050\051\057" +
    "\052\053\053\061\054\056\055\052\056\051\057\054\001" +
    "\002\000\004\007\226\001\002\000\004\004\227\001\002" +
    "\000\036\002\uffc0\012\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\043\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\053\uffc0\001\002\000\036\002\uffbf\012\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\043\uffbf\046\uffbf\047\uffbf\050\uffbf\053\uffbf\001\002\000" +
    "\004\004\246\001\002\000\026\006\047\014\055\041\050" +
    "\051\057\052\053\053\061\054\056\055\052\056\051\057" +
    "\054\001\002\000\004\010\234\001\002\000\026\006\047" +
    "\014\055\041\050\051\057\052\053\053\061\054\056\055" +
    "\052\056\051\057\054\001\002\000\004\010\236\001\002" +
    "\000\026\006\047\014\055\041\050\051\057\052\053\053" +
    "\061\054\056\055\052\056\051\057\054\001\002\000\004" +
    "\010\240\001\002\000\026\006\047\014\055\041\050\051" +
    "\057\052\053\053\061\054\056\055\052\056\051\057\054" +
    "\001\002\000\004\010\242\001\002\000\026\006\047\014" +
    "\055\041\050\051\057\052\053\053\061\054\056\055\052" +
    "\056\051\057\054\001\002\000\004\007\244\001\002\000" +
    "\004\004\245\001\002\000\036\002\uffc6\012\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\043" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\053\uffc6\001\002\000\036" +
    "\002\uffc5\012\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\043\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\053\uffc5\001\002\000\036\002\uffc9\012\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\043\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\053\uffc9\001\002\000\004\004" +
    "\265\001\002\000\026\006\047\014\055\041\050\051\057" +
    "\052\053\053\061\054\056\055\052\056\051\057\054\001" +
    "\002\000\004\010\253\001\002\000\026\006\047\014\055" +
    "\041\050\051\057\052\053\053\061\054\056\055\052\056" +
    "\051\057\054\001\002\000\004\010\255\001\002\000\026" +
    "\006\047\014\055\041\050\051\057\052\053\053\061\054" +
    "\056\055\052\056\051\057\054\001\002\000\004\010\257" +
    "\001\002\000\026\006\047\014\055\041\050\051\057\052" +
    "\053\053\061\054\056\055\052\056\051\057\054\001\002" +
    "\000\004\010\261\001\002\000\026\006\047\014\055\041" +
    "\050\051\057\052\053\053\061\054\056\055\052\056\051" +
    "\057\054\001\002\000\004\007\263\001\002\000\004\004" +
    "\264\001\002\000\036\002\uffc4\012\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\043\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\053\uffc4\001\002\000\036\002\uffc3" +
    "\012\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\043\uffc3\046\uffc3\047\uffc3\050\uffc3\053\uffc3" +
    "\001\002\000\004\004\305\001\002\000\026\006\047\014" +
    "\055\041\050\051\057\052\053\053\061\054\056\055\052" +
    "\056\051\057\054\001\002\000\004\010\271\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\004\010" +
    "\273\001\002\000\026\006\047\014\055\041\050\051\057" +
    "\052\053\053\061\054\056\055\052\056\051\057\054\001" +
    "\002\000\004\010\275\001\002\000\026\006\047\014\055" +
    "\041\050\051\057\052\053\053\061\054\056\055\052\056" +
    "\051\057\054\001\002\000\004\010\277\001\002\000\026" +
    "\006\047\014\055\041\050\051\057\052\053\053\061\054" +
    "\056\055\052\056\051\057\054\001\002\000\004\010\301" +
    "\001\002\000\026\006\047\014\055\041\050\051\057\052" +
    "\053\053\061\054\056\055\052\056\051\057\054\001\002" +
    "\000\004\007\303\001\002\000\004\004\304\001\002\000" +
    "\036\002\uffc2\012\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\043\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\053\uffc2\001\002\000\036\002\uffc1\012\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\043" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\053\uffc1\001\002\000\004" +
    "\004\321\001\002\000\026\006\047\014\055\041\050\051" +
    "\057\052\053\053\061\054\056\055\052\056\051\057\054" +
    "\001\002\000\004\010\311\001\002\000\026\006\047\014" +
    "\055\041\050\051\057\052\053\053\061\054\056\055\052" +
    "\056\051\057\054\001\002\000\004\010\313\001\002\000" +
    "\026\006\047\014\055\041\050\051\057\052\053\053\061" +
    "\054\056\055\052\056\051\057\054\001\002\000\004\010" +
    "\315\001\002\000\026\006\047\014\055\041\050\051\057" +
    "\052\053\053\061\054\056\055\052\056\051\057\054\001" +
    "\002\000\004\007\317\001\002\000\004\004\320\001\002" +
    "\000\036\002\uffc8\012\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\043\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\053\uffc8\001\002\000\036\002\uffc7\012\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\043\uffc7\046\uffc7\047\uffc7\050\uffc7\053\uffc7\001\002\000" +
    "\004\012\331\001\002\000\026\006\047\014\055\041\050" +
    "\051\057\052\053\053\061\054\056\055\052\056\051\057" +
    "\054\001\002\000\004\007\325\001\002\000\004\011\326" +
    "\001\002\000\032\026\012\027\007\030\017\031\033\032" +
    "\027\033\024\034\034\043\036\046\031\047\035\050\010" +
    "\053\041\001\002\000\034\012\330\026\012\027\007\030" +
    "\017\031\033\032\027\033\024\034\034\043\036\046\031" +
    "\047\035\050\010\053\041\001\002\000\036\002\uffd2\012" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\043\uffd2\046\uffd2\047\uffd2\050\uffd2\053\uffd2\001" +
    "\002\000\036\002\uffd1\012\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\043\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\053\uffd1\001\002\000\004\004\337\001\002" +
    "\000\026\006\047\014\055\041\050\051\057\052\053\053" +
    "\061\054\056\055\052\056\051\057\054\001\002\000\004" +
    "\007\335\001\002\000\004\004\336\001\002\000\036\002" +
    "\uffdb\012\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\053" +
    "\uffdb\001\002\000\036\002\uffda\012\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\043\uffda\046" +
    "\uffda\047\uffda\050\uffda\053\uffda\001\002\000\006\047\035" +
    "\053\342\001\002\000\026\006\047\014\055\041\050\051" +
    "\057\052\053\053\061\054\056\055\052\056\051\057\054" +
    "\001\002\000\004\005\042\001\002\000\026\006\uffcf\014" +
    "\uffcf\041\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\001\002\000\026\006\uffce\014\uffce\041" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\001\002\000\004\004\346\001\002\000\004\053" +
    "\350\001\002\000\004\007\353\001\002\000\006\020\351" +
    "\021\352\001\002\000\004\007\uffcd\001\002\000\004\007" +
    "\uffcc\001\002\000\004\011\354\001\002\000\032\026\012" +
    "\027\007\030\017\031\033\032\027\033\024\034\034\043" +
    "\036\046\031\047\035\050\010\053\041\001\002\000\034" +
    "\012\356\026\012\027\007\030\017\031\033\032\027\033" +
    "\024\034\034\043\036\046\031\047\035\050\010\053\041" +
    "\001\002\000\036\002\uffd0\012\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\043\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\053\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\006\013\004\031\003\001\001\000\040\004" +
    "\024\005\036\006\014\007\021\014\010\015\020\016\025" +
    "\017\037\020\027\021\031\022\013\025\015\026\017\027" +
    "\012\030\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\150\006\137\007\142\014" +
    "\134\015\143\016\146\017\151\020\145\021\147\022\136" +
    "\025\140\026\141\027\135\030\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\057\003" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\123\001\001\000" +
    "\004\003\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\116" +
    "\001\001\000\004\003\115\001\001\000\004\003\114\001" +
    "\001\000\004\003\113\001\001\000\004\003\112\001\001" +
    "\000\004\003\111\001\001\000\004\003\110\001\001\000" +
    "\004\003\107\001\001\000\004\003\106\001\001\000\004" +
    "\003\105\001\001\000\004\003\104\001\001\000\004\003" +
    "\103\001\001\000\004\003\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\127\003\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\132\005\036\006\014\007\021\014\010" +
    "\015\020\016\025\017\037\020\027\021\031\022\013\025" +
    "\015\026\017\027\012\030\022\001\001\000\036\005\150" +
    "\006\137\007\142\014\134\015\143\016\146\017\151\020" +
    "\145\021\147\022\136\025\140\026\141\027\135\030\144" +
    "\001\001\000\006\010\153\011\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\160\005\036\006\014\007\021\014\010\015\020\016\025" +
    "\017\037\020\027\021\031\022\013\025\015\026\017\027" +
    "\012\030\022\001\001\000\036\005\150\006\137\007\142" +
    "\014\134\015\143\016\146\017\151\020\145\021\147\022" +
    "\136\025\140\026\141\027\135\030\144\001\001\000\002" +
    "\001\001\000\006\002\163\003\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\166\005\036\006\014" +
    "\007\021\014\010\015\020\016\025\017\037\020\027\021" +
    "\031\022\013\025\015\026\017\027\012\030\022\001\001" +
    "\000\036\005\150\006\137\007\142\014\134\015\143\016" +
    "\146\017\151\020\145\021\147\022\136\025\140\026\141" +
    "\027\135\030\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\173\003\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\176\005" +
    "\036\006\014\007\021\014\010\015\020\016\025\017\037" +
    "\020\027\021\031\022\013\025\015\026\017\027\012\030" +
    "\022\001\001\000\036\005\150\006\137\007\142\014\134" +
    "\015\143\016\146\017\151\020\145\021\147\022\136\025" +
    "\140\026\141\027\135\030\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\210\003\061\001\001\000\002\001" +
    "\001\000\006\002\212\003\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\216\003" +
    "\061\001\001\000\002\001\001\000\006\002\220\003\061" +
    "\001\001\000\002\001\001\000\006\002\222\003\061\001" +
    "\001\000\002\001\001\000\006\002\224\003\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\232\003\061" +
    "\001\001\000\002\001\001\000\006\002\234\003\061\001" +
    "\001\000\002\001\001\000\006\002\236\003\061\001\001" +
    "\000\002\001\001\000\006\002\240\003\061\001\001\000" +
    "\002\001\001\000\006\002\242\003\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\251" +
    "\003\061\001\001\000\002\001\001\000\006\002\253\003" +
    "\061\001\001\000\002\001\001\000\006\002\255\003\061" +
    "\001\001\000\002\001\001\000\006\002\257\003\061\001" +
    "\001\000\002\001\001\000\006\002\261\003\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\267\003\061" +
    "\001\001\000\002\001\001\000\006\002\271\003\061\001" +
    "\001\000\002\001\001\000\006\002\273\003\061\001\001" +
    "\000\002\001\001\000\006\002\275\003\061\001\001\000" +
    "\002\001\001\000\006\002\277\003\061\001\001\000\002" +
    "\001\001\000\006\002\301\003\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\307\003\061\001\001\000" +
    "\002\001\001\000\006\002\311\003\061\001\001\000\002" +
    "\001\001\000\006\002\313\003\061\001\001\000\002\001" +
    "\001\000\006\002\315\003\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\323\003\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\326\005\036\006" +
    "\014\007\021\014\010\015\020\016\025\017\037\020\027" +
    "\021\031\022\013\025\015\026\017\027\012\030\022\001" +
    "\001\000\036\005\150\006\137\007\142\014\134\015\143" +
    "\016\146\017\151\020\145\021\147\022\136\025\140\026" +
    "\141\027\135\030\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\333\003\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\343\014\342\023\340\001" +
    "\001\000\006\002\344\003\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\354\005\036\006\014\007\021\014\010\015\020" +
    "\016\025\017\037\020\027\021\031\022\013\025\015\026" +
    "\017\027\012\030\022\001\001\000\036\005\150\006\137" +
    "\007\142\014\134\015\143\016\146\017\151\020\145\021" +
    "\147\022\136\025\140\026\141\027\135\030\144\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static Instruccion root;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {


  String ArchivoOrigen;

  Instruccion root;

  public void SetArchivo(String nombre)
  {
    ArchivoOrigen = nombre;
  }

  public Instruccion getRoot()
  {
    return root;
  }

  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= cadena 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= caracter 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      char res = val.charAt(1);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= identificador 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Identificador(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= decimal 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      double res = Double.parseDouble(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= entero 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      int res = Integer.parseInt(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= falso 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= verdad 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= oParent E cParent 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E dec 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.DEC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E inc 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
       RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.INC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= not E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.NOT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= menos E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E or E 
            {
              Expresion RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.OR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E and E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.AND);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft,ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E dif E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIFERENTE);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E igual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.IGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E mod E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MOD);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E pot E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.POT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E div E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIV);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E mult E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MULT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= E 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUN_STRING ::= funString error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_STRING",22, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUN_STRING ::= funString oParent EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion cadena = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionString f = new FuncionString(auxright, auxleft, ArchivoOrigen, posx, posy ,cadena, color);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_STRING",22, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUN_LINE ::= funLine error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_LINE",21, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUN_LINE ::= funLine oParent EXP coma EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		Expresion x1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int y1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int y1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion y1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion x2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion y2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int grosorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int grosorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion grosor = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionLine f = new FuncionLine(auxright, auxleft, ArchivoOrigen, x1, y1, x2, y2, color, grosor);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_LINE",21, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUN_OVAL ::= funOval error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_OVAL",20, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUN_OVAL ::= funOval oParent EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion ancho = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion alto = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionOval f = new FuncionOval(auxright, auxleft, ArchivoOrigen, posx, posy, color, alto, ancho);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_OVAL",20, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUN_QUADRATE ::= funQuadrate error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_QUADRATE",19, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUN_QUADRATE ::= funQuadrate oParent EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion ancho = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion alto = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionQuadrate f = new FuncionQuadrate(auxright, auxleft, ArchivoOrigen, posx, posy, color, alto, ancho);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_QUADRATE",19, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUN_POINT ::= funPoint error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_POINT",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUN_POINT ::= funPoint oParent EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int diametroleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int diametroright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion diametro = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionPoint f = new FuncionPoint(auxright, auxleft, ArchivoOrigen, posx, posy, color, diametro);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_POINT",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SMASH ::= romper ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          RESULT = new SentenciaSmash(auxright, auxleft, ArchivoOrigen);
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SMASH",11, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECREMENTO ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = d;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AUMENTO ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("AUMENTO",14, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INS2 ::= identificador dec 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = d;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",18, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INS2 ::= identificador inc 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = s;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",18, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INS1 ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INS1 ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_FOR ::= para oParent INS1 EXP ptComa INS2 cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).value;
		int instruc1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int instruc1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object instruc1 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int instrc2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int instrc2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object instrc2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion condicion = (Expresion)nodo;
            Instruccion ins1 = (Instruccion)instruc1;
            Instruccion ins2 = (Instruccion)instrc2;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaFor n = new SentenciaFor(auxright, auxleft, ArchivoOrigen, ins1, condicion, ins2, instrucciones);
            RESULT = n;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",16, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT_WHILE ::= mientras error cKey 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",13, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT_WHILE ::= mientras oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaWhile s = new SentenciaWhile(auxright, auxleft, ArchivoOrigen, exp, instrucciones);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",13, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_NOT ::= si ifnot oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
          NodoELIF nuevo = new NodoELIF(instrucciones, auxright, auxleft, ArchivoOrigen);
          RESULT = nuevo;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF_NOT",7, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE ::= sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = new ArrayList<>();
         nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= ELSE sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = (ArrayList<NodoELIF>)lista2;
         if(nodos==null)
         {
           nodos = new ArrayList<>();
         }
         if(condicion!=null&&instrucciones!=null)
         {
           nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         }
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= si error cKey 
            {
              Object RESULT =null;
		
        /*POR SI EXISTE UN ERROR*/
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, null);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> nodos = new ArrayList<>();
        NodoELIF n = (NodoELIF)defecto;
        nodos.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, nodos);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey ELSE IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listanodosleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listanodosright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object listanodos = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> elifs = (ArrayList<NodoELIF>)listanodos;
        NodoELIF n = (NodoELIF)defecto;
        elifs.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, elifs);

        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPRIMIR ::= print error ptComa 
            {
              Object RESULT =null;
		

          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRIMIR ::= print oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            Expresion exp = (Expresion)nodo;
            Print p = new Print(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = p;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                Expresion val = (Expresion)nodo;
                AsignacionVar ins = new AsignacionVar(idright, idleft, ArchivoOrigen, id, val);
                RESULT = ins;
              
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",10, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_DECLA ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo);
            ArrayList<Instruccion> declaraciones = new ArrayList<>();
            declaraciones.add(v);
            RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_DECLA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id);
          ArrayList<Instruccion> declaraciones = new ArrayList<>();
          declaraciones.add(v);
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_DECLA ::= L_DECLA coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_DECLA ::= L_DECLA coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_VAR ::= var error ptComa 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  /*EL ERRO YA SE REPORTA CON EXITOOO!*/
                  parser.expected.add("identificador");
                  parser.expected.add("identificador = Expresion");
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_VAR ::= var L_DECLA ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
                  if(declaraciones == null)
                  {
                    declaraciones = new ArrayList<>();
                  }
                  DeclaracionesVar d = new DeclaracionesVar(auxright, auxleft, ArchivoOrigen, declaraciones);
                  RESULT = d;
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENTS ::= FUN_STRING 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS ::= FUN_LINE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENTS ::= FUN_OVAL 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS ::= FUN_QUADRATE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS ::= FUN_POINT 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS ::= SENT_FOR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= DECREMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= AUMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= SENT_WHILE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= SMASH 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= IF 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= IMPRIMIR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= STATEMENTS FUN_STRING 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= STATEMENTS FUN_LINE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= STATEMENTS FUN_OVAL 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= STATEMENTS FUN_QUADRATE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= STATEMENTS FUN_POINT 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= STATEMENTS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= STATEMENTS DECREMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= STATEMENTS AUMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= STATEMENTS SENT_WHILE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= STATEMENTS IF 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= STATEMENTS SMASH 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= STATEMENTS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= STATEMENTS IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENTS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int listadoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int listadoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object listado = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)listado;
          if(instrucciones==null)
          {
            instrucciones = new ArrayList<>();
          }
          NodoInicio raiz = new NodoInicio(instrucciones);
          this.root = raiz;
          parser.root = raiz;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>();
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

