
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 30 23:14:11 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import DracoScriptPackage.DracoAST.Valores.*;
import DracoScriptPackage.DracoAST.Declaraciones.*;
import DracoScriptPackage.DracoAST.Sentencias.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 30 23:14:11 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\012\002\000\002\010" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\007\005\000\002" +
    "\007\007\000\002\007\003\000\002\007\005\000\002\011" +
    "\006\000\002\006\007\000\002\006\005\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\032\000\033\000\036\000\001\002\000" +
    "\010\032\010\033\007\036\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\006\003\114\006" +
    "\115\001\002\000\006\003\101\036\102\001\002\000\004" +
    "\005\021\001\002\000\012\002\uffff\032\010\033\007\036" +
    "\011\001\002\000\012\002\ufff9\032\ufff9\033\ufff9\036\ufff9" +
    "\001\002\000\012\002\ufffa\032\ufffa\033\ufffa\036\ufffa\001" +
    "\002\000\012\002\ufffb\032\ufffb\033\ufffb\036\ufffb\001\002" +
    "\000\012\002\ufffc\032\ufffc\033\ufffc\036\ufffc\001\002\000" +
    "\012\002\ufffd\032\ufffd\033\ufffd\036\ufffd\001\002\000\012" +
    "\002\ufffe\032\ufffe\033\ufffe\036\ufffe\001\002\000\026\006" +
    "\022\012\030\030\023\034\032\035\026\036\034\037\031" +
    "\040\025\041\024\042\027\001\002\000\026\006\022\012" +
    "\030\030\023\034\032\035\026\036\034\037\031\040\025" +
    "\041\024\042\027\001\002\000\026\006\022\012\030\030" +
    "\023\034\032\035\026\036\034\037\031\040\025\041\024" +
    "\042\027\001\002\000\050\004\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\031\uffdb\001\002\000\050\004\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\031\uffd5\001\002\000\050\004" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\001\002" +
    "\000\050\004\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031" +
    "\uffda\001\002\000\026\006\022\012\030\030\023\034\032" +
    "\035\026\036\034\037\031\040\025\041\024\042\027\001" +
    "\002\000\050\004\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\001\002\000\050\004\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\001\002\000\004\004\074\001\002" +
    "\000\050\004\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031" +
    "\uffd7\001\002\000\050\004\uffef\007\uffef\010\uffef\011\054" +
    "\012\044\013\042\014\036\015\047\016\037\017\040\020" +
    "\055\021\051\022\046\023\053\024\052\025\041\026\045" +
    "\027\043\031\050\001\002\000\026\006\022\012\030\030" +
    "\023\034\032\035\026\036\034\037\031\040\025\041\024" +
    "\042\027\001\002\000\050\004\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\031\uffde\001\002\000\050\004\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\031\uffdd\001\002\000\026\006" +
    "\022\012\030\030\023\034\032\035\026\036\034\037\031" +
    "\040\025\041\024\042\027\001\002\000\026\006\022\012" +
    "\030\030\023\034\032\035\026\036\034\037\031\040\025" +
    "\041\024\042\027\001\002\000\026\006\022\012\030\030" +
    "\023\034\032\035\026\036\034\037\031\040\025\041\024" +
    "\042\027\001\002\000\026\006\022\012\030\030\023\034" +
    "\032\035\026\036\034\037\031\040\025\041\024\042\027" +
    "\001\002\000\026\006\022\012\030\030\023\034\032\035" +
    "\026\036\034\037\031\040\025\041\024\042\027\001\002" +
    "\000\026\006\022\012\030\030\023\034\032\035\026\036" +
    "\034\037\031\040\025\041\024\042\027\001\002\000\026" +
    "\006\022\012\030\030\023\034\032\035\026\036\034\037" +
    "\031\040\025\041\024\042\027\001\002\000\026\006\022" +
    "\012\030\030\023\034\032\035\026\036\034\037\031\040" +
    "\025\041\024\042\027\001\002\000\026\006\022\012\030" +
    "\030\023\034\032\035\026\036\034\037\031\040\025\041" +
    "\024\042\027\001\002\000\026\006\022\012\030\030\023" +
    "\034\032\035\026\036\034\037\031\040\025\041\024\042" +
    "\027\001\002\000\026\006\022\012\030\030\023\034\032" +
    "\035\026\036\034\037\031\040\025\041\024\042\027\001" +
    "\002\000\026\006\022\012\030\030\023\034\032\035\026" +
    "\036\034\037\031\040\025\041\024\042\027\001\002\000" +
    "\026\006\022\012\030\030\023\034\032\035\026\036\034" +
    "\037\031\040\025\041\024\042\027\001\002\000\050\004" +
    "\uffe8\007\uffe8\010\uffe8\011\054\012\044\013\042\014\036" +
    "\015\047\016\037\017\040\020\uffe8\021\uffe8\022\046\023" +
    "\053\024\052\025\041\026\uffe8\027\uffe8\031\050\001\002" +
    "\000\050\004\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\042\014\036\015\047\016\037\017\040\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\050\001\002\000\050\004\uffe5\007\uffe5\010\uffe5\011\054" +
    "\012\044\013\042\014\036\015\047\016\037\017\040\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\050\001\002\000\050\004\uffe4\007\uffe4\010" +
    "\uffe4\011\054\012\044\013\042\014\036\015\047\016\037" +
    "\017\040\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\031\050\001\002\000\050\004\uffe7" +
    "\007\uffe7\010\uffe7\011\054\012\044\013\042\014\036\015" +
    "\047\016\037\017\040\020\uffe7\021\uffe7\022\046\023\053" +
    "\024\052\025\041\026\uffe7\027\uffe7\031\050\001\002\000" +
    "\050\004\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\047\016\037\017\040\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9" +
    "\001\002\000\050\004\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\037\017\040\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\031\uffea\001\002\000\050\004\uffe6\007\uffe6\010\uffe6" +
    "\011\054\012\044\013\042\014\036\015\047\016\037\017" +
    "\040\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\031\050\001\002\000\050\004\uffe2\007" +
    "\uffe2\010\uffe2\011\054\012\044\013\042\014\036\015\047" +
    "\016\037\017\040\020\055\021\051\022\046\023\053\024" +
    "\052\025\041\026\uffe2\027\uffe2\031\050\001\002\000\050" +
    "\004\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\042\014" +
    "\036\015\047\016\037\017\040\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031\050\001" +
    "\002\000\050\004\uffe1\007\uffe1\010\uffe1\011\054\012\044" +
    "\013\042\014\036\015\047\016\037\017\040\020\055\021" +
    "\051\022\046\023\053\024\052\025\041\026\045\027\uffe1" +
    "\031\050\001\002\000\050\004\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\047\016\037\017\040" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\031\uffec\001\002\000\050\004\uffe3\007\uffe3" +
    "\010\uffe3\011\054\012\044\013\042\014\036\015\047\016" +
    "\037\017\040\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\031\050\001\002\000\050\004" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\047\016\037\017\040\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\001\002" +
    "\000\012\002\ufff2\032\ufff2\033\ufff2\036\ufff2\001\002\000" +
    "\050\004\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\042" +
    "\014\036\015\047\016\037\017\040\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\031\050" +
    "\001\002\000\050\004\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\037\017\040\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\031\uffdf\001\002\000\044\007\100\011\054\012\044" +
    "\013\042\014\036\015\047\016\037\017\040\020\055\021" +
    "\051\022\046\023\053\024\052\025\041\026\045\027\043" +
    "\031\050\001\002\000\050\004\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\001\002\000\004\004\113\001\002" +
    "\000\010\004\ufff4\005\111\010\ufff4\001\002\000\006\004" +
    "\105\010\104\001\002\000\004\036\106\001\002\000\012" +
    "\002\ufff8\032\ufff8\033\ufff8\036\ufff8\001\002\000\010\004" +
    "\ufff6\005\107\010\ufff6\001\002\000\026\006\022\012\030" +
    "\030\023\034\032\035\026\036\034\037\031\040\025\041" +
    "\024\042\027\001\002\000\006\004\ufff5\010\ufff5\001\002" +
    "\000\026\006\022\012\030\030\023\034\032\035\026\036" +
    "\034\037\031\040\025\041\024\042\027\001\002\000\006" +
    "\004\ufff3\010\ufff3\001\002\000\012\002\ufff7\032\ufff7\033" +
    "\ufff7\036\ufff7\001\002\000\004\004\121\001\002\000\026" +
    "\006\022\012\030\030\023\034\032\035\026\036\034\037" +
    "\031\040\025\041\024\042\027\001\002\000\004\007\117" +
    "\001\002\000\004\004\120\001\002\000\012\002\ufff1\032" +
    "\ufff1\033\ufff1\036\ufff1\001\002\000\012\002\ufff0\032\ufff0" +
    "\033\ufff0\036\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\010\004\012\003\001\001\000\012\004" +
    "\011\005\014\006\013\011\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\102\001" +
    "\001\000\002\001\001\000\010\005\017\006\016\011\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\032\003\034\001\001\000\004\003\076\001" +
    "\001\000\004\003\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\071\001\001\000\004\003\070\001\001\000\004\003" +
    "\067\001\001\000\004\003\066\001\001\000\004\003\065" +
    "\001\001\000\004\003\064\001\001\000\004\003\063\001" +
    "\001\000\004\003\062\001\001\000\004\003\061\001\001" +
    "\000\004\003\060\001\001\000\004\003\057\001\001\000" +
    "\004\003\056\001\001\000\004\003\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\107\003\034" +
    "\001\001\000\002\001\001\000\006\002\111\003\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\115\003\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static Instruccion root;

    public static ArrayList<TError> errores;

    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {


  String ArchivoOrigen;

  Instruccion root;

  public void SetArchivo(String nombre)
  {
    ArchivoOrigen = nombre;
  }

  public Instruccion getRoot()
  {
    return root;
  }

  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= cadena 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= caracter 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      char res = val.charAt(1);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= identificador 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Identificador(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= decimal 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      double res = Double.parseDouble(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= entero 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      int res = Integer.parseInt(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= falso 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= verdad 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= oParent E cParent 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E dec 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.DEC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E inc 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
       RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.INC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= not E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.NOT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= menos E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E or E 
            {
              Expresion RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.OR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E and E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.AND);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft,ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E dif E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIFERENTE);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E igual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.IGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E mod E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MOD);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E pot E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.POT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E div E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIV);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E mult E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MULT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= E 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRIMIR ::= print error ptComa 
            {
              Object RESULT =null;
		

          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR ::= print oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            Expresion exp = (Expresion)nodo;
            Print p = new Print(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = p;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                Expresion val = (Expresion)nodo;
                AsignacionVar ins = new AsignacionVar(idright, idleft, ArchivoOrigen, id, val);
                RESULT = ins;
              
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",7, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_DECLA ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo);
            ArrayList<Instruccion> declaraciones = new ArrayList<>();
            declaraciones.add(v);
            RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_DECLA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id);
          ArrayList<Instruccion> declaraciones = new ArrayList<>();
          declaraciones.add(v);
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_DECLA ::= L_DECLA coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_DECLA ::= L_DECLA coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_VAR ::= var error ptComa 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  /*EL ERRO YA SE REPORTA CON EXITOOO!*/
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_VAR ::= var L_DECLA ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
                  if(declaraciones == null)
                  {
                    declaraciones = new ArrayList<>();
                  }
                  DeclaracionesVar d = new DeclaracionesVar(auxright, auxleft, ArchivoOrigen, declaraciones);
                  RESULT = d;
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= IMPRIMIR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= STATEMENTS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= STATEMENTS IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENTS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int listadoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int listadoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object listado = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)listado;
          if(instrucciones==null)
          {
            instrucciones = new ArrayList<>();
          }
          NodoInicio raiz = new NodoInicio(instrucciones);
          this.root = raiz;
          parser.root = raiz;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>();
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

