
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 03 01:01:09 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import DracoScriptPackage.DracoAST.Valores.*;
import DracoScriptPackage.DracoAST.Declaraciones.*;
import DracoScriptPackage.DracoAST.Sentencias.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 03 01:01:09 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\024\002\000\002\013" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\012\005\000\002\012\007\000\002" +
    "\012\003\000\002\012\005\000\002\014\006\000\002\006" +
    "\007\000\002\006\005\000\002\007\013\000\002\007\012" +
    "\000\002\007\011\000\002\007\005\000\002\010\012\000" +
    "\002\010\011\000\002\011\007\000\002\016\011\000\002" +
    "\016\005\000\002\021\014\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\023\004\000\002\017\005" +
    "\000\002\020\005\000\002\015\004\000\002\002\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\020\026\000\027\000\036\000\041\000\042" +
    "\000\043\000\046\000\001\002\000\020\026\017\027\026" +
    "\036\014\041\011\042\024\043\007\046\025\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\006" +
    "\003\226\006\227\001\002\000\024\002\uffef\012\uffef\026" +
    "\uffef\027\uffef\036\uffef\041\uffef\042\uffef\043\uffef\046\uffef" +
    "\001\002\000\004\004\225\001\002\000\024\002\ufff5\012" +
    "\ufff5\026\ufff5\027\ufff5\036\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\046\ufff5\001\002\000\024\002\uffed\012\uffed\026\uffed\027" +
    "\uffed\036\uffed\041\uffed\042\uffed\043\uffed\046\uffed\001\002" +
    "\000\006\003\167\006\170\001\002\000\024\002\ufff2\012" +
    "\ufff2\026\ufff2\027\ufff2\036\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\046\ufff2\001\002\000\024\002\ufff3\012\ufff3\026\ufff3\027" +
    "\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\046\ufff3\001\002" +
    "\000\006\003\157\006\160\001\002\000\024\002\ufff0\012" +
    "\ufff0\026\ufff0\027\ufff0\036\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\046\ufff0\001\002\000\024\002\ufff1\012\ufff1\026\ufff1\027" +
    "\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1\046\ufff1\001\002" +
    "\000\024\002\uffee\012\uffee\026\uffee\027\uffee\036\uffee\041" +
    "\uffee\042\uffee\043\uffee\046\uffee\001\002\000\024\002\ufff4" +
    "\012\ufff4\026\ufff4\027\ufff4\036\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\046\ufff4\001\002\000\006\003\144\046\145\001\002" +
    "\000\010\005\046\020\140\021\141\001\002\000\004\006" +
    "\041\001\002\000\022\002\uffff\026\017\027\026\036\014" +
    "\041\011\042\024\043\007\046\025\001\002\000\024\002" +
    "\ufff8\012\ufff8\026\ufff8\027\ufff8\036\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\046\ufff8\001\002\000\024\002\ufff6\012\ufff6\026" +
    "\ufff6\027\ufff6\036\ufff6\041\ufff6\042\ufff6\043\ufff6\046\ufff6" +
    "\001\002\000\024\002\ufffe\012\ufffe\026\ufffe\027\ufffe\036" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\046\ufffe\001\002\000\024" +
    "\002\ufffa\012\ufffa\026\ufffa\027\ufffa\036\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\046\ufffa\001\002\000\024\002\ufffc\012\ufffc" +
    "\026\ufffc\027\ufffc\036\ufffc\041\ufffc\042\ufffc\043\ufffc\046" +
    "\ufffc\001\002\000\024\002\ufff9\012\ufff9\026\ufff9\027\ufff9" +
    "\036\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9\001\002\000" +
    "\024\002\ufffb\012\ufffb\026\ufffb\027\ufffb\036\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\046\ufffb\001\002\000\024\002\ufffd\012" +
    "\ufffd\026\ufffd\027\ufffd\036\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\046\ufffd\001\002\000\024\002\ufff7\012\ufff7\026\ufff7\027" +
    "\ufff7\036\ufff7\041\ufff7\042\ufff7\043\ufff7\046\ufff7\001\002" +
    "\000\006\042\024\046\043\001\002\000\026\006\047\014" +
    "\055\034\050\044\057\045\053\046\061\047\056\050\052" +
    "\051\051\052\054\001\002\000\004\005\046\001\002\000" +
    "\026\006\uffd9\014\uffd9\034\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\026\006" +
    "\uffd8\014\uffd8\034\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\001\002\000\026\006\047\014" +
    "\055\034\050\044\057\045\053\046\061\047\056\050\052" +
    "\051\051\052\054\001\002\000\026\006\047\014\055\034" +
    "\050\044\057\045\053\046\061\047\056\050\052\051\051" +
    "\052\054\001\002\000\026\006\047\014\055\034\050\044" +
    "\057\045\053\046\061\047\056\050\052\051\051\052\054" +
    "\001\002\000\050\004\uffbe\007\uffbe\010\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\035\uffbe\001\002\000\050\004\uffb8\007\uffb8\010\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\035\uffb8\001\002\000\050\004\uffbb\007" +
    "\uffbb\010\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\001\002\000\050" +
    "\004\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\001" +
    "\002\000\026\006\047\014\055\034\050\044\057\045\053" +
    "\046\061\047\056\050\052\051\051\052\054\001\002\000" +
    "\050\004\uffb9\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9" +
    "\001\002\000\050\004\uffbc\007\uffbc\010\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\035\uffbc\001\002\000\004\004\121\001\002\000\050" +
    "\004\uffba\007\uffba\010\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba\001" +
    "\002\000\050\004\uffd2\007\uffd2\010\uffd2\013\101\014\071" +
    "\015\067\016\063\017\074\020\064\021\065\022\102\023" +
    "\076\024\073\025\100\030\077\031\066\032\072\033\070" +
    "\035\075\001\002\000\026\006\047\014\055\034\050\044" +
    "\057\045\053\046\061\047\056\050\052\051\051\052\054" +
    "\001\002\000\050\004\uffc1\007\uffc1\010\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\035\uffc1\001\002\000\050\004\uffc0\007\uffc0\010\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\001\002\000\026\006\047\014" +
    "\055\034\050\044\057\045\053\046\061\047\056\050\052" +
    "\051\051\052\054\001\002\000\026\006\047\014\055\034" +
    "\050\044\057\045\053\046\061\047\056\050\052\051\051" +
    "\052\054\001\002\000\026\006\047\014\055\034\050\044" +
    "\057\045\053\046\061\047\056\050\052\051\051\052\054" +
    "\001\002\000\026\006\047\014\055\034\050\044\057\045" +
    "\053\046\061\047\056\050\052\051\051\052\054\001\002" +
    "\000\026\006\047\014\055\034\050\044\057\045\053\046" +
    "\061\047\056\050\052\051\051\052\054\001\002\000\026" +
    "\006\047\014\055\034\050\044\057\045\053\046\061\047" +
    "\056\050\052\051\051\052\054\001\002\000\026\006\047" +
    "\014\055\034\050\044\057\045\053\046\061\047\056\050" +
    "\052\051\051\052\054\001\002\000\026\006\047\014\055" +
    "\034\050\044\057\045\053\046\061\047\056\050\052\051" +
    "\051\052\054\001\002\000\026\006\047\014\055\034\050" +
    "\044\057\045\053\046\061\047\056\050\052\051\051\052" +
    "\054\001\002\000\026\006\047\014\055\034\050\044\057" +
    "\045\053\046\061\047\056\050\052\051\051\052\054\001" +
    "\002\000\026\006\047\014\055\034\050\044\057\045\053" +
    "\046\061\047\056\050\052\051\051\052\054\001\002\000" +
    "\026\006\047\014\055\034\050\044\057\045\053\046\061" +
    "\047\056\050\052\051\051\052\054\001\002\000\026\006" +
    "\047\014\055\034\050\044\057\045\053\046\061\047\056" +
    "\050\052\051\051\052\054\001\002\000\050\004\uffcb\007" +
    "\uffcb\010\uffcb\013\101\014\071\015\067\016\063\017\074" +
    "\020\064\021\065\022\uffcb\023\uffcb\024\073\025\100\030" +
    "\077\031\066\032\uffcb\033\uffcb\035\075\001\002\000\050" +
    "\004\uffd1\007\uffd1\010\uffd1\013\uffd1\014\uffd1\015\067\016" +
    "\063\017\074\020\064\021\065\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\075\001" +
    "\002\000\050\004\uffc8\007\uffc8\010\uffc8\013\101\014\071" +
    "\015\067\016\063\017\074\020\064\021\065\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\035\075\001\002\000\050\004\uffc7\007\uffc7\010\uffc7\013" +
    "\101\014\071\015\067\016\063\017\074\020\064\021\065" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\035\075\001\002\000\050\004\uffca\007\uffca" +
    "\010\uffca\013\101\014\071\015\067\016\063\017\074\020" +
    "\064\021\065\022\uffca\023\uffca\024\073\025\100\030\077" +
    "\031\066\032\uffca\033\uffca\035\075\001\002\000\050\004" +
    "\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\074\020\064\021\065\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\001\002" +
    "\000\050\004\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\064\021\065\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\001\002\000\050\004\uffc9\007\uffc9\010\uffc9\013\101" +
    "\014\071\015\067\016\063\017\074\020\064\021\065\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\075\001\002\000\050\004\uffc5\007\uffc5\010" +
    "\uffc5\013\101\014\071\015\067\016\063\017\074\020\064" +
    "\021\065\022\102\023\076\024\073\025\100\030\077\031" +
    "\066\032\uffc5\033\uffc5\035\075\001\002\000\050\004\uffd0" +
    "\007\uffd0\010\uffd0\013\uffd0\014\uffd0\015\067\016\063\017" +
    "\074\020\064\021\065\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\075\001\002\000" +
    "\050\004\uffc4\007\uffc4\010\uffc4\013\101\014\071\015\067" +
    "\016\063\017\074\020\064\021\065\022\102\023\076\024" +
    "\073\025\100\030\077\031\066\032\072\033\uffc4\035\075" +
    "\001\002\000\050\004\uffcf\007\uffcf\010\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\074\020\064\021\065\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\035\uffcf\001\002\000\050\004\uffc6\007\uffc6\010\uffc6" +
    "\013\101\014\071\015\067\016\063\017\074\020\064\021" +
    "\065\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\035\075\001\002\000\050\004\uffce\007" +
    "\uffce\010\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\074" +
    "\020\064\021\065\022\uffce\023\uffce\024\uffce\025\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\035\uffce\001\002\000\046" +
    "\002\uffe6\006\uffe6\012\uffe6\014\uffe6\026\uffe6\027\uffe6\034" +
    "\uffe6\036\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000" +
    "\050\004\uffc3\007\uffc3\010\uffc3\013\uffc3\014\uffc3\015\067" +
    "\016\063\017\074\020\064\021\065\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\035\075" +
    "\001\002\000\050\004\uffc2\007\uffc2\010\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\064\021\065\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\035\uffc2\001\002\000\044\007\125\013\101\014\071" +
    "\015\067\016\063\017\074\020\064\021\065\022\102\023" +
    "\076\024\073\025\100\030\077\031\066\032\072\033\070" +
    "\035\075\001\002\000\050\004\uffbf\007\uffbf\010\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\001\002\000\004\004\127\001\002" +
    "\000\004\046\131\001\002\000\004\007\134\001\002\000" +
    "\006\020\132\021\133\001\002\000\004\007\uffd7\001\002" +
    "\000\004\007\uffd6\001\002\000\004\011\135\001\002\000" +
    "\020\026\017\027\026\036\014\041\011\042\024\043\007" +
    "\046\025\001\002\000\022\012\137\026\017\027\026\036" +
    "\014\041\011\042\024\043\007\046\025\001\002\000\024" +
    "\002\uffda\012\uffda\026\uffda\027\uffda\036\uffda\041\uffda\042" +
    "\uffda\043\uffda\046\uffda\001\002\000\004\004\143\001\002" +
    "\000\004\004\142\001\002\000\024\002\uffd4\012\uffd4\026" +
    "\uffd4\027\uffd4\036\uffd4\041\uffd4\042\uffd4\043\uffd4\046\uffd4" +
    "\001\002\000\024\002\uffd5\012\uffd5\026\uffd5\027\uffd5\036" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\046\uffd5\001\002\000\004" +
    "\004\156\001\002\000\010\004\uffe8\005\154\010\uffe8\001" +
    "\002\000\006\004\150\010\147\001\002\000\004\046\151" +
    "\001\002\000\046\002\uffec\006\uffec\012\uffec\014\uffec\026" +
    "\uffec\027\uffec\034\uffec\036\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\001\002\000\010\004\uffea\005\152\010\uffea\001\002" +
    "\000\026\006\047\014\055\034\050\044\057\045\053\046" +
    "\061\047\056\050\052\051\051\052\054\001\002\000\006" +
    "\004\uffe9\010\uffe9\001\002\000\026\006\047\014\055\034" +
    "\050\044\057\045\053\046\061\047\056\050\052\051\051" +
    "\052\054\001\002\000\006\004\uffe7\010\uffe7\001\002\000" +
    "\046\002\uffeb\006\uffeb\012\uffeb\014\uffeb\026\uffeb\027\uffeb" +
    "\034\uffeb\036\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\001\002" +
    "\000\004\012\166\001\002\000\026\006\047\014\055\034" +
    "\050\044\057\045\053\046\061\047\056\050\052\051\051" +
    "\052\054\001\002\000\004\007\162\001\002\000\004\011" +
    "\163\001\002\000\020\026\017\027\026\036\014\041\011" +
    "\042\024\043\007\046\025\001\002\000\022\012\165\026" +
    "\017\027\026\036\014\041\011\042\024\043\007\046\025" +
    "\001\002\000\024\002\uffdc\012\uffdc\026\uffdc\027\uffdc\036" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\046\uffdc\001\002\000\024" +
    "\002\uffdb\012\uffdb\026\uffdb\027\uffdb\036\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\046\uffdb\001\002\000\004\012\224\001\002" +
    "\000\026\006\047\014\055\034\050\044\057\045\053\046" +
    "\061\047\056\050\052\051\051\052\054\001\002\000\004" +
    "\007\172\001\002\000\004\011\173\001\002\000\020\026" +
    "\017\027\026\036\014\041\011\042\024\043\007\046\025" +
    "\001\002\000\022\012\175\026\017\027\026\036\014\041" +
    "\011\042\024\043\007\046\025\001\002\000\026\002\uffe1" +
    "\012\uffe1\026\uffe1\027\uffe1\036\177\037\201\041\uffe1\042" +
    "\uffe1\043\uffe1\046\uffe1\001\002\000\024\002\uffe2\012\uffe2" +
    "\026\uffe2\027\uffe2\036\uffe2\041\uffe2\042\uffe2\043\uffe2\046" +
    "\uffe2\001\002\000\004\040\220\001\002\000\006\036\177" +
    "\037\211\001\002\000\004\006\202\001\002\000\026\006" +
    "\047\014\055\034\050\044\057\045\053\046\061\047\056" +
    "\050\052\051\051\052\054\001\002\000\004\007\204\001" +
    "\002\000\004\011\205\001\002\000\020\026\017\027\026" +
    "\036\014\041\011\042\024\043\007\046\025\001\002\000" +
    "\022\012\207\026\017\027\026\036\014\041\011\042\024" +
    "\043\007\046\025\001\002\000\006\036\uffde\037\uffde\001" +
    "\002\000\024\002\uffe3\012\uffe3\026\uffe3\027\uffe3\036\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\046\uffe3\001\002\000\004\006" +
    "\212\001\002\000\026\006\047\014\055\034\050\044\057" +
    "\045\053\046\061\047\056\050\052\051\051\052\054\001" +
    "\002\000\004\007\214\001\002\000\004\011\215\001\002" +
    "\000\020\026\017\027\026\036\014\041\011\042\024\043" +
    "\007\046\025\001\002\000\022\012\217\026\017\027\026" +
    "\036\014\041\011\042\024\043\007\046\025\001\002\000" +
    "\006\036\uffdf\037\uffdf\001\002\000\004\011\221\001\002" +
    "\000\020\026\017\027\026\036\014\041\011\042\024\043" +
    "\007\046\025\001\002\000\022\012\223\026\017\027\026" +
    "\036\014\041\011\042\024\043\007\046\025\001\002\000" +
    "\024\002\uffdd\012\uffdd\026\uffdd\027\uffdd\036\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\046\uffdd\001\002\000\024\002\uffe0\012" +
    "\uffe0\026\uffe0\027\uffe0\036\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\046\uffe0\001\002\000\024\002\uffd3\012\uffd3\026\uffd3\027" +
    "\uffd3\036\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\001\002" +
    "\000\004\004\233\001\002\000\026\006\047\014\055\034" +
    "\050\044\057\045\053\046\061\047\056\050\052\051\051" +
    "\052\054\001\002\000\004\007\231\001\002\000\004\004" +
    "\232\001\002\000\024\002\uffe5\012\uffe5\026\uffe5\027\uffe5" +
    "\036\uffe5\041\uffe5\042\uffe5\043\uffe5\046\uffe5\001\002\000" +
    "\024\002\uffe4\012\uffe4\026\uffe4\027\uffe4\036\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\046\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\013\004\024\003\001\001\000\026\004" +
    "\026\005\011\006\022\007\014\014\015\015\020\016\017" +
    "\017\007\020\021\021\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\031\006\036\007\032\014" +
    "\033\015\035\016\034\017\027\020\037\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\044\014\043\022\041\001\001\000\006\002\125\003\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\057\003\061\001\001\000\004\003\123" +
    "\001\001\000\004\003\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\116\001\001\000\004\003\115\001\001\000\004" +
    "\003\114\001\001\000\004\003\113\001\001\000\004\003" +
    "\112\001\001\000\004\003\111\001\001\000\004\003\110" +
    "\001\001\000\004\003\107\001\001\000\004\003\106\001" +
    "\001\000\004\003\105\001\001\000\004\003\104\001\001" +
    "\000\004\003\103\001\001\000\004\003\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\135\005\011\006\022\007\014\014\015" +
    "\015\020\016\017\017\007\020\021\021\012\001\001\000" +
    "\024\005\031\006\036\007\032\014\033\015\035\016\034" +
    "\017\027\020\037\021\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\152\003\061\001\001\000\002\001\001\000" +
    "\006\002\154\003\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\160\003\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\163" +
    "\005\011\006\022\007\014\014\015\015\020\016\017\017" +
    "\007\020\021\021\012\001\001\000\024\005\031\006\036" +
    "\007\032\014\033\015\035\016\034\017\027\020\037\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\170\003\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\173\005\011\006\022" +
    "\007\014\014\015\015\020\016\017\017\007\020\021\021" +
    "\012\001\001\000\024\005\031\006\036\007\032\014\033" +
    "\015\035\016\034\017\027\020\037\021\030\001\001\000" +
    "\006\010\177\011\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\207\001\001\000\002\001\001\000" +
    "\006\002\202\003\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\205\005\011\006\022\007\014\014" +
    "\015\015\020\016\017\017\007\020\021\021\012\001\001" +
    "\000\024\005\031\006\036\007\032\014\033\015\035\016" +
    "\034\017\027\020\037\021\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\212\003" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\215\005\011\006\022\007\014\014\015\015\020\016" +
    "\017\017\007\020\021\021\012\001\001\000\024\005\031" +
    "\006\036\007\032\014\033\015\035\016\034\017\027\020" +
    "\037\021\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\221\005\011\006\022\007\014\014\015\015" +
    "\020\016\017\017\007\020\021\021\012\001\001\000\024" +
    "\005\031\006\036\007\032\014\033\015\035\016\034\017" +
    "\027\020\037\021\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\227\003\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static Instruccion root;

    public static ArrayList<TError> errores;

    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {


  String ArchivoOrigen;

  Instruccion root;

  public void SetArchivo(String nombre)
  {
    ArchivoOrigen = nombre;
  }

  public Instruccion getRoot()
  {
    return root;
  }

  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= cadena 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= caracter 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      char res = val.charAt(1);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= identificador 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Identificador(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= decimal 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      double res = Double.parseDouble(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= entero 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      int res = Integer.parseInt(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= falso 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= verdad 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= oParent E cParent 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E dec 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.DEC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E inc 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
       RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.INC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= not E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.NOT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= menos E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E or E 
            {
              Expresion RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.OR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E and E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.AND);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft,ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E dif E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIFERENTE);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E igual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.IGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E mod E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MOD);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E pot E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.POT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E div E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIV);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E mult E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MULT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= E 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SMASH ::= romper ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          RESULT = new SentenciaSmash(auxright, auxleft, ArchivoOrigen);
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SMASH",11, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECREMENTO ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = d;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",14, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AUMENTO ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("AUMENTO",13, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INS2 ::= identificador dec 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = d;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INS2 ::= identificador inc 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = s;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INS1 ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",16, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INS1 ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",16, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT_FOR ::= para oParent INS1 EXP ptComa INS2 cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).value;
		int instruc1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int instruc1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object instruc1 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int instrc2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int instrc2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object instrc2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion condicion = (Expresion)nodo;
            Instruccion ins1 = (Instruccion)instruc1;
            Instruccion ins2 = (Instruccion)instrc2;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaFor n = new SentenciaFor(auxright, auxleft, ArchivoOrigen, ins1, condicion, ins2, instrucciones);
            RESULT = n;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",15, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT_WHILE ::= mientras error cKey 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT_WHILE ::= mientras oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaWhile s = new SentenciaWhile(auxright, auxleft, ArchivoOrigen, exp, instrucciones);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_NOT ::= si ifnot oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
          NodoELIF nuevo = new NodoELIF(instrucciones, auxright, auxleft, ArchivoOrigen);
          RESULT = nuevo;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF_NOT",7, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSE ::= sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = new ArrayList<>();
         nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE ::= ELSE sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = (ArrayList<NodoELIF>)lista2;
         if(nodos==null)
         {
           nodos = new ArrayList<>();
         }
         if(condicion!=null&&instrucciones!=null)
         {
           nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         }
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= si error cKey 
            {
              Object RESULT =null;
		
        /*POR SI EXISTE UN ERROR*/
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, null);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> nodos = new ArrayList<>();
        NodoELIF n = (NodoELIF)defecto;
        nodos.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, nodos);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey ELSE IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listanodosleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listanodosright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object listanodos = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> elifs = (ArrayList<NodoELIF>)listanodos;
        NodoELIF n = (NodoELIF)defecto;
        elifs.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, elifs);

        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPRIMIR ::= print error ptComa 
            {
              Object RESULT =null;
		

          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRIMIR ::= print oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            Expresion exp = (Expresion)nodo;
            Print p = new Print(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = p;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                Expresion val = (Expresion)nodo;
                AsignacionVar ins = new AsignacionVar(idright, idleft, ArchivoOrigen, id, val);
                RESULT = ins;
              
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",10, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_DECLA ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo);
            ArrayList<Instruccion> declaraciones = new ArrayList<>();
            declaraciones.add(v);
            RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_DECLA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id);
          ArrayList<Instruccion> declaraciones = new ArrayList<>();
          declaraciones.add(v);
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_DECLA ::= L_DECLA coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_DECLA ::= L_DECLA coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_VAR ::= var error ptComa 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  /*EL ERRO YA SE REPORTA CON EXITOOO!*/
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_VAR ::= var L_DECLA ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
                  if(declaraciones == null)
                  {
                    declaraciones = new ArrayList<>();
                  }
                  DeclaracionesVar d = new DeclaracionesVar(auxright, auxleft, ArchivoOrigen, declaraciones);
                  RESULT = d;
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= SENT_FOR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= DECREMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= AUMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= SENT_WHILE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= SMASH 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= IF 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= IMPRIMIR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= STATEMENTS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= STATEMENTS DECREMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= STATEMENTS AUMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= STATEMENTS SENT_WHILE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= STATEMENTS IF 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= STATEMENTS SMASH 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= STATEMENTS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= STATEMENTS IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENTS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int listadoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int listadoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object listado = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)listado;
          if(instrucciones==null)
          {
            instrucciones = new ArrayList<>();
          }
          NodoInicio raiz = new NodoInicio(instrucciones);
          this.root = raiz;
          parser.root = raiz;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>();
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

