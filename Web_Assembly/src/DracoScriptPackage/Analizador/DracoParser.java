
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 26 20:08:43 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 26 20:08:43 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\004\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\022\006\004\012\011\030\005\032\013\033" +
    "\010\034\015\035\012\036\006\001\002\000\022\006\004" +
    "\012\011\030\005\032\013\033\010\034\015\035\012\036" +
    "\006\001\002\000\022\006\004\012\011\030\005\032\013" +
    "\033\010\034\015\035\012\036\006\001\002\000\046\004" +
    "\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\001\002\000\004" +
    "\002\057\001\002\000\046\004\uffea\007\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\031\uffea\001\002\000\022\006\004\012\011\030\005" +
    "\032\013\033\010\034\015\035\012\036\006\001\002\000" +
    "\046\004\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\001\002" +
    "\000\046\004\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\001" +
    "\002\000\004\004\055\001\002\000\046\004\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\031\uffe9\001\002\000\044\004\uffff\011" +
    "\034\012\026\013\023\014\017\015\030\016\020\017\021" +
    "\020\036\021\032\022\027\023\035\024\033\025\022\026" +
    "\025\027\024\031\031\001\002\000\022\006\004\012\011" +
    "\030\005\032\013\033\010\034\015\035\012\036\006\001" +
    "\002\000\046\004\uffee\007\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee" +
    "\001\002\000\046\004\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031" +
    "\uffed\001\002\000\022\006\004\012\011\030\005\032\013" +
    "\033\010\034\015\035\012\036\006\001\002\000\022\006" +
    "\004\012\011\030\005\032\013\033\010\034\015\035\012" +
    "\036\006\001\002\000\022\006\004\012\011\030\005\032" +
    "\013\033\010\034\015\035\012\036\006\001\002\000\022" +
    "\006\004\012\011\030\005\032\013\033\010\034\015\035" +
    "\012\036\006\001\002\000\022\006\004\012\011\030\005" +
    "\032\013\033\010\034\015\035\012\036\006\001\002\000" +
    "\022\006\004\012\011\030\005\032\013\033\010\034\015" +
    "\035\012\036\006\001\002\000\022\006\004\012\011\030" +
    "\005\032\013\033\010\034\015\035\012\036\006\001\002" +
    "\000\022\006\004\012\011\030\005\032\013\033\010\034" +
    "\015\035\012\036\006\001\002\000\022\006\004\012\011" +
    "\030\005\032\013\033\010\034\015\035\012\036\006\001" +
    "\002\000\022\006\004\012\011\030\005\032\013\033\010" +
    "\034\015\035\012\036\006\001\002\000\022\006\004\012" +
    "\011\030\005\032\013\033\010\034\015\035\012\036\006" +
    "\001\002\000\022\006\004\012\011\030\005\032\013\033" +
    "\010\034\015\035\012\036\006\001\002\000\022\006\004" +
    "\012\011\030\005\032\013\033\010\034\015\035\012\036" +
    "\006\001\002\000\046\004\ufff8\007\ufff8\011\034\012\026" +
    "\013\023\014\017\015\030\016\020\017\021\020\ufff8\021" +
    "\ufff8\022\027\023\035\024\033\025\022\026\ufff8\027\ufff8" +
    "\031\031\001\002\000\046\004\ufff5\007\ufff5\011\034\012" +
    "\026\013\023\014\017\015\030\016\020\017\021\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\031\031\001\002\000\046\004\ufffe\007\ufffe\011\ufffe" +
    "\012\ufffe\013\023\014\017\015\030\016\020\017\021\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\031\031\001\002\000\046\004\ufff4\007\ufff4\011" +
    "\034\012\026\013\023\014\017\015\030\016\020\017\021" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\031\031\001\002\000\046\004\ufff7\007\ufff7" +
    "\011\034\012\026\013\023\014\017\015\030\016\020\017" +
    "\021\020\ufff7\021\ufff7\022\027\023\035\024\033\025\022" +
    "\026\ufff7\027\ufff7\031\031\001\002\000\046\004\ufff9\007" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\030\016\020" +
    "\017\021\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\031\ufff9\001\002\000\046\004\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\020\017\021\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\031\ufffa\001\002\000\046\004" +
    "\ufff6\007\ufff6\011\034\012\026\013\023\014\017\015\030" +
    "\016\020\017\021\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\031\031\001\002\000\046" +
    "\004\ufffd\007\ufffd\011\ufffd\012\ufffd\013\023\014\017\015" +
    "\030\016\020\017\021\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\031\031\001\002\000" +
    "\046\004\ufff2\007\ufff2\011\034\012\026\013\023\014\017" +
    "\015\030\016\020\017\021\020\036\021\032\022\027\023" +
    "\035\024\033\025\022\026\ufff2\027\ufff2\031\031\001\002" +
    "\000\046\004\ufff1\007\ufff1\011\034\012\026\013\023\014" +
    "\017\015\030\016\020\017\021\020\036\021\032\022\027" +
    "\023\035\024\033\025\022\026\025\027\ufff1\031\031\001" +
    "\002\000\046\004\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\030\016\020\017\021\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc" +
    "\001\002\000\046\004\ufff3\007\ufff3\011\034\012\026\013" +
    "\023\014\017\015\030\016\020\017\021\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031" +
    "\031\001\002\000\046\004\ufffb\007\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\030\016\020\017\021\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\031\ufffb\001\002\000\004\002\000\001\002\000\046\004" +
    "\ufff0\007\ufff0\011\ufff0\012\ufff0\013\023\014\017\015\030" +
    "\016\020\017\021\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\031\031\001\002\000\004" +
    "\002\001\001\002\000\046\004\uffef\007\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\020\017\021\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\031\uffef\001\002\000\044\007\062\011\034\012\026" +
    "\013\023\014\017\015\030\016\020\017\021\020\036\021" +
    "\032\022\027\023\035\024\033\025\022\026\025\027\024" +
    "\031\031\001\002\000\046\004\uffec\007\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\031\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\010\002\013\003\015\004\006\001\001\000" +
    "\004\003\060\001\001\000\004\003\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\052\001\001\000\004\003\051\001\001\000\004\003" +
    "\050\001\001\000\004\003\047\001\001\000\004\003\046" +
    "\001\001\000\004\003\045\001\001\000\004\003\044\001" +
    "\001\000\004\003\043\001\001\000\004\003\042\001\001" +
    "\000\004\003\041\001\001\000\004\003\040\001\001\000" +
    "\004\003\037\001\001\000\004\003\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      System.err.println("Error en :"+ s.value.toString() + " | Linea: "+s.right+1);
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      System.err.println("Error en :"+ s.value.toString() + " | Linea: "+s.right+1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {




  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= cadena 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= caracter 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= identificador 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= decimal 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= entero 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= oParent E cParent 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E dec 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E inc 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= not E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= menos E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E or E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= E and E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= E mayorigual E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E menorigual E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= E mayor E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= E menor E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= E dif E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= E igual E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E mod E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E pot E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= E div E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= E mult E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= E menos E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= E mas E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXP ::= E 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= EXP ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

