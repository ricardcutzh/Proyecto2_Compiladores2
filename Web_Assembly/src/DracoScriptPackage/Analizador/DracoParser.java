
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 15 18:08:05 CST 2018
//----------------------------------------------------

package DracoScriptPackage.Analizador;

import java_cup.runtime.Symbol;
import Abstraccion.*;
import DracoScriptPackage.DracoAST.Valores.*;
import DracoScriptPackage.DracoAST.Declaraciones.*;
import DracoScriptPackage.DracoAST.Sentencias.*;
import DracoScriptPackage.DracoAST.FuncionesNativas.*;
import InfoEstatica.Estatico;
import ObjsComun.*;
import java.util.ArrayList;
import ErrorManager.TError;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 15 18:08:05 CST 2018
  */
public class DracoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DracoParser() {super();}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DracoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\033\002\000\002\013" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\012\005\000\002\012\007\000\002\012\003\000\002" +
    "\012\005\000\002\014\006\000\002\006\007\000\002\006" +
    "\005\000\002\007\013\000\002\007\012\000\002\007\011" +
    "\000\002\007\005\000\002\010\012\000\002\010\011\000" +
    "\002\011\007\000\002\017\011\000\002\017\005\000\002" +
    "\022\014\000\002\023\003\000\002\023\003\000\002\024" +
    "\004\000\002\024\004\000\002\031\007\000\002\032\005" +
    "\000\002\032\003\000\002\020\005\000\002\021\005\000" +
    "\002\015\004\000\002\016\015\000\002\016\005\000\002" +
    "\025\017\000\002\025\005\000\002\026\017\000\002\026" +
    "\005\000\002\027\021\000\002\027\005\000\002\030\015" +
    "\000\002\030\005\000\002\002\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\034\026\000\027\000\030\000\031\000\032" +
    "\000\033\000\034\000\040\000\044\000\047\000\050\000" +
    "\051\000\054\000\001\002\000\034\026\014\027\010\030" +
    "\020\031\036\032\031\033\026\034\035\040\007\044\040" +
    "\047\033\050\037\051\011\054\043\001\002\000\004\002" +
    "\006\001\002\000\004\002\001\001\002\000\004\006\362" +
    "\001\002\000\004\006\343\001\002\000\006\003\335\006" +
    "\336\001\002\000\040\002\uffed\012\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\040\uffed\044" +
    "\uffed\047\uffed\050\uffed\051\uffed\054\uffed\001\002\000\040" +
    "\002\uffe3\012\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\040\uffe3\044\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\054\uffe3\001\002\000\006\003\325\006\326\001" +
    "\002\000\040\002\uffe7\012\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\044\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\054\uffe7\001\002\000\040\002\uffe1" +
    "\012\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\040\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\054\uffe1\001\002\000\040\002\uffee\012\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\040\uffee" +
    "\044\uffee\047\uffee\050\uffee\051\uffee\054\uffee\001\002\000" +
    "\006\003\311\006\312\001\002\000\040\002\uffe5\012\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\040\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\054\uffe5" +
    "\001\002\000\040\002\uffe4\012\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\044\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\054\uffe4\001\002\000\040\002" +
    "\uffeb\012\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\040\uffeb\044\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\054\uffeb\001\002\000\040\002\uffec\012\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\040" +
    "\uffec\044\uffec\047\uffec\050\uffec\051\uffec\054\uffec\001\002" +
    "\000\040\002\uffe2\012\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2\044\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\054\uffe2\001\002\000\006\003\271\006" +
    "\272\001\002\000\036\002\uffff\026\014\027\010\030\020" +
    "\031\036\032\031\033\026\034\035\040\007\044\040\047" +
    "\033\050\037\051\011\054\043\001\002\000\040\002\uffe6" +
    "\012\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\040\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\054\uffe6\001\002\000\006\003\253\006\254\001\002\000" +
    "\040\002\uffe9\012\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\040\uffe9\044\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\054\uffe9\001\002\000\004\004\252\001\002" +
    "\000\040\002\uffe8\012\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\040\uffe8\044\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\054\uffe8\001\002\000\006\003\236\006" +
    "\237\001\002\000\006\003\220\006\221\001\002\000\006" +
    "\003\205\054\206\001\002\000\006\003\130\006\131\001" +
    "\002\000\040\002\uffef\012\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\040\uffef\044\uffef\047" +
    "\uffef\050\uffef\051\uffef\054\uffef\001\002\000\040\002\uffea" +
    "\012\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\040\uffea\044\uffea\047\uffea\050\uffea\051\uffea" +
    "\054\uffea\001\002\000\010\005\044\020\045\021\046\001" +
    "\002\000\026\006\051\014\057\042\052\052\061\053\055" +
    "\054\063\055\060\056\054\057\053\060\056\001\002\000" +
    "\004\004\050\001\002\000\004\004\047\001\002\000\040" +
    "\002\uffc5\012\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\040\uffc5\044\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\054\uffc5\001\002\000\040\002\uffc6\012\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\040\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6\001" +
    "\002\000\026\006\051\014\057\042\052\052\061\053\055" +
    "\054\063\055\060\056\054\057\053\060\056\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\050\004" +
    "\uffa5\007\uffa5\010\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\043\uffa5\001\002" +
    "\000\050\004\uff9f\007\uff9f\010\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\043" +
    "\uff9f\001\002\000\050\004\uffa2\007\uffa2\010\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\041\uffa2\043\uffa2\001\002\000\050\004\uffa4\007\uffa4\010" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\041\uffa4\043\uffa4\001\002\000\026\006\051" +
    "\014\057\042\052\052\061\053\055\054\063\055\060\056" +
    "\054\057\053\060\056\001\002\000\050\004\uffa0\007\uffa0" +
    "\010\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\041\uffa0\043\uffa0\001\002\000\050\004" +
    "\uffa3\007\uffa3\010\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\043\uffa3\001\002" +
    "\000\004\004\123\001\002\000\050\004\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\041\uffa1\043\uffa1\001\002\000\050\004\uffb9" +
    "\007\uffb9\010\uffb9\013\102\014\073\015\071\016\065\017" +
    "\076\020\066\021\067\022\104\023\100\024\075\025\103" +
    "\035\101\036\070\037\074\041\072\043\077\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\050\004" +
    "\uffa8\007\uffa8\010\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\041\uffa8\043\uffa8\001\002" +
    "\000\050\004\uffa7\007\uffa7\010\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\043" +
    "\uffa7\001\002\000\026\006\051\014\057\042\052\052\061" +
    "\053\055\054\063\055\060\056\054\057\053\060\056\001" +
    "\002\000\026\006\051\014\057\042\052\052\061\053\055" +
    "\054\063\055\060\056\054\057\053\060\056\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\026\006" +
    "\051\014\057\042\052\052\061\053\055\054\063\055\060" +
    "\056\054\057\053\060\056\001\002\000\026\006\051\014" +
    "\057\042\052\052\061\053\055\054\063\055\060\056\054" +
    "\057\053\060\056\001\002\000\026\006\051\014\057\042" +
    "\052\052\061\053\055\054\063\055\060\056\054\057\053" +
    "\060\056\001\002\000\026\006\051\014\057\042\052\052" +
    "\061\053\055\054\063\055\060\056\054\057\053\060\056" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\026\006\051\014\057\042\052\052\061\053\055\054" +
    "\063\055\060\056\054\057\053\060\056\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\026\006\051" +
    "\014\057\042\052\052\061\053\055\054\063\055\060\056" +
    "\054\057\053\060\056\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\026\006\051\014\057\042\052" +
    "\052\061\053\055\054\063\055\060\056\054\057\053\060" +
    "\056\001\002\000\050\004\uffb2\007\uffb2\010\uffb2\013\102" +
    "\014\073\015\071\016\065\017\076\020\066\021\067\022" +
    "\uffb2\023\uffb2\024\075\025\103\035\101\036\070\037\uffb2" +
    "\041\uffb2\043\077\001\002\000\050\004\uffaf\007\uffaf\010" +
    "\uffaf\013\102\014\073\015\071\016\065\017\076\020\066" +
    "\021\067\022\uffaf\023\uffaf\024\uffaf\025\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\041\uffaf\043\077\001\002\000\050\004\uffb8" +
    "\007\uffb8\010\uffb8\013\uffb8\014\uffb8\015\071\016\065\017" +
    "\076\020\066\021\067\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\041\uffb8\043\077\001\002\000" +
    "\050\004\uffae\007\uffae\010\uffae\013\102\014\073\015\071" +
    "\016\065\017\076\020\066\021\067\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\035\uffae\036\uffae\037\uffae\041\uffae\043\077" +
    "\001\002\000\050\004\uffb1\007\uffb1\010\uffb1\013\102\014" +
    "\073\015\071\016\065\017\076\020\066\021\067\022\uffb1" +
    "\023\uffb1\024\075\025\103\035\101\036\070\037\uffb1\041" +
    "\uffb1\043\077\001\002\000\050\004\uffb3\007\uffb3\010\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\076\020\066\021" +
    "\067\022\uffb3\023\uffb3\024\uffb3\025\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\043\uffb3\001\002\000\050\004\uffb4\007" +
    "\uffb4\010\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\066\021\067\022\uffb4\023\uffb4\024\uffb4\025\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\041\uffb4\043\uffb4\001\002\000\050" +
    "\004\uffb0\007\uffb0\010\uffb0\013\102\014\073\015\071\016" +
    "\065\017\076\020\066\021\067\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\043\077\001" +
    "\002\000\050\004\uffac\007\uffac\010\uffac\013\102\014\073" +
    "\015\071\016\065\017\076\020\066\021\067\022\104\023" +
    "\100\024\075\025\103\035\101\036\070\037\uffac\041\uffac" +
    "\043\077\001\002\000\050\004\uffb7\007\uffb7\010\uffb7\013" +
    "\uffb7\014\uffb7\015\071\016\065\017\076\020\066\021\067" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\043\077\001\002\000\050\004\uffab\007\uffab" +
    "\010\uffab\013\102\014\073\015\071\016\065\017\076\020" +
    "\066\021\067\022\104\023\100\024\075\025\103\035\101" +
    "\036\070\037\074\041\uffab\043\077\001\002\000\050\004" +
    "\uffb6\007\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\076\020\066\021\067\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6\043\uffb6\001\002" +
    "\000\050\004\uffad\007\uffad\010\uffad\013\102\014\073\015" +
    "\071\016\065\017\076\020\066\021\067\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\035\uffad\036\uffad\037\uffad\041\uffad\043" +
    "\077\001\002\000\050\004\uffb5\007\uffb5\010\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\076\020\066\021\067\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\041\uffb5\043\uffb5\001\002\000\062\002\uffda\006\uffda\012" +
    "\uffda\014\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\040\uffda\042\uffda\044\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\001\002\000\050\004\uffaa\007\uffaa\010" +
    "\uffaa\013\uffaa\014\uffaa\015\071\016\065\017\076\020\066" +
    "\021\067\022\uffaa\023\uffaa\024\uffaa\025\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\041\uffaa\043\077\001\002\000\050\004\uffa9" +
    "\007\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\066\021\067\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\041\uffa9\043\uffa9\001\002\000" +
    "\044\007\127\013\102\014\073\015\071\016\065\017\076" +
    "\020\066\021\067\022\104\023\100\024\075\025\103\035" +
    "\101\036\070\037\074\041\072\043\077\001\002\000\050" +
    "\004\uffa6\007\uffa6\010\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\043\uffa6\001" +
    "\002\000\004\012\204\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\007\133\001\002\000\004" +
    "\011\134\001\002\000\034\026\014\027\010\030\020\031" +
    "\036\032\031\033\026\034\035\040\007\044\040\047\033" +
    "\050\037\051\011\054\043\001\002\000\036\012\136\026" +
    "\014\027\010\030\020\031\036\032\031\033\026\034\035" +
    "\040\007\044\040\047\033\050\037\051\011\054\043\001" +
    "\002\000\042\002\uffd5\012\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\040\uffd5\044\160\045" +
    "\157\047\uffd5\050\uffd5\051\uffd5\054\uffd5\001\002\000\040" +
    "\002\ufffc\012\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\040\ufffc\044\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\054\ufffc\001\002\000\040\002\ufff2\012\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\040\ufff2\044\ufff2\047\ufff2\050\ufff2\051\ufff2\054\ufff2\001" +
    "\002\000\040\002\ufff0\012\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\040\ufff0\044\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\054\ufff0\001\002\000\040\002\ufff6" +
    "\012\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\040\ufff6\044\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\054\ufff6\001\002\000\040\002\ufffd\012\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\040\ufffd" +
    "\044\ufffd\047\ufffd\050\ufffd\051\ufffd\054\ufffd\001\002\000" +
    "\040\002\ufff4\012\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\040\ufff4\044\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\054\ufff4\001\002\000\040\002\ufff3\012\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\040\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3\054\ufff3" +
    "\001\002\000\040\002\ufffa\012\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa\044\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\054\ufffa\001\002\000\040\002" +
    "\ufffb\012\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\040\ufffb\044\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\054\ufffb\001\002\000\040\002\ufff1\012\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\040" +
    "\ufff1\044\ufff1\047\ufff1\050\ufff1\051\ufff1\054\ufff1\001\002" +
    "\000\040\002\ufff8\012\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\044\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\054\ufff8\001\002\000\040\002\ufff5\012" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\040\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\054" +
    "\ufff5\001\002\000\040\002\ufff7\012\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\044" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\054\ufff7\001\002\000\040" +
    "\002\ufffe\012\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\040\ufffe\044\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\054\ufffe\001\002\000\040\002\ufff9\012\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\040\ufff9\044\ufff9\047\ufff9\050\ufff9\051\ufff9\054\ufff9\001" +
    "\002\000\040\002\uffd6\012\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\044\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\054\uffd6\001\002\000\004\006\176" +
    "\001\002\000\004\046\172\001\002\000\006\044\160\045" +
    "\163\001\002\000\040\002\uffd7\012\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\044" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\001\002\000\004" +
    "\006\164\001\002\000\026\006\051\014\057\042\052\052" +
    "\061\053\055\054\063\055\060\056\054\057\053\060\056" +
    "\001\002\000\004\007\166\001\002\000\004\011\167\001" +
    "\002\000\034\026\014\027\010\030\020\031\036\032\031" +
    "\033\026\034\035\040\007\044\040\047\033\050\037\051" +
    "\011\054\043\001\002\000\036\012\171\026\014\027\010" +
    "\030\020\031\036\032\031\033\026\034\035\040\007\044" +
    "\040\047\033\050\037\051\011\054\043\001\002\000\006" +
    "\044\uffd3\045\uffd3\001\002\000\004\011\173\001\002\000" +
    "\034\026\014\027\010\030\020\031\036\032\031\033\026" +
    "\034\035\040\007\044\040\047\033\050\037\051\011\054" +
    "\043\001\002\000\036\012\175\026\014\027\010\030\020" +
    "\031\036\032\031\033\026\034\035\040\007\044\040\047" +
    "\033\050\037\051\011\054\043\001\002\000\040\002\uffd1" +
    "\012\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\040\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\054\uffd1\001\002\000\026\006\051\014\057\042\052\052" +
    "\061\053\055\054\063\055\060\056\054\057\053\060\056" +
    "\001\002\000\004\007\200\001\002\000\004\011\201\001" +
    "\002\000\034\026\014\027\010\030\020\031\036\032\031" +
    "\033\026\034\035\040\007\044\040\047\033\050\037\051" +
    "\011\054\043\001\002\000\036\012\203\026\014\027\010" +
    "\030\020\031\036\032\031\033\026\034\035\040\007\044" +
    "\040\047\033\050\037\051\011\054\043\001\002\000\006" +
    "\044\uffd2\045\uffd2\001\002\000\040\002\uffd4\012\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\040\uffd4\044\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\001" +
    "\002\000\004\004\217\001\002\000\010\004\uffdc\005\215" +
    "\010\uffdc\001\002\000\006\004\210\010\211\001\002\000" +
    "\062\002\uffe0\006\uffe0\012\uffe0\014\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\040\uffe0\042" +
    "\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\001\002\000" +
    "\004\054\212\001\002\000\010\004\uffde\005\213\010\uffde" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\006\004\uffdd\010\uffdd\001\002\000\026\006\051\014" +
    "\057\042\052\052\061\053\055\054\063\055\060\056\054" +
    "\057\053\060\056\001\002\000\006\004\uffdb\010\uffdb\001" +
    "\002\000\062\002\uffdf\006\uffdf\012\uffdf\014\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\040" +
    "\uffdf\042\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001" +
    "\002\000\004\004\235\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\010\223\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\004\010\225" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\004\010\227\001\002\000\026\006\051\014\057\042" +
    "\052\052\061\053\055\054\063\055\060\056\054\057\053" +
    "\060\056\001\002\000\004\010\231\001\002\000\026\006" +
    "\051\014\057\042\052\052\061\053\055\054\063\055\060" +
    "\056\054\057\053\060\056\001\002\000\004\007\233\001" +
    "\002\000\004\004\234\001\002\000\040\002\uffc1\012\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\040\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\054\uffc1" +
    "\001\002\000\040\002\uffc0\012\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040\uffc0\044\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\054\uffc0\001\002\000\004\004" +
    "\251\001\002\000\026\006\051\014\057\042\052\052\061" +
    "\053\055\054\063\055\060\056\054\057\053\060\056\001" +
    "\002\000\004\010\241\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\010\243\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\004\010\245" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\004\007\247\001\002\000\004\004\250\001\002\000" +
    "\040\002\uffbb\012\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\040\uffbb\044\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\054\uffbb\001\002\000\040\002\uffba\012\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\040\uffba\044\uffba\047\uffba\050\uffba\051\uffba\054\uffba" +
    "\001\002\000\040\002\uffc4\012\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4\044\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\054\uffc4\001\002\000\004\004" +
    "\270\001\002\000\026\006\051\014\057\042\052\052\061" +
    "\053\055\054\063\055\060\056\054\057\053\060\056\001" +
    "\002\000\004\010\256\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\010\260\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\004\010\262" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\004\010\264\001\002\000\026\006\051\014\057\042" +
    "\052\052\061\053\055\054\063\055\060\056\054\057\053" +
    "\060\056\001\002\000\004\007\266\001\002\000\004\004" +
    "\267\001\002\000\040\002\uffbf\012\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf\044" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\054\uffbf\001\002\000\040" +
    "\002\uffbe\012\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\040\uffbe\044\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\054\uffbe\001\002\000\004\004\310\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\004\010" +
    "\274\001\002\000\026\006\051\014\057\042\052\052\061" +
    "\053\055\054\063\055\060\056\054\057\053\060\056\001" +
    "\002\000\004\010\276\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\010\300\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\004\010\302" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\004\010\304\001\002\000\026\006\051\014\057\042" +
    "\052\052\061\053\055\054\063\055\060\056\054\057\053" +
    "\060\056\001\002\000\004\007\306\001\002\000\004\004" +
    "\307\001\002\000\040\002\uffbd\012\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\040\uffbd\044" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\054\uffbd\001\002\000\040" +
    "\002\uffbc\012\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\040\uffbc\044\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\054\uffbc\001\002\000\004\004\324\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\004\010" +
    "\314\001\002\000\026\006\051\014\057\042\052\052\061" +
    "\053\055\054\063\055\060\056\054\057\053\060\056\001" +
    "\002\000\004\010\316\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\010\320\001\002\000\026" +
    "\006\051\014\057\042\052\052\061\053\055\054\063\055" +
    "\060\056\054\057\053\060\056\001\002\000\004\007\322" +
    "\001\002\000\004\004\323\001\002\000\040\002\uffc3\012" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\040\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\054" +
    "\uffc3\001\002\000\040\002\uffc2\012\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\040\uffc2\044" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\054\uffc2\001\002\000\004" +
    "\012\334\001\002\000\026\006\051\014\057\042\052\052" +
    "\061\053\055\054\063\055\060\056\054\057\053\060\056" +
    "\001\002\000\004\007\330\001\002\000\004\011\331\001" +
    "\002\000\034\026\014\027\010\030\020\031\036\032\031" +
    "\033\026\034\035\040\007\044\040\047\033\050\037\051" +
    "\011\054\043\001\002\000\036\012\333\026\014\027\010" +
    "\030\020\031\036\032\031\033\026\034\035\040\007\044" +
    "\040\047\033\050\037\051\011\054\043\001\002\000\040" +
    "\002\uffd0\012\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\040\uffd0\044\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\054\uffd0\001\002\000\040\002\uffcf\012\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\040\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf\001" +
    "\002\000\004\004\342\001\002\000\026\006\051\014\057" +
    "\042\052\052\061\053\055\054\063\055\060\056\054\057" +
    "\053\060\056\001\002\000\004\007\340\001\002\000\004" +
    "\004\341\001\002\000\040\002\uffd9\012\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9" +
    "\044\uffd9\047\uffd9\050\uffd9\051\uffd9\054\uffd9\001\002\000" +
    "\040\002\uffd8\012\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\040\uffd8\044\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\054\uffd8\001\002\000\006\050\037\054\345" +
    "\001\002\000\026\006\051\014\057\042\052\052\061\053" +
    "\055\054\063\055\060\056\054\057\053\060\056\001\002" +
    "\000\004\005\044\001\002\000\026\006\uffcd\014\uffcd\042" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\001\002\000\026\006\uffcc\014\uffcc\042\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\001\002\000\004\004\351\001\002\000\004\054\353\001" +
    "\002\000\004\007\356\001\002\000\006\020\354\021\355" +
    "\001\002\000\004\007\uffcb\001\002\000\004\007\uffca\001" +
    "\002\000\004\011\357\001\002\000\034\026\014\027\010" +
    "\030\020\031\036\032\031\033\026\034\035\040\007\044" +
    "\040\047\033\050\037\051\011\054\043\001\002\000\036" +
    "\012\361\026\014\027\010\030\020\031\036\032\031\033" +
    "\026\034\035\040\007\044\040\047\033\050\037\051\011" +
    "\054\043\001\002\000\040\002\uffce\012\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\040\uffce" +
    "\044\uffce\047\uffce\050\uffce\051\uffce\054\uffce\001\002\000" +
    "\026\006\051\014\057\042\052\052\061\053\055\054\063" +
    "\055\060\056\054\057\053\060\056\001\002\000\006\007" +
    "\366\010\365\001\002\000\006\007\uffc7\010\uffc7\001\002" +
    "\000\026\006\051\014\057\042\052\052\061\053\055\054" +
    "\063\055\060\056\054\057\053\060\056\001\002\000\004" +
    "\004\367\001\002\000\040\002\uffc9\012\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\040\uffc9" +
    "\044\uffc9\047\uffc9\050\uffc9\051\uffc9\054\uffc9\001\002\000" +
    "\006\007\uffc8\010\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\013\004\033\003\001\001\000\042\004" +
    "\026\005\040\006\016\007\023\014\011\015\022\016\027" +
    "\017\041\020\031\021\033\022\014\025\020\026\021\027" +
    "\012\030\024\031\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\005\153\006\142\007\145\014\136\015\146" +
    "\016\151\017\154\020\150\021\152\022\141\025\143\026" +
    "\144\027\137\030\147\031\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\061\003\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\125\001\001\000\004" +
    "\003\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\120\001" +
    "\001\000\004\003\117\001\001\000\004\003\116\001\001" +
    "\000\004\003\115\001\001\000\004\003\114\001\001\000" +
    "\004\003\113\001\001\000\004\003\112\001\001\000\004" +
    "\003\111\001\001\000\004\003\110\001\001\000\004\003" +
    "\107\001\001\000\004\003\106\001\001\000\004\003\105" +
    "\001\001\000\004\003\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\131\003\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\134\005\040\006\016\007\023\014\011\015" +
    "\022\016\027\017\041\020\031\021\033\022\014\025\020" +
    "\026\021\027\012\030\024\031\015\001\001\000\040\005" +
    "\153\006\142\007\145\014\136\015\146\016\151\017\154" +
    "\020\150\021\152\022\141\025\143\026\144\027\137\030" +
    "\147\031\140\001\001\000\006\010\160\011\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\164\003" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\167\005\040\006\016\007\023\014\011\015\022\016" +
    "\027\017\041\020\031\021\033\022\014\025\020\026\021" +
    "\027\012\030\024\031\015\001\001\000\040\005\153\006" +
    "\142\007\145\014\136\015\146\016\151\017\154\020\150" +
    "\021\152\022\141\025\143\026\144\027\137\030\147\031" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\173\005\040\006\016\007\023\014\011\015\022\016" +
    "\027\017\041\020\031\021\033\022\014\025\020\026\021" +
    "\027\012\030\024\031\015\001\001\000\040\005\153\006" +
    "\142\007\145\014\136\015\146\016\151\017\154\020\150" +
    "\021\152\022\141\025\143\026\144\027\137\030\147\031" +
    "\140\001\001\000\002\001\001\000\006\002\176\003\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\201\005\040\006\016\007\023\014\011\015\022\016\027" +
    "\017\041\020\031\021\033\022\014\025\020\026\021\027" +
    "\012\030\024\031\015\001\001\000\040\005\153\006\142" +
    "\007\145\014\136\015\146\016\151\017\154\020\150\021" +
    "\152\022\141\025\143\026\144\027\137\030\147\031\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\213\003" +
    "\063\001\001\000\002\001\001\000\006\002\215\003\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\221\003\063\001\001\000\002\001\001" +
    "\000\006\002\223\003\063\001\001\000\002\001\001\000" +
    "\006\002\225\003\063\001\001\000\002\001\001\000\006" +
    "\002\227\003\063\001\001\000\002\001\001\000\006\002" +
    "\231\003\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\237\003\063\001\001\000\002\001\001\000\006" +
    "\002\241\003\063\001\001\000\002\001\001\000\006\002" +
    "\243\003\063\001\001\000\002\001\001\000\006\002\245" +
    "\003\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\254\003\063\001\001\000\002\001" +
    "\001\000\006\002\256\003\063\001\001\000\002\001\001" +
    "\000\006\002\260\003\063\001\001\000\002\001\001\000" +
    "\006\002\262\003\063\001\001\000\002\001\001\000\006" +
    "\002\264\003\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\272\003\063\001\001\000\002\001\001\000" +
    "\006\002\274\003\063\001\001\000\002\001\001\000\006" +
    "\002\276\003\063\001\001\000\002\001\001\000\006\002" +
    "\300\003\063\001\001\000\002\001\001\000\006\002\302" +
    "\003\063\001\001\000\002\001\001\000\006\002\304\003" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\312\003\063\001\001\000\002\001\001\000\006\002\314" +
    "\003\063\001\001\000\002\001\001\000\006\002\316\003" +
    "\063\001\001\000\002\001\001\000\006\002\320\003\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\326" +
    "\003\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\331\005\040\006\016\007\023\014\011\015\022" +
    "\016\027\017\041\020\031\021\033\022\014\025\020\026" +
    "\021\027\012\030\024\031\015\001\001\000\040\005\153" +
    "\006\142\007\145\014\136\015\146\016\151\017\154\020" +
    "\150\021\152\022\141\025\143\026\144\027\137\030\147" +
    "\031\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\336\003\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\346\014\345\023\343\001\001\000\006" +
    "\002\347\003\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\357" +
    "\005\040\006\016\007\023\014\011\015\022\016\027\017" +
    "\041\020\031\021\033\022\014\025\020\026\021\027\012" +
    "\030\024\031\015\001\001\000\040\005\153\006\142\007" +
    "\145\014\136\015\146\016\151\017\154\020\150\021\152" +
    "\022\141\025\143\026\144\027\137\030\147\031\140\001" +
    "\001\000\002\001\001\000\010\002\363\003\063\032\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\367\003\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DracoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DracoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DracoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String ArchivoOrigen;
    public static Instruccion root;

    public static ArrayList<TError> errores;

    public static ArrayList<String> expected;

    public void syntax_error(Symbol s)
    {
      /*METODO PARA RECUPERACION DE ERRORES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      /*METODO PARA ERRORE IRRECUPERABLES*/
      String esp = esperados();
      if(esp.equals(""))
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }
      else
      {
        this.errores.add(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString()+" | se esperaba: "+esperados(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
      }

      expected.clear();
      //Estatico.agregarError(new TError(s.value.toString(), "Error Sintactico Cerca de: "+s.value.toString(), "Sintactico", s.right, s.left, false, ArchivoOrigen));
    }

    private String esperados()
    {
      String cad = "";
      for(String s: expected)
      {
        cad += "\'"+s+"\',";
      }
      return cad;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DracoParser$actions {


  String ArchivoOrigen;

  Instruccion root;

  public void SetArchivo(String nombre)
  {
    ArchivoOrigen = nombre;
  }

  public Instruccion getRoot()
  {
    return root;
  }

  private final DracoParser parser;

  /** Constructor */
  CUP$DracoParser$actions(DracoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DracoParser$do_action(
    int                        CUP$DracoParser$act_num,
    java_cup.runtime.lr_parser CUP$DracoParser$parser,
    java.util.Stack            CUP$DracoParser$stack,
    int                        CUP$DracoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DracoParser$result;

      /* select the action based on the action number */
      switch (CUP$DracoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= cadena 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= caracter 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      char res = val.charAt(1);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= identificador 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Identificador(valright, valleft, ArchivoOrigen, val);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= decimal 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      double res = Double.parseDouble(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= entero 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      int res = Integer.parseInt(val);
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, res);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= falso 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, false);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= verdad 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new ValorPrimitivo(valright, valleft, ArchivoOrigen, true);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= oParent E cParent 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E dec 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.DEC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E inc 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
       RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.INC);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= not E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.NOT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= menos E 
            {
              Expresion RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E or E 
            {
              Expresion RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.OR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E and E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.AND);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft,ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENORIGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAYOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOR);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E dif E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIFERENTE);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E igual E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.IGUAL);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E mod E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MOD);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E pot E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.POT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E div E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.DIV);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E mult E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MULT);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MENOS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = new Operacion(auxright, auxleft, ArchivoOrigen, val1, val2, Estatico.OPERADORES.MAS);
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= E 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
      RESULT = val;
    
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUN_STRING ::= funString error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_STRING",22, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUN_STRING ::= funString oParent EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion cadena = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionString f = new FuncionString(auxright, auxleft, ArchivoOrigen, posx, posy ,cadena, color);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_STRING",22, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUN_LINE ::= funLine error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_LINE",21, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUN_LINE ::= funLine oParent EXP coma EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		Expresion x1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int y1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int y1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion y1 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion x2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion y2 = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int grosorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int grosorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion grosor = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionLine f = new FuncionLine(auxright, auxleft, ArchivoOrigen, x1, y1, x2, y2, color, grosor);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_LINE",21, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-14)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUN_OVAL ::= funOval error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_OVAL",20, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUN_OVAL ::= funOval oParent EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion ancho = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion alto = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionOval f = new FuncionOval(auxright, auxleft, ArchivoOrigen, posx, posy, color, alto, ancho);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_OVAL",20, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUN_QUADRATE ::= funQuadrate error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_QUADRATE",19, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUN_QUADRATE ::= funQuadrate oParent EXP coma EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion ancho = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion alto = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionQuadrate f = new FuncionQuadrate(auxright, auxleft, ArchivoOrigen, posx, posy, color, alto, ancho);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_QUADRATE",19, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-12)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUN_POINT ::= funPoint error ptComa 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_POINT",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUN_POINT ::= funPoint oParent EXP coma EXP coma EXP coma EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		Expresion posx = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion posy = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion color = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int diametroleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int diametroright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion diametro = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
          FuncionPoint f = new FuncionPoint(auxright, auxleft, ArchivoOrigen, posx, posy, color, diametro);
          RESULT = f;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("FUN_POINT",12, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-10)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SMASH ::= romper ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          RESULT = new SentenciaSmash(auxright, auxleft, ArchivoOrigen);
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SMASH",11, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECREMENTO ::= identificador dec ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = d;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AUMENTO ::= identificador inc ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("AUMENTO",14, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_EXPRE ::= EXP 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
           Expresion exp = (Expresion)nodo;
           ArrayList<Expresion> lista = new ArrayList<>();
           lista.add(exp);
           RESULT = lista;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",24, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_EXPRE ::= L_EXPRE coma EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            ArrayList<Expresion> exprs = (ArrayList<Expresion>)lista;
            if(lista==null){lista = new ArrayList<>();}
            Expresion exp = (Expresion)nodo;
            exprs.add(exp);
            RESULT = exprs;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_EXPRE",24, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RDASM ::= runDasm oParent L_EXPRE cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            ArrayList<Expresion> exps = (ArrayList<Expresion>)lista;
            if(exps==null){exps = new ArrayList<>();}
            RunMultDasm n = new RunMultDasm(auxright, auxleft, ArchivoOrigen, exps);
            RESULT = n;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("RDASM",23, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INS2 ::= identificador dec 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentDec d = new SentDec(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = d;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",18, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INS2 ::= identificador inc 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        SentAumento s = new SentAumento(auxright, auxleft, ArchivoOrigen, aux);
        RESULT = s;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS2",18, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INS1 ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INS1 ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Instruccion ins = (Instruccion)instruccion;
        RESULT = ins;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INS1",17, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_FOR ::= para oParent INS1 EXP ptComa INS2 cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)).value;
		int instruc1left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int instruc1right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object instruc1 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int instrc2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int instrc2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object instrc2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion condicion = (Expresion)nodo;
            Instruccion ins1 = (Instruccion)instruc1;
            Instruccion ins2 = (Instruccion)instrc2;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaFor n = new SentenciaFor(auxright, auxleft, ArchivoOrigen, ins1, condicion, ins2, instrucciones);
            RESULT = n;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_FOR",16, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-9)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT_WHILE ::= mientras error cKey 
            {
              Object RESULT =null;

              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",13, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_WHILE ::= mientras oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
            Expresion exp = (Expresion)nodo;
            ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
            SentenciaWhile s = new SentenciaWhile(auxright, auxleft, ArchivoOrigen, exp, instrucciones);
            RESULT = s;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("SENT_WHILE",13, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_NOT ::= si ifnot oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
          NodoELIF nuevo = new NodoELIF(instrucciones, auxright, auxleft, ArchivoOrigen);
          RESULT = nuevo;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF_NOT",7, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = new ArrayList<>();
         nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= ELSE sino oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
         Expresion condicion = (Expresion)nodo;
         ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
         ArrayList<NodoELIF> nodos = (ArrayList<NodoELIF>)lista2;
         if(nodos==null)
         {
           nodos = new ArrayList<>();
         }
         if(condicion!=null&&instrucciones!=null)
         {
           nodos.add(new NodoELIF(instrucciones, condicion, auxright, auxleft, ArchivoOrigen));
         }
         RESULT = nodos;
       
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ELSE",6, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= si error cKey 
            {
              Object RESULT =null;
		
        /*POR SI EXISTE UN ERROR*/
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, null);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> nodos = new ArrayList<>();
        NodoELIF n = (NodoELIF)defecto;
        nodos.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, nodos);
        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-7)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= si oParent EXP cParent oKey STATEMENTS cKey ELSE IF_NOT 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int listanodosleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listanodosright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object listanodos = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object defecto = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
        Expresion condicion = (Expresion)nodo;
        ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
        ArrayList<NodoELIF> elifs = (ArrayList<NodoELIF>)listanodos;
        NodoELIF n = (NodoELIF)defecto;
        elifs.add(n);
        SentenciaIf instruc = new SentenciaIf(auxright, auxleft, ArchivoOrigen, condicion, instrucciones, elifs);

        RESULT = instruc;
      
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-8)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMPRIMIR ::= print error ptComa 
            {
              Object RESULT =null;
		

          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPRIMIR ::= print oParent EXP cParent ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		
            Expresion exp = (Expresion)nodo;
            Print p = new Print(auxright, auxleft, ArchivoOrigen, exp);
            RESULT = p;
          
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION_VAR ::= identificador asigna EXP ptComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                Expresion val = (Expresion)nodo;
                AsignacionVar ins = new AsignacionVar(idright, idleft, ArchivoOrigen, id, val);
                RESULT = ins;
              
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",10, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-3)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_DECLA ::= identificador asigna EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
            DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo);
            ArrayList<Instruccion> declaraciones = new ArrayList<>();
            declaraciones.add(v);
            RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_DECLA ::= identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          DeclaracionVar v = new DeclaracionVar(idright, idleft, ArchivoOrigen, id);
          ArrayList<Instruccion> declaraciones = new ArrayList<>();
          declaraciones.add(v);
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_DECLA ::= L_DECLA coma identificador asigna EXP 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Expresion nodo = (Expresion)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id, nodo));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-4)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_DECLA ::= L_DECLA coma identificador 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
          if(declaraciones==null)
          {
            declaraciones = new ArrayList<>();
          }
          declaraciones.add(new DeclaracionVar(idright, idleft, ArchivoOrigen, id));
          RESULT = declaraciones;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("L_DECLA",8, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_VAR ::= var error ptComa 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  /*EL ERRO YA SE REPORTA CON EXITOOO!*/
                  parser.expected.add("identificador");
                  parser.expected.add("identificador = Expresion");
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_VAR ::= var L_DECLA ptComa 
            {
              Object RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		
                  ArrayList<Instruccion> declaraciones = (ArrayList<Instruccion>)lista;
                  if(declaraciones == null)
                  {
                    declaraciones = new ArrayList<>();
                  }
                  DeclaracionesVar d = new DeclaracionesVar(auxright, auxleft, ArchivoOrigen, declaraciones);
                  RESULT = d;
                
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",3, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-2)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENTS ::= RDASM 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENTS ::= FUN_STRING 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENTS ::= FUN_LINE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENTS ::= FUN_OVAL 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENTS ::= FUN_QUADRATE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENTS ::= FUN_POINT 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENTS ::= SENT_FOR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENTS ::= DECREMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= AUMENTO 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= SENT_WHILE 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= SMASH 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= IF 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= ASIGNACION_VAR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= IMPRIMIR 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)instruccion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= DECLARACION_VAR 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = new ArrayList<>();
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= STATEMENTS RDASM 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= STATEMENTS FUN_STRING 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= STATEMENTS FUN_LINE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= STATEMENTS FUN_OVAL 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= STATEMENTS FUN_QUADRATE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= STATEMENTS FUN_POINT 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= STATEMENTS SENT_FOR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= STATEMENTS DECREMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= STATEMENTS AUMENTO 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= STATEMENTS SENT_WHILE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= STATEMENTS IF 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= STATEMENTS SMASH 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= STATEMENTS ASIGNACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= STATEMENTS IMPRIMIR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int instrucleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int instrucright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object instruc = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion pr = (Instruccion)instruc;
              if(pr!=null)
              {
                instrucciones.add(pr);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENTS DECLARACION_VAR 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
              ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)lista;
              if(instrucciones==null)
              {
                instrucciones = new ArrayList<>();
              }
              Instruccion ins = (Instruccion)declaracion;
              if(ins!=null)
              {
                instrucciones.add(ins);
              }
              RESULT = instrucciones;
            
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",2, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 STATEMENTS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		int listadoleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).left;
		int listadoright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()).right;
		Object listado = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.peek()).value;
		
          ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)listado;
          if(instrucciones==null)
          {
            instrucciones = new ArrayList<>();
          }
          NodoInicio raiz = new NodoInicio(instrucciones);
          this.root = raiz;
          parser.root = raiz;
        
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 this.ArchivoOrigen = parser.ArchivoOrigen; parser.errores = new ArrayList<>(); parser.expected = new ArrayList<>();
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          return CUP$DracoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)).value;
		RESULT = start_val;
              CUP$DracoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DracoParser$stack.elementAt(CUP$DracoParser$top-1)), ((java_cup.runtime.Symbol)CUP$DracoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DracoParser$parser.done_parsing();
          return CUP$DracoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

